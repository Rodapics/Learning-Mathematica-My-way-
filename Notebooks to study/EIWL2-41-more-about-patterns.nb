(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    378518,       9482]
NotebookOptionsPosition[    269478,       7305]
NotebookOutlinePosition[    365820,       9270]
CellTagsIndexPosition[    365102,       9240]
WindowTitle->M\341s informaci\363n sobre los patrones: Una introducci\363n \
elemental a Wolfram Language
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 InterpretationBox[Cell[
  "M\[AAcute]s informaci\[OAcute]n sobre los patrones", "SectionInline"],
  $Line = 0; Null]], "SectionDoubleDigit",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False,
 CounterAssignments->{{"Section", 40}, {"Subsection", 0}, {
   "Subsubsection", 0}, {"Exercise", 0}},
 CellTags->"p:249",
 CellLabel->"In[24]:="],

Cell["\<\
Existe todo un sublenguaje de patrones en Wolfram Language. Hasta ahora se \
han visto ya algunos de sus elementos m\[AAcute]s importantes. \
\>", "Text",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False,
 CellTags->"i:1"],

Cell[TextData[{
 Cell[BoxData[
  ButtonBox["_",
   BaseStyle->"Link",
   ButtonData->"Blank"]], "InlineCodeText"],
 " (\[OpenCurlyDoubleQuote]guion-bajo\[CloseCurlyDoubleQuote]) representa \
cualquier cosa. ",
 Cell[BoxData[
  RowBox[{
   StyleBox["x", "CodeVariable"], 
   ButtonBox["_",
    BaseStyle->"Link",
    ButtonData->"Blank"]}]], "InlineCodeText"],
 " (\[OpenCurlyDoubleQuote]",
 StyleBox["x",
  FontSlant->"Italic"],
 " guion-bajo\[CloseCurlyDoubleQuote]) representa cualquier cosa, pero la \
denomina ",
 Cell[BoxData[
  StyleBox["x", "CodeVariable"]], "InlineCodeText"],
 ". ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["_",
    BaseStyle->"Link",
    ButtonData->"Blank"], 
   StyleBox["h", "CodeVariable"]}]], "InlineCodeText"],
 " representa cualquier cosa que tenga encabezado ",
 Cell[BoxData[
  StyleBox["h", "CodeVariable"]], "InlineCodeText"],
 ". Y, por \[UAcute]ltimo, ",
 Cell[BoxData[
  RowBox[{
   StyleBox["x", "CodeVariable"], 
   ButtonBox["_",
    BaseStyle->"Link",
    ButtonData->"Blank"], 
   StyleBox["h", "CodeVariable"]}]], "InlineCodeText"],
 " representa cualquier cosa que tenga encabezado ",
 Cell[BoxData[
  StyleBox["h", "CodeVariable"]], "InlineCodeText"],
 ", y le da el nombre ",
 Cell[BoxData[
  StyleBox["x", "CodeVariable"]], "InlineCodeText"],
 "."
}], "Text",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False],

Cell[TextData[{
 "Defina una funci\[OAcute]n cuyo argumento sea un entero llamado ",
 Cell[BoxData["n"], "InlineCode"],
 ":"
}], "CodeCaption",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False],

Cell[BoxData[
 RowBox[{
  RowBox[{"digitback", "[", "n_Integer", "]"}], ":=", 
  RowBox[{"Framed", "[", 
   RowBox[{"Reverse", "[", 
    RowBox[{"IntegerDigits", "[", "n", "]"}], "]"}], "]"}]}]], "Input",
 Deletable->False,
 CellLabel->"In[1]:="],

Cell["La funci\[OAcute]n se eval\[UAcute]a cuando el argumento es entero:", \
"CodeCaption",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"digitback", "[", "1234", "]"}], ",", 
   RowBox[{"digitback", "[", "6712", "]"}], ",", 
   RowBox[{"digitback", "[", "x", "]"}], ",", 
   RowBox[{"digitback", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "3", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"digitback", "[", 
    RowBox[{"2", "^", "32"}], "]"}]}], "}"}]], "Input",
 Deletable->False,
 CellLabel->"In[2]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FrameBox[
    RowBox[{"{", 
     RowBox[{"4", ",", "3", ",", "2", ",", "1"}], "}"}],
    StripOnInput->False], ",", 
   FrameBox[
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "7", ",", "6"}], "}"}],
    StripOnInput->False], ",", 
   RowBox[{"digitback", "[", "x", "]"}], ",", 
   RowBox[{"digitback", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "3", ",", "2"}], "}"}], "]"}], ",", 
   FrameBox[
    RowBox[{"{", 
     RowBox[{
     "6", ",", "9", ",", "2", ",", "7", ",", "6", ",", "9", ",", "4", ",", 
      "9", ",", "2", ",", "4"}], "}"}],
    StripOnInput->False]}], "}"}]], "Output",
 Editable->False,
 CellEditDuplicate->False,
 Evaluatable->False,
 CellLabel->"Out[2]="]
}, Open  ]],

Cell[TextData[{
 "En ocasiones, se desea imponer alguna condici\[OAcute]n a un \
patr\[OAcute]n. Para esto, se usa ",
 Cell[BoxData[
  ButtonBox["/;",
   BaseStyle->"Link",
   ButtonData->"Condition"]], "InlineCodeText"],
 " (\[OpenCurlyDoubleQuote]diagonal punto y coma\[CloseCurlyDoubleQuote]). ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"n", 
    ButtonBox["_",
     BaseStyle->"Link",
     ButtonData->"Blank"], 
    ButtonBox["Integer",
     BaseStyle->"CodeLink"], 
    ButtonBox["/;",
     BaseStyle->"Link",
     ButtonData->"Condition"], "n"}], ">", "0"}]], "InlineCodeText"],
 " quiere decir cualquier entero mayor que 0."
}], "Text",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False,
 CellTags->"i:2"],

Cell[TextData[{
 "De una definici\[OAcute]n que se aplique solo cuando ",
 Cell[BoxData[
  RowBox[{"n", ">", "0"}]], "InlineCode"],
 ":"
}], "CodeCaption",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False],

Cell[BoxData[
 RowBox[{
  RowBox[{"pdigitback", "[", 
   RowBox[{"n_Integer", "/;", 
    RowBox[{"n", ">", "0"}]}], "]"}], ":=", 
  RowBox[{"Framed", "[", 
   RowBox[{"Reverse", "[", 
    RowBox[{"IntegerDigits", "[", "n", "]"}], "]"}], "]"}]}]], "Input",
 Deletable->False,
 CellLabel->"In[3]:="],

Cell["La definici\[OAcute]n dada no se aplica a n\[UAcute]meros negativos:", \
"CodeCaption",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"pdigitback", "[", "1234", "]"}], ",", 
   RowBox[{"pdigitback", "[", 
    RowBox[{"-", "1234"}], "]"}], ",", 
   RowBox[{"pdigitback", "[", "x", "]"}], ",", 
   RowBox[{"pdigitback", "[", 
    RowBox[{"2", "^", "40"}], "]"}]}], "}"}]], "Input",
 Deletable->False,
 CellLabel->"In[4]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FrameBox[
    RowBox[{"{", 
     RowBox[{"4", ",", "3", ",", "2", ",", "1"}], "}"}],
    StripOnInput->False], ",", 
   RowBox[{"pdigitback", "[", 
    RowBox[{"-", "1234"}], "]"}], ",", 
   RowBox[{"pdigitback", "[", "x", "]"}], ",", 
   FrameBox[
    RowBox[{"{", 
     RowBox[{
     "6", ",", "7", ",", "7", ",", "7", ",", "2", ",", "6", ",", "1", ",", 
      "1", ",", "5", ",", "9", ",", "9", ",", "0", ",", "1"}], "}"}],
    StripOnInput->False]}], "}"}]], "Output",
 Editable->False,
 CellEditDuplicate->False,
 Evaluatable->False,
 CellLabel->"Out[4]="]
}, Open  ]],

Cell[TextData[{
 "El ",
 Cell[BoxData[
  ButtonBox["/;",
   BaseStyle->"Link",
   ButtonData->"Condition"]], "InlineCodeText"],
 " puede ponerse donde sea, incluso al final de toda la definici\[OAcute]n. "
}], "Text",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False],

Cell["Defina diferentes casos para la funci\[OAcute]n check:", "CodeCaption",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False],

Cell[BoxData[
 RowBox[{
  RowBox[{"check", "[", 
   RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
  RowBox[{"Red", "/;", 
   RowBox[{"x", ">", "y"}]}]}]], "Input",
 Deletable->False,
 CellLabel->"In[5]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"check", "[", 
   RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
  RowBox[{"Green", "/;", 
   RowBox[{"x", "\[LessEqual]", "y"}]}]}]], "Input",
 Deletable->False,
 CellLabel->"In[6]:="],

Cell["He aqu\[IAcute] algunos ejemplos de la funci\[OAcute]n check:", \
"CodeCaption",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"check", "[", 
    RowBox[{"1", ",", "2"}], "]"}], ",", 
   RowBox[{"check", "[", 
    RowBox[{"2", ",", "1"}], "]"}], ",", 
   RowBox[{"check", "[", 
    RowBox[{"3", ",", "4"}], "]"}], ",", 
   RowBox[{"check", "[", 
    RowBox[{"50", ",", "60"}], "]"}], ",", 
   RowBox[{"check", "[", 
    RowBox[{"60", ",", "50"}], "]"}]}], "}"}]], "Input",
 Deletable->False,
 CellLabel->"In[7]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[0, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0., 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 
          1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification])}],
       PlotRangePadding->None],
      "RGBColor[0, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[0, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[0, 1, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 
          1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification])}],
       PlotRangePadding->None],
      "RGBColor[1, 0, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 0, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[0, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0., 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 
          1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification])}],
       PlotRangePadding->None],
      "RGBColor[0, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[0, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[0, 1, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[0, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0., 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 
          1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification])}],
       PlotRangePadding->None],
      "RGBColor[0, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[0, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[0, 1, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 
          1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification])}],
       PlotRangePadding->None],
      "RGBColor[1, 0, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 0, 0],
    Editable->False,
    Selectable->False]}], "}"}]], "Output",
 Editable->False,
 CellEditDuplicate->False,
 Evaluatable->False,
 GraphicsBoxOptions->{BaselinePosition->Scaled[0.1]},
 CellLabel->"Out[7]="]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  ButtonBox["__",
   BaseStyle->"Link",
   ButtonData->"BlankSequence"]], "InlineCodeText"],
 " (\[OpenCurlyDoubleQuote]doble guion-bajo\[CloseCurlyDoubleQuote]) \
representa cualquier secuencia de uno o m\[AAcute]s argumentos. ",
 Cell[BoxData[
  ButtonBox["___",
   BaseStyle->"Link",
   ButtonData->"BlankNullSequence"]], "InlineCodeText"],
 " (\[OpenCurlyDoubleQuote]triple guion-bajo\[CloseCurlyDoubleQuote]) \
representa cero o m\[AAcute]s. "
}], "Text",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False,
 CellTags->"i:3"],

Cell["\<\
Defina una funci\[OAcute]n que busque negro y blanco (en ese orden) en una \
lista.\
\>", "Text",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False],

Cell["\<\
El patr\[OAcute]n coincide con negro seguido de blanco, con cualquier \
elemento anterior a, entre, o despu\[EAcute]s de ellos: \
\>", "CodeCaption",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False],

Cell[BoxData[
 RowBox[{
  RowBox[{"blackwhite", "[", 
   RowBox[{"{", 
    RowBox[{"___", ",", "Black", ",", "m___", ",", "White", ",", "___"}], 
    "}"}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{"1", ",", "m", ",", "2", ",", "m", ",", "3", ",", "m", ",", "4"}], 
   "}"}]}]], "Input",
 Deletable->False,
 CellTags->"LastCellOfAPage",
 CellLabel->"In[8]:="],

Cell["\<\
Elija la secuencia (la m\[AAcute]s corta) entre un negro y un blanco:\
\>", "CodeCaption",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False,
 CellTags->"p:250"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"blackwhite", "[", 
  RowBox[{"{", 
   RowBox[{
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[1, 0.5, 0.5], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.6666666666666666, 0.33333333333333337`, 0.33333333333333337`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "RGBColor[1, 0.5, 0.5]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0.5, 0.5]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[1, 0.5, 0.5],
     Editable->False,
     Selectable->False], ",", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->GrayLevel[0.],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "GrayLevel[0]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["GrayLevelColorValueSelector"], {
            0, {Left, Bottom}}, {Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     GrayLevel[0],
     Editable->False,
     Selectable->False], ",", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[1, 0.5, 0], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[0.6666666666666666, 0.33333333333333337`, 0.],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "RGBColor[1, 0.5, 0]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0.5, 0]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[1, 0.5, 0],
     Editable->False,
     Selectable->False], ",", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "RGBColor[1, 1, 0]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[1, 1, 0],
     Editable->False,
     Selectable->False], ",", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "RGBColor[1, 1, 0]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[1, 1, 0],
     Editable->False,
     Selectable->False], ",", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {GrayLevel[1], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->GrayLevel[0.6666666666666666],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "GrayLevel[1]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[1]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["GrayLevelColorValueSelector"], {
            0, {Left, Bottom}}, {Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     GrayLevel[1],
     Editable->False,
     Selectable->False], ",", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[0.5, 0, 0.5], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[0.33333333333333337`, 0., 0.33333333333333337`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "RGBColor[0.5, 0, 0.5]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[0.5, 0, 0.5]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.5, 0, 0.5],
     Editable->False,
     Selectable->False], ",", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {GrayLevel[1], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->GrayLevel[0.6666666666666666],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "GrayLevel[1]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[1]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["GrayLevelColorValueSelector"], {
            0, {Left, Bottom}}, {Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     GrayLevel[1],
     Editable->False,
     Selectable->False]}], "}"}], "]"}]], "Input",
 Deletable->False,
 GraphicsBoxOptions->{BaselinePosition->Scaled[0.1]},
 CellLabel->"In[9]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 0.5, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.33333333333333337`, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 
          1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification])}],
       PlotRangePadding->None],
      "RGBColor[1, 0.5, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0.5, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 0.5, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 
          1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification])}],
       PlotRangePadding->None],
      "RGBColor[1, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 1, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 
          1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification])}],
       PlotRangePadding->None],
      "RGBColor[1, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 1, 0],
    Editable->False,
    Selectable->False], ",", "2", ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 0.5, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.33333333333333337`, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 
          1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification])}],
       PlotRangePadding->None],
      "RGBColor[1, 0.5, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0.5, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 0.5, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 
          1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification])}],
       PlotRangePadding->None],
      "RGBColor[1, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 1, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 
          1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification])}],
       PlotRangePadding->None],
      "RGBColor[1, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 1, 0],
    Editable->False,
    Selectable->False], ",", "3", ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 0.5, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.33333333333333337`, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 
          1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification])}],
       PlotRangePadding->None],
      "RGBColor[1, 0.5, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0.5, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 0.5, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 
          1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification])}],
       PlotRangePadding->None],
      "RGBColor[1, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 1, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 
          1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification])}],
       PlotRangePadding->None],
      "RGBColor[1, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 1, 0],
    Editable->False,
    Selectable->False], ",", "4"}], "}"}]], "Output",
 Editable->False,
 CellEditDuplicate->False,
 Evaluatable->False,
 GraphicsBoxOptions->{BaselinePosition->Scaled[0.1]},
 CellLabel->"Out[9]="]
}, Open  ]],

Cell[TextData[{
 "Por defecto, ",
 Cell[BoxData[
  ButtonBox["__",
   BaseStyle->"Link",
   ButtonData->"BlankSequence"]], "InlineCodeText"],
 " y ",
 Cell[BoxData[
  ButtonBox["___",
   BaseStyle->"Link",
   ButtonData->"BlankNullSequence"]], "InlineCodeText"],
 " eligen las coincidencias m\[AAcute]s cortas que funcionen. Puede usarse  \
",
 ButtonBox["Longest",
  BaseStyle->"Link"],
 " para que elijan, en vez de eso, las m\[AAcute]s largas. "
}], "Text",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False,
 CellTags->"i:4"],

Cell["\<\
Especifique que la secuencia entre negro y blanco sea lo m\[AAcute]s larga \
posible:\
\>", "CodeCaption",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False],

Cell[BoxData[
 RowBox[{
  RowBox[{"blackwhitex", "[", 
   RowBox[{"{", 
    RowBox[{"___", ",", "Black", ",", 
     RowBox[{"Longest", "[", "m___", "]"}], ",", "White", ",", "___"}], "}"}],
    "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{"1", ",", "m", ",", "2", ",", "m", ",", "3", ",", "m", ",", "4"}], 
   "}"}]}]], "Input",
 Deletable->False,
 CellLabel->"In[10]:="],

Cell[TextData[{
 "Ahora, ",
 Cell[BoxData["m"], "InlineCode"],
 " elige todos los elementos hasta el \[UAcute]ltimo blanco:"
}], "CodeCaption",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"blackwhitex", "[", 
  RowBox[{"{", 
   RowBox[{
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[1, 0.5, 0.5], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.6666666666666666, 0.33333333333333337`, 0.33333333333333337`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "RGBColor[1, 0.5, 0.5]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0.5, 0.5]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[1, 0.5, 0.5],
     Editable->False,
     Selectable->False], ",", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->GrayLevel[0.],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "GrayLevel[0]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["GrayLevelColorValueSelector"], {
            0, {Left, Bottom}}, {Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     GrayLevel[0],
     Editable->False,
     Selectable->False], ",", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[1, 0.5, 0], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[0.6666666666666666, 0.33333333333333337`, 0.],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "RGBColor[1, 0.5, 0]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0.5, 0]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[1, 0.5, 0],
     Editable->False,
     Selectable->False], ",", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "RGBColor[1, 1, 0]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[1, 1, 0],
     Editable->False,
     Selectable->False], ",", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "RGBColor[1, 1, 0]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[1, 1, 0],
     Editable->False,
     Selectable->False], ",", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {GrayLevel[1], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->GrayLevel[0.6666666666666666],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "GrayLevel[1]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[1]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["GrayLevelColorValueSelector"], {
            0, {Left, Bottom}}, {Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     GrayLevel[1],
     Editable->False,
     Selectable->False], ",", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[0.5, 0, 0.5], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[0.33333333333333337`, 0., 0.33333333333333337`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "RGBColor[0.5, 0, 0.5]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[0.5, 0, 0.5]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.5, 0, 0.5],
     Editable->False,
     Selectable->False], ",", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {GrayLevel[1], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->GrayLevel[0.6666666666666666],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "GrayLevel[1]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[1]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["GrayLevelColorValueSelector"], {
            0, {Left, Bottom}}, {Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     GrayLevel[1],
     Editable->False,
     Selectable->False]}], "}"}], "]"}]], "Input",
 Deletable->False,
 GraphicsBoxOptions->{BaselinePosition->Scaled[0.1]},
 CellLabel->"In[11]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 0.5, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.33333333333333337`, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 
          1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification])}],
       PlotRangePadding->None],
      "RGBColor[1, 0.5, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0.5, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 0.5, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 
          1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification])}],
       PlotRangePadding->None],
      "RGBColor[1, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 1, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 
          1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification])}],
       PlotRangePadding->None],
      "RGBColor[1, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 1, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[1], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.6666666666666666],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 
          1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification])}],
       PlotRangePadding->None],
      "GrayLevel[1]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[1]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[1],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[0.5, 0, 0.5], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.33333333333333337`, 0., 0.33333333333333337`],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 
          1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification])}],
       PlotRangePadding->None],
      "RGBColor[0.5, 0, 0.5]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[0.5, 0, 0.5]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[0.5, 0, 0.5],
    Editable->False,
    Selectable->False], ",", "2", ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 0.5, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.33333333333333337`, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 
          1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification])}],
       PlotRangePadding->None],
      "RGBColor[1, 0.5, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0.5, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 0.5, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 
          1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification])}],
       PlotRangePadding->None],
      "RGBColor[1, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 1, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 
          1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification])}],
       PlotRangePadding->None],
      "RGBColor[1, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 1, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[1], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.6666666666666666],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 
          1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification])}],
       PlotRangePadding->None],
      "GrayLevel[1]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[1]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[1],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[0.5, 0, 0.5], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.33333333333333337`, 0., 0.33333333333333337`],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 
          1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification])}],
       PlotRangePadding->None],
      "RGBColor[0.5, 0, 0.5]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[0.5, 0, 0.5]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[0.5, 0, 0.5],
    Editable->False,
    Selectable->False], ",", "3", ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 0.5, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.33333333333333337`, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 
          1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification])}],
       PlotRangePadding->None],
      "RGBColor[1, 0.5, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0.5, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 0.5, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 
          1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification])}],
       PlotRangePadding->None],
      "RGBColor[1, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 1, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 
          1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification])}],
       PlotRangePadding->None],
      "RGBColor[1, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 1, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[1], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.6666666666666666],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 
          1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification])}],
       PlotRangePadding->None],
      "GrayLevel[1]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[1]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[1],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[0.5, 0, 0.5], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.33333333333333337`, 0., 0.33333333333333337`],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 
          1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification])}],
       PlotRangePadding->None],
      "RGBColor[0.5, 0, 0.5]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[0.5, 0, 0.5]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[0.5, 0, 0.5],
    Editable->False,
    Selectable->False], ",", "4"}], "}"}]], "Output",
 Editable->False,
 CellEditDuplicate->False,
 Evaluatable->False,
 GraphicsBoxOptions->{BaselinePosition->Scaled[0.1]},
 CellLabel->"Out[11]="]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"x", "|", "y", "|", "z"}]], "InlineCodeText"],
 " indica las coincidencias con ",
 Cell[BoxData["x"], "InlineCodeText"],
 ", ",
 Cell[BoxData["y"], "InlineCodeText"],
 " o ",
 Cell[BoxData["z"], "InlineCodeText"],
 ". ",
 Cell[BoxData[
  RowBox[{"x", 
   ButtonBox["..",
    BaseStyle->"Link",
    ButtonData->"Repeated"]}]], "InlineCodeText"],
 " coincide con cualquier n\[UAcute]mero de repeticiones de ",
 Cell[BoxData["x"], "InlineCodeText"],
 ". "
}], "Text",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False,
 CellTags->"i:5"],

Cell[TextData[{
 Cell[BoxData["bwcut"], "InlineCode"],
 " corta, en efecto, la secuencia m\[AAcute]s larga que contenga solo negro y \
blanco:"
}], "CodeCaption",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False],

Cell[BoxData[
 RowBox[{
  RowBox[{"bwcut", "[", 
   RowBox[{"{", 
    RowBox[{"a___", ",", 
     RowBox[{"Longest", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"Black", "|", "White"}], ")"}], ".."}], "]"}], ",", "b___"}], 
    "}"}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", "a", "}"}], ",", "Red", ",", 
    RowBox[{"{", "b", "}"}]}], "}"}]}]], "Input",
 Deletable->False,
 CellLabel->"In[12]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bwcut", "[", 
  RowBox[{"{", 
   RowBox[{
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[1, 0.5, 0.5], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.6666666666666666, 0.33333333333333337`, 0.33333333333333337`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "RGBColor[1, 0.5, 0.5]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0.5, 0.5]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[1, 0.5, 0.5],
     Editable->False,
     Selectable->False], ",", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[1, 0.5, 0.5], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.6666666666666666, 0.33333333333333337`, 0.33333333333333337`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "RGBColor[1, 0.5, 0.5]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0.5, 0.5]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[1, 0.5, 0.5],
     Editable->False,
     Selectable->False], ",", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->GrayLevel[0.],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "GrayLevel[0]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["GrayLevelColorValueSelector"], {
            0, {Left, Bottom}}, {Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     GrayLevel[0],
     Editable->False,
     Selectable->False], ",", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {GrayLevel[1], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->GrayLevel[0.6666666666666666],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "GrayLevel[1]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[1]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["GrayLevelColorValueSelector"], {
            0, {Left, Bottom}}, {Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     GrayLevel[1],
     Editable->False,
     Selectable->False], ",", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {GrayLevel[1], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->GrayLevel[0.6666666666666666],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "GrayLevel[1]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[1]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["GrayLevelColorValueSelector"], {
            0, {Left, Bottom}}, {Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     GrayLevel[1],
     Editable->False,
     Selectable->False], ",", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->GrayLevel[0.],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "GrayLevel[0]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["GrayLevelColorValueSelector"], {
            0, {Left, Bottom}}, {Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     GrayLevel[0],
     Editable->False,
     Selectable->False], ",", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->GrayLevel[0.],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "GrayLevel[0]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["GrayLevelColorValueSelector"], {
            0, {Left, Bottom}}, {Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     GrayLevel[0],
     Editable->False,
     Selectable->False], ",", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "RGBColor[1, 1, 0]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[1, 1, 0],
     Editable->False,
     Selectable->False]}], "}"}], "]"}]], "Input",
 Deletable->False,
 GraphicsBoxOptions->{BaselinePosition->Scaled[0.1]},
 CellLabel->"In[13]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     InterpretationBox[
      ButtonBox[
       TooltipBox[
        GraphicsBox[{
          {GrayLevel[0], RectangleBox[{0, 0}]}, 
          {GrayLevel[0], RectangleBox[{1, -1}]}, 
          {RGBColor[1, 0.5, 0.5], RectangleBox[{0, -1}, {2, 1}]}},
         AspectRatio->1,
         Frame->True,
         FrameStyle->RGBColor[
          0.6666666666666666, 0.33333333333333337`, 0.33333333333333337`],
         FrameTicks->None,
         ImageSize->
          Dynamic[{
           Automatic, 
            1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification])}],
         PlotRangePadding->None],
        "RGBColor[1, 0.5, 0.5]"],
       Appearance->None,
       BaseStyle->{},
       BaselinePosition->Baseline,
       ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
         If[
          Not[
           AbsoluteCurrentValue["Deployed"]], 
          SelectionMove[Typeset`box$, All, Expression]; 
          FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
          FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0.5, 0.5]; 
          FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
          MathLink`CallFrontEnd[
            FrontEnd`AttachCell[Typeset`box$, 
             FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
             Left, Top}, 
             "ClosingActions" -> {
              "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
       DefaultBaseStyle->{},
       Evaluator->Automatic,
       Method->"Preemptive"],
      RGBColor[1, 0.5, 0.5],
      Editable->False,
      Selectable->False], ",", 
     InterpretationBox[
      ButtonBox[
       TooltipBox[
        GraphicsBox[{
          {GrayLevel[0], RectangleBox[{0, 0}]}, 
          {GrayLevel[0], RectangleBox[{1, -1}]}, 
          {RGBColor[1, 0.5, 0.5], RectangleBox[{0, -1}, {2, 1}]}},
         AspectRatio->1,
         Frame->True,
         FrameStyle->RGBColor[
          0.6666666666666666, 0.33333333333333337`, 0.33333333333333337`],
         FrameTicks->None,
         ImageSize->
          Dynamic[{
           Automatic, 
            1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification])}],
         PlotRangePadding->None],
        "RGBColor[1, 0.5, 0.5]"],
       Appearance->None,
       BaseStyle->{},
       BaselinePosition->Baseline,
       ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
         If[
          Not[
           AbsoluteCurrentValue["Deployed"]], 
          SelectionMove[Typeset`box$, All, Expression]; 
          FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
          FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0.5, 0.5]; 
          FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
          MathLink`CallFrontEnd[
            FrontEnd`AttachCell[Typeset`box$, 
             FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
             Left, Top}, 
             "ClosingActions" -> {
              "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
       DefaultBaseStyle->{},
       Evaluator->Automatic,
       Method->"Preemptive"],
      RGBColor[1, 0.5, 0.5],
      Editable->False,
      Selectable->False]}], "}"}], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 
          1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification])}],
       PlotRangePadding->None],
      "RGBColor[1, 0, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 0, 0],
    Editable->False,
    Selectable->False], ",", 
   RowBox[{"{", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "RGBColor[1, 1, 0]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[1, 1, 0],
     Editable->False,
     Selectable->False], "}"}]}], "}"}]], "Output",
 Editable->False,
 CellEditDuplicate->False,
 Evaluatable->False,
 GraphicsBoxOptions->{BaselinePosition->Scaled[0.1]},
 CellLabel->"Out[13]="]
}, Open  ]],

Cell[TextData[{
 "El patr\[OAcute]n ",
 Cell[BoxData[
  RowBox[{"x", 
   ButtonBox["_",
    BaseStyle->"Link",
    ButtonData->"Blank"]}]], "InlineCodeText"],
 " es, de hecho, la abreviatura de ",
 Cell[BoxData[
  RowBox[{"x", ":", 
   ButtonBox["_",
    BaseStyle->"Link",
    ButtonData->"Blank"]}]], "InlineCodeText"],
 ", que significa \[OpenCurlyDoubleQuote]coincide con cualquier cosa (o sea, ",
 Cell[BoxData[
  ButtonBox[
   ButtonBox["_",
    BaseStyle->"Link",
    ButtonData->"Blank"],
   BaseStyle->"Link",
   ButtonData->"Blank"]], "InlineCodeText"],
 ") y al resultado le llama ",
 Cell[BoxData["x"], "InlineCodeText"],
 "\[CloseCurlyDoubleQuote]. Tambi\[EAcute]n se puede usar la notaci\[OAcute]n \
del tipo ",
 Cell[BoxData[
  RowBox[{"x", ":"}]], "InlineCodeText"],
 " para patrones m\[AAcute]s complicados."
}], "Text",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False,
 CellTags->"i:6"],

Cell[TextData[{
 "Forme un patr\[OAcute]n denominado ",
 Cell[BoxData["m"], "InlineCode"],
 " que coincida con una lista de dos parejas: "
}], "CodeCaption",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False],

Cell[BoxData[
 RowBox[{
  RowBox[{"grid22", "[", 
   RowBox[{"m", ":", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"_", ",", "_"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"_", ",", "_"}], "}"}]}], "}"}]}], "]"}], ":=", 
  RowBox[{"Grid", "[", 
   RowBox[{"m", ",", 
    RowBox[{"Frame", "\[Rule]", "All"}]}], "]"}]}]], "Input",
 Deletable->False,
 CellLabel->"In[14]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"grid22", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"a", ",", "b"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"c", ",", "d"}], "}"}]}], "}"}], "]"}], ",", 
   RowBox[{"grid22", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"12", ",", "34"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"56", ",", "78"}], "}"}]}], "}"}], "]"}], ",", 
   RowBox[{"grid22", "[", 
    RowBox[{"{", 
     RowBox[{"123", ",", "456"}], "}"}], "]"}], ",", 
   RowBox[{"grid22", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4", ",", "5", ",", "6"}], "}"}]}], "}"}], "]"}]}], 
  "}"}]], "Input",
 Deletable->False,
 CellLabel->"In[15]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[GridBox[{
      {"a", "b"},
      {"c", "d"}
     },
     AutoDelete->False,
     GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
    "Grid"], ",", 
   TagBox[GridBox[{
      {"12", "34"},
      {"56", "78"}
     },
     AutoDelete->False,
     GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
    "Grid"], ",", 
   RowBox[{"grid22", "[", 
    RowBox[{"{", 
     RowBox[{"123", ",", "456"}], "}"}], "]"}], ",", 
   RowBox[{"grid22", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4", ",", "5", ",", "6"}], "}"}]}], "}"}], "]"}]}], 
  "}"}]], "Output",
 Editable->False,
 CellEditDuplicate->False,
 Evaluatable->False,
 CellLabel->"Out[15]="]
}, Open  ]],

Cell["\<\
Denomine a la secuencia de negro y blanco, de modo que pueda usarse en el \
resultado:\
\>", "CodeCaption",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False],

Cell[BoxData[
 RowBox[{
  RowBox[{"bwcut", "[", 
   RowBox[{"{", 
    RowBox[{"a___", ",", 
     RowBox[{"r", ":", 
      RowBox[{"Longest", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"Black", "|", "White"}], ")"}], ".."}], "]"}]}], ",", 
     "b___"}], "}"}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", "a", "}"}], ",", 
    RowBox[{"Framed", "[", 
     RowBox[{"Length", "[", 
      RowBox[{"{", "r", "}"}], "]"}], "]"}], ",", 
    RowBox[{"{", "b", "}"}]}], "}"}]}]], "Input",
 Deletable->False,
 CellLabel->"In[16]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bwcut", "[", 
  RowBox[{"{", 
   RowBox[{
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[1, 0.5, 0.5], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.6666666666666666, 0.33333333333333337`, 0.33333333333333337`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "RGBColor[1, 0.5, 0.5]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0.5, 0.5]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[1, 0.5, 0.5],
     Editable->False,
     Selectable->False], ",", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[1, 0.5, 0.5], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.6666666666666666, 0.33333333333333337`, 0.33333333333333337`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "RGBColor[1, 0.5, 0.5]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0.5, 0.5]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[1, 0.5, 0.5],
     Editable->False,
     Selectable->False], ",", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->GrayLevel[0.],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "GrayLevel[0]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["GrayLevelColorValueSelector"], {
            0, {Left, Bottom}}, {Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     GrayLevel[0],
     Editable->False,
     Selectable->False], ",", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {GrayLevel[1], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->GrayLevel[0.6666666666666666],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "GrayLevel[1]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[1]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["GrayLevelColorValueSelector"], {
            0, {Left, Bottom}}, {Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     GrayLevel[1],
     Editable->False,
     Selectable->False], ",", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {GrayLevel[1], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->GrayLevel[0.6666666666666666],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "GrayLevel[1]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[1]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["GrayLevelColorValueSelector"], {
            0, {Left, Bottom}}, {Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     GrayLevel[1],
     Editable->False,
     Selectable->False], ",", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->GrayLevel[0.],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "GrayLevel[0]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["GrayLevelColorValueSelector"], {
            0, {Left, Bottom}}, {Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     GrayLevel[0],
     Editable->False,
     Selectable->False], ",", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->GrayLevel[0.],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "GrayLevel[0]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["GrayLevelColorValueSelector"], {
            0, {Left, Bottom}}, {Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     GrayLevel[0],
     Editable->False,
     Selectable->False], ",", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "RGBColor[1, 1, 0]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[1, 1, 0],
     Editable->False,
     Selectable->False]}], "}"}], "]"}]], "Input",
 Deletable->False,
 GraphicsBoxOptions->{BaselinePosition->Scaled[0.1]},
 CellLabel->"In[17]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     InterpretationBox[
      ButtonBox[
       TooltipBox[
        GraphicsBox[{
          {GrayLevel[0], RectangleBox[{0, 0}]}, 
          {GrayLevel[0], RectangleBox[{1, -1}]}, 
          {RGBColor[1, 0.5, 0.5], RectangleBox[{0, -1}, {2, 1}]}},
         AspectRatio->1,
         Frame->True,
         FrameStyle->RGBColor[
          0.6666666666666666, 0.33333333333333337`, 0.33333333333333337`],
         FrameTicks->None,
         ImageSize->
          Dynamic[{
           Automatic, 
            1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification])}],
         PlotRangePadding->None],
        "RGBColor[1, 0.5, 0.5]"],
       Appearance->None,
       BaseStyle->{},
       BaselinePosition->Baseline,
       ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
         If[
          Not[
           AbsoluteCurrentValue["Deployed"]], 
          SelectionMove[Typeset`box$, All, Expression]; 
          FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
          FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0.5, 0.5]; 
          FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
          MathLink`CallFrontEnd[
            FrontEnd`AttachCell[Typeset`box$, 
             FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
             Left, Top}, 
             "ClosingActions" -> {
              "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
       DefaultBaseStyle->{},
       Evaluator->Automatic,
       Method->"Preemptive"],
      RGBColor[1, 0.5, 0.5],
      Editable->False,
      Selectable->False], ",", 
     InterpretationBox[
      ButtonBox[
       TooltipBox[
        GraphicsBox[{
          {GrayLevel[0], RectangleBox[{0, 0}]}, 
          {GrayLevel[0], RectangleBox[{1, -1}]}, 
          {RGBColor[1, 0.5, 0.5], RectangleBox[{0, -1}, {2, 1}]}},
         AspectRatio->1,
         Frame->True,
         FrameStyle->RGBColor[
          0.6666666666666666, 0.33333333333333337`, 0.33333333333333337`],
         FrameTicks->None,
         ImageSize->
          Dynamic[{
           Automatic, 
            1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification])}],
         PlotRangePadding->None],
        "RGBColor[1, 0.5, 0.5]"],
       Appearance->None,
       BaseStyle->{},
       BaselinePosition->Baseline,
       ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
         If[
          Not[
           AbsoluteCurrentValue["Deployed"]], 
          SelectionMove[Typeset`box$, All, Expression]; 
          FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
          FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0.5, 0.5]; 
          FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
          MathLink`CallFrontEnd[
            FrontEnd`AttachCell[Typeset`box$, 
             FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
             Left, Top}, 
             "ClosingActions" -> {
              "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
       DefaultBaseStyle->{},
       Evaluator->Automatic,
       Method->"Preemptive"],
      RGBColor[1, 0.5, 0.5],
      Editable->False,
      Selectable->False]}], "}"}], ",", 
   FrameBox["5",
    StripOnInput->False], ",", 
   RowBox[{"{", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "RGBColor[1, 1, 0]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[1, 1, 0],
     Editable->False,
     Selectable->False], "}"}]}], "}"}]], "Output",
 Editable->False,
 CellEditDuplicate->False,
 Evaluatable->False,
 GraphicsBoxOptions->{BaselinePosition->Scaled[0.1]},
 CellLabel->"Out[17]="]
}, Open  ]],

Cell["\<\
Como \[UAcute]ltimo ejemplo, se usar\[AAcute]n patrones para implementar el \
algoritmo cl\[AAcute]sico de ciencias de la computaci\[OAcute]n para ordenar \
una lista, que intercambia repetidamente parejas de elementos sucesivos que \
est\[EAcute]n fuera de orden. No es dif\[IAcute]cil escribir cada paso del \
algoritmo como una sustituci\[OAcute]n para el patr\[OAcute]n.\
\>", "Text",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False,
 CellTags->{"bubble-sort", "i:7"}],

Cell["\<\
Sustituya los primeros elementos que no est\[EAcute]n en orden por los que si \
lo est\[EAcute]n: \
\>", "CodeCaption",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"5", ",", "4", ",", "1", ",", "3", ",", "2"}], "}"}], "/.", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x___", ",", "b_", ",", "a_", ",", "y___"}], "}"}], "/;", 
    RowBox[{"b", ">", "a"}]}], "\[Rule]", 
   RowBox[{"{", 
    RowBox[{"x", ",", "a", ",", "b", ",", "y"}], "}"}]}]}]], "Input",
 Deletable->False,
 CellLabel->"In[18]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "5", ",", "1", ",", "3", ",", "2"}], "}"}]], "Output",
 Editable->False,
 CellEditDuplicate->False,
 Evaluatable->False,
 CellTags->"LastCellOfAPage",
 CellLabel->"Out[18]="]
}, Open  ]],

Cell["\<\
Se repite la misma operaci\[OAcute]n 10 veces, al t\[EAcute]rmino de las \
cuales la lista queda completamente ordenada:\
\>", "CodeCaption",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False,
 CellTags->{"p:251", "i:8"}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NestList", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"#", "/.", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x___", ",", "b_", ",", "a_", ",", "y___"}], "}"}], "/;", 
        RowBox[{"b", ">", "a"}]}], "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"x", ",", "a", ",", "b", ",", "y"}], "}"}]}]}], ")"}], "&"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "5", ",", "1", ",", "3", ",", "2"}], "}"}], ",", "10"}],
   "]"}]], "Input",
 Deletable->False,
 CellLabel->"In[19]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"4", ",", "5", ",", "1", ",", "3", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "1", ",", "5", ",", "3", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", "5", ",", "3", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", "3", ",", "5", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "4", ",", "5", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "4", ",", "2", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "2", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]}], 
  "}"}]], "Output",
 Editable->False,
 CellEditDuplicate->False,
 Evaluatable->False,
 CellLabel->"Out[19]="]
}, Open  ]],

Cell[TextData[{
 "Al comienzo, no se sabe cu\[AAcute]ntas iteraciones tardar\[AAcute] en \
completar el ordenamiento de una lista dada. As\[IAcute] pues, lo mejor es \
usar ",
 ButtonBox["FixedPointList",
  BaseStyle->"Link"],
 ", que es como ",
 ButtonBox["NestList",
  BaseStyle->"Link"],
 ", salvo que no es necesario especificar el n\[UAcute]mero de pasos y, en \
vez de eso, sigue hasta que el resultado llega a un ",
 StyleBox["punto fijo",
  FontSlant->"Italic"],
 ", donde ya no hay cambio."
}], "Text",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False,
 CellTags->"FixedPointList"],

Cell["Repita la operaci\[OAcute]n hasta alcanzar un punto fijo:", \
"CodeCaption",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False,
 CellTags->"i:9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FixedPointList", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"#", "/.", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x___", ",", "b_", ",", "a_", ",", "y___"}], "}"}], "/;", 
        RowBox[{"b", ">", "a"}]}], "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"x", ",", "a", ",", "b", ",", "y"}], "}"}]}]}], ")"}], "&"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "5", ",", "1", ",", "3", ",", "2"}], "}"}]}], 
  "]"}]], "Input",
 Deletable->False,
 CellLabel->"In[20]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"4", ",", "5", ",", "1", ",", "3", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "1", ",", "5", ",", "3", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", "5", ",", "3", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", "3", ",", "5", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "4", ",", "5", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "4", ",", "2", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "2", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]}], 
  "}"}]], "Output",
 Editable->False,
 CellEditDuplicate->False,
 Evaluatable->False,
 CellLabel->"Out[20]="]
}, Open  ]],

Cell["\<\
Se transpone el resultado para ver la lista de los elementos que van \
apareciendo en primer, segundo, etc., lugares, en los pasos sucesivos:\
\>", "CodeCaption",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False,
 CellTags->"i:10"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Transpose", "[", "%", "]"}]], "Input",
 Deletable->False,
 CellLabel->"In[21]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "4", ",", "4", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1",
      ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "5", ",", "1", ",", "4", ",", "4", ",", "3", ",", "3", ",", "3", ",", "2",
      ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "5", ",", "5", ",", "3", ",", "4", ",", "4", ",", "2", ",", "3",
      ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "3", ",", "3", ",", "3", ",", "5", ",", "5", ",", "2", ",", "4", ",", "4",
      ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "5", ",", "5", ",", "5",
      ",", "5"}], "}"}]}], "}"}]], "Output",
 Editable->False,
 CellEditDuplicate->False,
 Evaluatable->False,
 CellLabel->"Out[21]="]
}, Open  ]],

Cell[TextData[{
 ButtonBox["ListLinePlot",
  BaseStyle->"Link"],
 " grafica cada lista en color diferente, mostrando como procede el \
ordenamiento: "
}], "CodeCaption",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", "%", "]"}]], "Input",
 Deletable->False,
 CellLabel->"In[22]:="],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.019444444444444445`],
      AbsoluteThickness[1.6], 
     LineBox[{{1., 4.}, {2., 4.}, {3., 1.}, {4., 1.}, {5., 1.}, {6., 1.}, {7.,
       1.}, {8., 1.}, {9., 1.}}]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], PointSize[0.019444444444444445`],
      AbsoluteThickness[1.6], 
     LineBox[{{1., 5.}, {2., 1.}, {3., 4.}, {4., 4.}, {5., 3.}, {6., 3.}, {7.,
       3.}, {8., 2.}, {9., 2.}}]}, 
    {RGBColor[0.560181, 0.691569, 0.194885], PointSize[0.019444444444444445`],
      AbsoluteThickness[1.6], 
     LineBox[{{1., 1.}, {2., 5.}, {3., 5.}, {4., 3.}, {5., 4.}, {6., 4.}, {7.,
       2.}, {8., 3.}, {9., 3.}}]}, 
    {RGBColor[0.922526, 0.385626, 0.209179], PointSize[0.019444444444444445`],
      AbsoluteThickness[1.6], 
     LineBox[{{1., 3.}, {2., 3.}, {3., 3.}, {4., 5.}, {5., 5.}, {6., 2.}, {7.,
       4.}, {8., 4.}, {9., 4.}}]}, 
    {RGBColor[0.528488, 0.470624, 0.701351], PointSize[0.019444444444444445`],
      AbsoluteThickness[1.6], 
     LineBox[{{1., 2.}, {2., 2.}, {3., 2.}, {4., 2.}, {5., 2.}, {6., 5.}, {7.,
       5.}, {8., 5.}, {9., 5.}}]}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->180,
  Method->{},
  PlotRange->{{0., 9.}, {0, 5.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 Editable->False,
 CellEditDuplicate->False,
 Evaluatable->False,
 CellLabel->"Out[22]="]
}, Open  ]],

Cell["\<\
He aqu\[IAcute] el resultado para ordenar una lista aleatoria de longitud 20:\
\
\>", "CodeCaption",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{"Transpose", "[", 
   RowBox[{"FixedPointList", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"#", "/.", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"x___", ",", "b_", ",", "a_", ",", "y___"}], "}"}], "/;", 
          RowBox[{"b", ">", "a"}]}], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"x", ",", "a", ",", "b", ",", "y"}], "}"}]}]}], ")"}], 
      "&"}], ",", 
     RowBox[{"RandomSample", "[", 
      RowBox[{"Range", "[", "20", "]"}], "]"}]}], "]"}], "]"}], 
  "]"}]], "Input",
 Deletable->False,
 CellLabel->"In[23]:="],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.008333333333333333], 
     AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxdzTlKREEUhtEfI0MDAwODVkRERNp5tp/zPLXtBgRjt1BLqyW5BJV+NLxT
UFxOfVxq4fN7+DWVZPR3/+f4/AzGs9+0D+3stXMaz+BZPIfnm+4/PbyIl/Ay
XsGreA2v4z7ewJt4C2/jHbyL9/A+PsCH+Agf4xN8ige46brgnNFxzuk4F3Sc
SzrOFR3nmo5zQ8e5pePc0XHu6TgPdJxHOs4THeeZjvNCx3ntusEFV5w39nHB
FWfIPi644ryzjwuuOCP2ccEV52PiX99GmtA=
      "]]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], PointSize[0.008333333333333333], 
     AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxdzjlKBEEAheGHkaGBgYGBisggIuO+O+W+b+N4AcHYK9TR+kgeQWWagf4a
msfXP1X04uf38Gsqyejv/d/x8zMY70JpP7Tbb3e63V67M3gWz5XuvfOle7+7
hJfxCv/Vw6t4Da/jPt7Am3gLb+MdvIv38D4+wIf4CB/jE3yKB7h0XXHO6Djn
dJwLOs4lHeeKjnNNx7mh49zSce7oOPd0nAc6ziMd54mO80zHeaHjvHZdcMUN
zhvnccUNzpDzuOIG553zuOIGZ8R5XHGD8zHxL9EMU2U=
      "]]}, 
    {RGBColor[0.560181, 0.691569, 0.194885], PointSize[0.008333333333333333], 
     AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJx100lKxFAUhtEfRw4dOHDgQEVERMS+14p935XlBgTHbuEtLUtyCSr1SsgB
A+Fy8nEfySCz75/9j7Ekg5/7dw6vr95wLjb1QdP1eJ2rdU7gyaZ7zhT703gG
z+F53mPhn72Rl/AyXsGreA2v1zn6zg28ibfwNt7Bu3gP7+MDfIiP8DHu4abr
gnNCxzml45zRcc7pOBd0nEs6zhUd55qOc0PHuaXj3NVZ/5uCc0/HeaDjPNJx
nug4z103uOAW54V9XHCL02cfF9zivLKPC25xBuzjgluctz9/A6PwV4U=
      "]]}, 
    {RGBColor[0.922526, 0.385626, 0.209179], PointSize[0.008333333333333333], 
     AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxd00tOAkEUheETRg4dOHDgQIkxhhjTCIIK2AUC4guwxQ2YOHYLd2m1JJYA
hFsm9VfSOfn65Ka7kqqzn7/qtyZptX12uV/rcp83wV+E3AfwYcjnjtyF5zF8
Ap/CdXz33PPS8wJmNuAr+Bou4KZn2lfaZ/rPFtyGb+EO3IXv4Hv4Ae7BfXgA
P8IlHHIbrCF6WCP0yekcPOU2WGP0sCboYU3Rw3pGD2uGHtYLeliv6JPTPXnz
9PNksN7Rw/pAD2uOHtYCPaxl7gAbHGF9Yh42OMKqMA8bHGF9YR42OMJaYR42
OML6/vcG2mVaMw==
      "]]}, 
    {RGBColor[0.528488, 0.470624, 0.701351], PointSize[0.008333333333333333], 
     AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxd081KQkEYxvEHVy1btGjRwg4hIRFmmabWOWnfZerxdAOCa2/hvbS5JC8h
xXeE+Q8cHn48vDMchjlfrstVTVK1/Xa5X5s8TRWpj+Bjd9vzBD6Fz+B6kZ6T
ebY8L+AGfAk3Pa89r2BmnIv/cYN92/AtfAd34HvPzLML9+AHuA8P4CH8CD/B
OVykNljP6GGNPP3eLTre6zi1wXpBD+sVPaw39LDe0cP6QA/rEz2sL09/FxYd
38F3aoP1gx7WBD2sX/SwpuhhzVIXsMEB1hzzsMEBVol52OAAa4F52OAAq8I8
bHCA9XfwP1KvXT0=
      "]]}, 
    {RGBColor[0.772079, 0.431554, 0.102387], PointSize[0.008333333333333333], 
     AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJx11MtOwkAYxfETViy7YMHChTaEEGOIVEXEC+XmXZBSX4DEta8wjzaP5COo
4ftI+o80aU5/PTNJJ+30aPNVfNYklb/nX26P75Fd5P9nHU7gBtyED+BDy8wy
hVtwG+5Ydi2PLU8tT2Afl+y534Mz+Aw+hy+wjj6e8xIewFfw0NLXfQ3fwLfw
HTyC86oDrDF6t7/niWVqPawpelgz9LDm6GHdo4f1gB7WI3pYT+jdvg+eLe07
DrBe0MN6RQ/rDT2sBXpYS/Sw3qvO3bZPAxxhrarO4QBHWAXmwwGOsNaYDwc4
wioxHw5u+49FWB87/wDVcVtw
      "]]}, 
    {RGBColor[0.363898, 0.618501, 0.782349], PointSize[0.008333333333333333], 
     AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJx11MtKw0AYxfGDK5dduHDhwhYREZEa6/2SsdqL9V7jCwiufYXv0eaRfASV
fF9h/tBAOPxyGDKTTNL9/J5/rUhq/s7/bI+fus395BdS6VW4A6/B6/AGvAn3
4C14G97xrDx34b0l8+wvyQO4gg/hAeZ9hPscwyfwKXzmGes894x1XsCX8BV8
DddwKm2wbjz9vVo45jcsbbBu0cO6Qw9rhD4c+2Jc2mBN0MOaood17+n73sI9
z1lpg/WAHtYjelhP6GE9o4f1gh7Wq6d/lyns36XBGdZb6QQbnGHNMR42OMN6
x3jY4Ayrwfiw/7cs7M8nw/pY+BdEVV1W
      "]]}, 
    {RGBColor[1, 0.75, 0], PointSize[0.008333333333333333], AbsoluteThickness[
     1.6], LineBox[CompressedData["
1:eJxd1ElOAlEUheETRwwdMHDAQAkhhhCjonQqPHuxQdoNkDh2C3dpb0ksQUjd
a1J/JZWTr05e1atXzcnmd/FzIGm12/dZbNtxkYfJD6SyKzCzCh/BNfgYrsMN
uAmfwi247XnpeQafwxcws4N5XuE813AX7sF9z7ivAeY5hG/gW/jOM9ZhBI/h
VLaF4znee/o6G6wH9LAe0cN6Qg/r2dPfAwvHer2UbbBe0cN6Qx+O93yC68N6
Rw/rAz2sT/SwvtDDmqKH9Y0+HN/hzLNeZIINzrDmGA8bnGEtMB42OMNaYjxs
cIa18vT/VAr7f8ngDGv97z9tR1xs
      "]]}, 
    {RGBColor[0.647624, 0.37816, 0.614037], PointSize[0.008333333333333333], 
     AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxd1E1OwlAUxfETRgwZOGDAAIgxhBCDgCiCUL/4UkERNmDi2C3cpb0lsQQh
3GvSf5Pm5PdOXtPX17b2/bv5KUjaHs5jno795JT1zAeyvItwCT6Dy3AFrsLM
c/gCbsBNuAVfwm34Cu7AXYz34Gu4D994xjpucR8D+A4ewiPPWPe9Z6xzDE/g
zNP3zcJxvYe8DdYjelhP6GE9ow/Hvr94+j4brCl6WDP0sOae/l5bOPZnkbfB
WqKH9Yoe1ht6WO/oYa3Qw1p7+ndn4Xi+H3lnsMEJ1ifmwwYnWBvMhw1OsL4w
HzY4heO/tPWs+3zY4ARr9+8/istdgA==
      "]]}, 
    {RGBColor[0.571589, 0.586483, 0.], PointSize[0.008333333333333333], 
     AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxd1EtOAkEUheETRg4dMGDgQAkhxBgD8vLdJaICykPADZg4dgt3abUkl6CG
e0n676Rz8vVJdVJd1XXy+b3+qkja/t3/ubt+il02kz9IZR/Ah3AVrsFH8DFc
hxswswWfwmfwOdyGO/AF3IV7cB8ewEO89xK+gq/hG8+Y5y3mcQffw4VnrFPy
9O9isB7Qwxqhh/WIHtbY09fZwjG/p7IN1jN6WC/ow7GPJ56+jwzWFD2sGXpY
r+hhvaGHNUcPa4E+HP/Z0tP3n8FalZ1ggzOsd4yHDc6w1hgPG5xhbTAetrCf
Qzkc58q27AQbnGF97P0LHVFeFA==
      "]]}, 
    {RGBColor[0.915, 0.3325, 0.2125], PointSize[0.008333333333333333], 
     AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxd1EtOAkEUheETRw4dMHDgQAkhxhiCCuKbAgUFRbFpN2Di2C3cpdWSXIIa
7iWpv5POydcnlVR3ddXB53f1tSWp/rv/c339DNd5lPxBKr0N78ANeBfeg/fh
JtyC2/AhzDyGO3AXPoFP4TO4B/fhc3gAX8CX8BV8jXndwLfwnWesy9Az3juV
Nlgj9LDG6GHdow/Huj54+roYrAl6WFP0sB49/b+1cHzPp9IGa4Ye1hw9rGf0
sF7Qw1qgh/Xq6fvKwrEv3kobrGXpBBucYb1jPGxwhlVhPGxwhrXC+LCfOxb2
cyPDqksn2OAM62PjXwSfXrw=
      "]]}, 
    {RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], PointSize[
     0.008333333333333333], AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxd1E1OQjEYheETRgwdOHDAAI0xxhCCooiA3AKC+AeCuAESxmzhW1qX5BKE
8JWk702ak6cnHdzb3p6vt8tNSdJqN/Z5eP6KQ54Gnwi5y/AJzDyDK3AVvoAv
4Sv4Gr6Ba3AdbsC38B3chO/hB7gFP8Jt+AnuwF24Bz/DfbxHAYfcBmuAHtYQ
PayRp++jJafv/pLbYI3Rw5qgT07n9NXT991gTdHDekMP6x09rA/0sD7Rw/pC
n5z+o5mnn3uDNUcP6zt3gA2OsBZYDxscYS2xHjY4wvrx9HsmJPu9YHCEtcod
YIMjrN+j/wESAVy4
      "]]}, 
    {RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
     PointSize[0.008333333333333333], AbsoluteThickness[1.6], 
     LineBox[CompressedData["
1:eJxd1EtOAkEUheETRwwZOHDAAIwxxhiC4APw0QXIQ8EHCBsgYcwW7tJqSS5B
CLdI6u+kcvLVSU2663ZtvV1sTiQtd2ufh+evOORF8I2QuwSX4VP4DK7AVfgc
Zl7CV/A1fAPX4QZ8CzfhFnwH38MP8CPchjtwF36Cn+EX+BUu4JDbYPXQw+qj
hzXw9PdosN7QwxqihzXy9Htpyem7jnMbrAl6WO/oYX2ghzVFD2uGHtanp8+N
Jad7/JXbYH2jh/WTO8AGR1hznE/2uTM4wlrkDrDBMTn9V349fe4DbHCEtcR5
2OAIa3X0Py6KXog=
      "]]}, 
    {RGBColor[0.736782672705901, 0.358, 0.5030266573755369], PointSize[
     0.008333333333333333], AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxd1E1OwlAUhuEvjBg6cOCAARpjjCEERREB6QUE8Q8EcQMkjNnCWdpdkksQ
wrkk923SnDx903TQnp6vt8tNSdJqd+7n4fgrDrMc/ELIzXkCn8JncAWuwhfw
JXwFX8M3cA2uww34Fr6Dm/A9/AC34Ee4DT/BHbgL9+BnuA8XcMhtsAbosIbo
sEbosF7QYY3RYU18+nsyWK/osKbosN7QYb2jw/pAT07f2WduS0578uXTv1OD
NUOHNUeH9Z07wAZHWAufvmch2ffM4AhrmTvAluz/kZic9voHz4cNjrBWuB82
OML6PfofvcVZ7A==
      "]]}, 
    {RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], PointSize[
     0.008333333333333333], AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxd1EtqAkEURuGfjBw6cODAQRQRCSLxFaOJdvl+J8bHBgTHbqGWVkvKElSs
Euo0NJevT9esb+dPl935RdLhdt/n4/pPHrNm/AMTOwWn4QychXPwK1yAi3AJ
LsNvcAWuwu8wZx1uwE24BX/AbfgT7sBd+Av+hntwH05gE9vCGqDDGqLDGqHD
GqPDmqDDmqLDmqHDmqPDWqDDWqLDWqEHh+9q7affC7uO39cG52H9oMP6RYe1
jW1gC7vgsFd/fvo9MrCFHawdzgf7/4YN9nvrYO1jG9jCDtYB52ELO1jHp698
hmDq
      "]]}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.008333333333333333], 
     AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxd1DlKBUEUhtEfI0MDAwMDFREREedZXzvP0/O5AcHYLdTSekkuQcVqoU9D
cTn9UVnfnn3/HH6MJRn9nN/593wN/uZ0U180fY/jCTyJp7BzBs/hebyAF/ES
XsYreBWv4XW8gTfxFt7GO3gX7+F9fIAP8RE+xgPc9F1wTug4p3ScMzrOOR3n
go5zSce5ouNc03Fu6Di3dJw7Os59nfU7KzgPdJxHOs4THee57waXznWP2s7d
nrz03eCCW5xhnfU/0XSue1lwi/Pad4MLbnFG3McFtzhv//4G4tBcnw==
      "]]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], PointSize[0.008333333333333333], 
     AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxd1ElKRDEYhdGLI4cOHDhwoCIiImLfa8W+78pyA4Jjt5ClvSW5BJV6VfBO
IPycfGSYzH9+978mkgz+9v8crp/ecK6W9qB0PYmn8DSewbN4Di/gRbyEl/EK
dq7hdbyBN/EW3sY7eBfv4X18gA/xET7GJ/gU93DpuuKc0XHO6TgXdJxLOs4V
HeeajnNDx7ml49zRce7pOA90nEc6zhMd55mO80LHee264Dpy+w4anLeuC664
GXn0L/Tb2b67gitucN65jytucAbcxxU3OB9j/wKnKF/p
      "]]}, 
    {RGBColor[0.560181, 0.691569, 0.194885], PointSize[0.008333333333333333], 
     AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxd1DlKBEEYhuEPI0MDAwMDFREREfddp933bRwvIBh7hTpaHckjqMz0QD8F
xc/TL39YPf/53f+aSDL4u/9zeH56w7ndjD40XU/iKTyNZ/AsnsMLeBEv4WW8
glfxGl7HG3gTb2HnDt7Fe3gfH+BDfISP8Qk+xT3cdF1wzug453ScCzrOJR3n
io5zTce5oePc0nHu6Dj3dJwHOs4jHeeJjvNMx3mh47x23eCCK84b+7i0Hv0H
auv2XfW7bnDBFeedfVxwxRmwjwuuOB9j/wIwy2IG
      "]]}, 
    {RGBColor[0.922526, 0.385626, 0.209179], PointSize[0.008333333333333333], 
     AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxd1DlKBEEYhuEPI0MDAwMDFREREfddp933bRwvIBh7hTpaHckjqMz0QD8F
xc/TL39YPf/53f+aSDL4u/9zeH56wznTjD40XU/iKTyNnbN4Di/gRbyEl/EK
XsVreB1v4E28hbfxDt7Fe3gfH+BDfISP8Qk+xT3cdF1wzug453ScCzrOJR3n
io5zTce5oePc0nHu6Dj3dJwHOs4jHeeJjvNMx3mh47x23eCCK84b+7i0Hr2T
itPvusEFV5x39nHBFWfAPi64tm7/Ax9j/wIn1lqw
      "]]}, 
    {RGBColor[0.528488, 0.470624, 0.701351], PointSize[0.008333333333333333], 
     AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxd00lKQ0EUhtEfRw4dOHDgQEVERMQu9ppn38Ymxg0IGWcLtbRakktQiRHe
KSgupz7usBY/R/3hVJLBz/2d4/PVHc+d5u+haXsaz+BZPIfn8QJewst4Ba/i
NbyON/Am3sLb2LmLO3gP7+MDfIiP8DE+waf4DHdx03bBOafjXNBxLuk4V3Sc
azrODR3nlo5zR8e5p+M80HEe6ThPdJweHeeZjvNCx3ltu8EFV5w39nHBFafP
Pi644ryzjwuuOAP2ccF14sm///j3N3qYYew=
      "]]}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{214.7265625, Automatic},
  Method->{},
  PlotRange->{{0., 84.}, {0, 20.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 Editable->False,
 CellEditDuplicate->False,
 Evaluatable->False,
 CellTags->"LastCellOfAPage",
 CellLabel->"Out[23]="]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Vocabulario", "VocabularySection",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False,
 CellTags->"p:252"],

Cell[BoxData[GridBox[{
   {
    RowBox[{
     StyleBox["patt", "CodeVariableLrg"], 
     ButtonBox["/;",
      BaseStyle->"CodeLink",
      ButtonData->"Condition"], 
     StyleBox["cond", "CodeVariableLrg"]}], " ", Cell[
    "un patr\[OAcute]n que coincide sujeto a una condici\[OAcute]n", 
     "VocabularyText"]},
   {
    ButtonBox[
     RowBox[{"_", "\[ThinSpace]", "_", "\[ThinSpace]", "_"}],
     BaseStyle->"CodeLink",
     ButtonData->"BlankNullSequence"], " ", Cell["\<\
un patr\[OAcute]n para cualquier secuencia de cero o m\[AAcute]s elementos
(\[OpenCurlyDoubleQuote]triple guion-bajo\[CloseCurlyDoubleQuote])\
\>", "VocabularyText"]},
   {
    RowBox[{
     StyleBox[
      StyleBox["patt", "CodeVariableLrg"],
      FontWeight->"Plain",
      FontSlant->"Italic"], " ", ".."}], " ", Cell[TextData[{
     "un patr\[OAcute]n para una o m\[AAcute]s repeticiones de ",
     Cell[BoxData[
      StyleBox["patt", "CodeVariable"]], "InlineCode"]
    }], "VocabularyText"]},
   {
    RowBox[{
     ButtonBox["Longest",
      BaseStyle->"CodeLink"], "[", 
     StyleBox["patt", "CodeVariableLrg"], "]"}], " ", Cell["\<\
un patr\[OAcute]n que elige la secuencia m\[AAcute]s larga con la que coincide\
\>", "VocabularyText"]},
   {
    RowBox[{
     ButtonBox["FixedPointList",
      BaseStyle->"CodeLink"], "[", 
     RowBox[{
      StyleBox["f", "CodeVariableLrg"], ",", 
      StyleBox["x", "CodeVariableLrg"]}], "]"}], " ", Cell[TextData[{
     "sigue anidando ",
     Cell[BoxData[
      StyleBox["f", "CodeVariable"]], "InlineCode"],
     " hasta que el resultado ya no cambie"
    }], "VocabularyText"]}
  }]], "VocabularyTable",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{$CellContext`open$$ = False}, 
  TagBox[GridBox[{
     {
      StyleBox["\<\"Exercises\"\>",
       StripOnInput->False,
       FontSlant->"Italic"], 
      PaneBox[
       TagBox[
        ButtonBox[
         DynamicBox[ToBoxes[
           If[$CellContext`open$$, 
            Row[{
              Style["-", "ExercisePreviewButtonTextHighlight"], 
              Style[" Preview Exercises", "ExercisePreviewButtonText"]}], 
            Row[{
              Style["+", "ExercisePreviewButtonTextHighlight"], 
              Style[" Preview Exercises", "ExercisePreviewButtonText"]}]], 
           StandardForm],
          ImageSizeCache->{115., {1., 10.}}],
         Appearance->None,
         ButtonFunction:>(
          If[$CellContext`open$$, $CellContext`open$$ = 
            False, $CellContext`open$$ = True]; NotebookFind[
            EvaluationNotebook[], "ExerciseSummaryCell", Next, CellStyle, 
            WrapAround -> True, AutoScroll -> False]; FrontEndTokenExecute[
            EvaluationNotebook[], "ExpandSelection"]; FrontEndExecute[
            FrontEndToken[
             EvaluationNotebook[], "OpenCloseGroup"]]),
         Evaluator->Automatic,
         Method->"Preemptive"],
        MouseAppearanceTag["LinkHand"]],
       Alignment->Right,
       ImageSize->Full]}
    },
    AutoDelete->False,
    GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Grid"],
  DynamicModuleValues:>{}]], "ExerciseSection",
 Editable->False,
 ShowCellBracket->False,
 GeneratedCell->True,
 CellAutoOverwrite->True,
 CellChangeTimes->{3.669991951589675*^9},
 ShowStringCharacters->False],

Cell[CellGroupData[{

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         PaneBox[
          
          StyleBox["\<\"12 Exercises Available\"\>", "ExerciseSummaryHeading",
           
           StripOnInput->False],
          ImageMargins->{{20, 0}, {0, 10}}]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
       
       GridBoxSpacings->{"Columns" -> {{Automatic}}, "Rows" -> {{0}}}],
      "Column"], 
     PaneBox[
      ButtonBox[
       StyleBox["\<\"Get Started \[RightGuillemet]\"\>", 
        "ExerciseSummaryHeading",
        StripOnInput->False],
       Appearance->None,
       ButtonFunction:>
        NotebookLocate[{"EIWL2-41-more-about-patterns-exercises.nb", ""}],
       Evaluator->Automatic,
       Method->"Preemptive"],
      FrameMargins->{{10, 0}, {10, 10}},
      ImageSize->Full]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {
       Scaled[0.7], 
       Scaled[0.3]}, "Rows" -> {{Automatic}}}],
  "Grid"]], "ExerciseSummaryCell",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False],

Cell[CellGroupData[{

Cell[TextData[{
 "Encuentre la lista de los d\[IAcute]gitos de aquellos cuadrados de los n\
\[UAcute]meros hasta 100 que contengan d\[IAcute]gitos sucesivos repetidos.",
 StyleBox[ButtonBox["\[NonBreakingSpace]\[RightGuillemet]",
  Appearance->None,
  Evaluator->Automatic,
  Method->"Preemptive",
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
   FrontEndExecute[
     FrontEndToken[
      ButtonNotebook[], "OpenCloseGroup"]])],
  FontColor->RGBColor[1, 0.501961, 0]]
}], "Exercise",
 Editable->False,
 Selectable->False,
 Deletable->False,
 CellDingbat->Cell[
  "41.1", "ExerciseNumber", FontColor -> 
   RGBColor[0.9019607843137255, 0.4117647058823529, 0.027450980392156862`]],
 ShowCellBracket->False],

Cell[BoxData[
 PaneBox[GridBox[{
    {" ", 
     StyleBox[
      RowBox[{"Expected", " ", 
       RowBox[{"output", ":"}]}],
      Editable->False,
      Selectable->False,
      StripOnInput->False,
      FontColor->RGBColor[0.45, 0.45, 0.45]], " "},
    {" ", 
     InterpretationBox[Cell[BoxData[
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "4", ",", "4"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "2", ",", "5"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"4", ",", "0", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"4", ",", "4", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"9", ",", "0", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1", ",", "5", ",", "6"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", "2", ",", "5"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "4", ",", "4", ",", "4"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "6", ",", "0", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "1", ",", "1", ",", "6"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "2", ",", "0", ",", "9"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "5", ",", "0", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", "3", ",", "6", ",", "4"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", "6", ",", "0", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", "8", ",", "4", ",", "4"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"4", ",", "2", ",", "2", ",", "5"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"4", ",", "4", ",", "8", ",", "9"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"4", ",", "9", ",", "0", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"5", ",", "7", ",", "7", ",", "6"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"6", ",", "4", ",", "0", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"6", ",", "8", ",", "8", ",", "9"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"7", ",", "2", ",", "2", ",", "5"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"7", ",", "7", ",", "4", ",", "4"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"8", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"8", ",", "8", ",", "3", ",", "6"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}]}], 
        "}"}]], "ExerciseOutput"],
      Apply[TextCell, 
       Cell[
        BoxData[
         RowBox[{"{", 
           RowBox[{
             RowBox[{"{", 
               RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"1", ",", "4", ",", "4"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"2", ",", "2", ",", "5"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"4", ",", "0", ",", "0"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"4", ",", "4", ",", "1"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"9", ",", "0", ",", "0"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"1", ",", "1", ",", "5", ",", "6"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"1", ",", "2", ",", "2", ",", "5"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"1", ",", "4", ",", "4", ",", "4"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"1", ",", "6", ",", "0", ",", "0"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"2", ",", "1", ",", "1", ",", "6"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"2", ",", "2", ",", "0", ",", "9"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"2", ",", "5", ",", "0", ",", "0"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"3", ",", "3", ",", "6", ",", "4"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"3", ",", "6", ",", "0", ",", "0"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"3", ",", "8", ",", "4", ",", "4"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"4", ",", "2", ",", "2", ",", "5"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"4", ",", "4", ",", "8", ",", "9"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"4", ",", "9", ",", "0", ",", "0"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"5", ",", "7", ",", "7", ",", "6"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"6", ",", "4", ",", "0", ",", "0"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"6", ",", "8", ",", "8", ",", "9"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"7", ",", "2", ",", "2", ",", "5"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"7", ",", "7", ",", "4", ",", "4"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"8", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"8", ",", "8", ",", "3", ",", "6"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"1", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}]}],
            "}"}]], "ExerciseOutput", Selectable -> False, Copyable -> False, 
        Editable -> False, ShowCellBracket -> False]]], " "}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Center}}},
   GridBoxBackground->{"Columns" -> {{
        RGBColor[1, 1, 1]}}},
   GridBoxSpacings->{"Columns" -> {{Automatic}}, "Rows" -> {{1}}}],
  FrameMargins->0]], "ExerciseOutput",
 Editable->False,
 Selectable->False,
 Deletable->False,
 CellFrame->{{1, 1}, {1, 1}},
 ShowCellBracket->False,
 CellFrameColor->RGBColor[0.85, 0.85, 0.85],
 LineBreakWithin->Automatic]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "En los primeros 100 n\[UAcute]meros romanos, encuentre los que contengan L, \
I y X, en ese orden.",
 StyleBox[ButtonBox["\[NonBreakingSpace]\[RightGuillemet]",
  Appearance->None,
  Evaluator->Automatic,
  Method->"Preemptive",
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
   FrontEndExecute[
     FrontEndToken[
      ButtonNotebook[], "OpenCloseGroup"]])],
  FontColor->RGBColor[1, 0.501961, 0]]
}], "Exercise",
 Editable->False,
 Selectable->False,
 Deletable->False,
 CellDingbat->Cell[
  "41.2", "ExerciseNumber", FontColor -> 
   RGBColor[0.9019607843137255, 0.4117647058823529, 0.027450980392156862`]],
 ShowCellBracket->False],

Cell[BoxData[
 PaneBox[GridBox[{
    {" ", 
     StyleBox[
      RowBox[{"Expected", " ", 
       RowBox[{"output", ":"}]}],
      Editable->False,
      Selectable->False,
      StripOnInput->False,
      FontColor->RGBColor[0.45, 0.45, 0.45]], " "},
    {" ", 
     InterpretationBox[Cell[BoxData[
       RowBox[{"{", 
        RowBox[{"\<\"XLIX\"\>", ",", "\<\"LIX\"\>", ",", "\<\"LXIX\"\>", 
         ",", "\<\"LXXIX\"\>", ",", "\<\"LXXXIX\"\>"}], "}"}]], 
       "ExerciseOutput"],
      Apply[TextCell, 
       Cell[
        BoxData[
         RowBox[{"{", 
           
           RowBox[{"\"XLIX\"", ",", "\"LIX\"", ",", "\"LXIX\"", ",", 
             "\"LXXIX\"", ",", "\"LXXXIX\""}], "}"}]], "ExerciseOutput", 
        Selectable -> False, Copyable -> False, Editable -> False, 
        ShowCellBracket -> False]]], " "}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Center}}},
   GridBoxBackground->{"Columns" -> {{
        RGBColor[1, 1, 1]}}},
   GridBoxSpacings->{"Columns" -> {{Automatic}}, "Rows" -> {{1}}}],
  FrameMargins->0]], "ExerciseOutput",
 Editable->False,
 Selectable->False,
 Deletable->False,
 CellFrame->{{1, 1}, {1, 1}},
 ShowCellBracket->False,
 CellFrameColor->RGBColor[0.85, 0.85, 0.85],
 LineBreakWithin->Automatic]
}, Closed]],

Cell[TextData[{
 "Defina una funci\[OAcute]n que pruebe si una lista de enteros es igual a la \
misma, pero en orden inverso.",
 StyleBox[ButtonBox["\[NonBreakingSpace]\[RightGuillemet]",
  Appearance->None,
  Evaluator->Automatic,
  Method->"Preemptive",
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
   FrontEndExecute[
     FrontEndToken[
      ButtonNotebook[], "OpenCloseGroup"]])],
  FontColor->RGBColor[1, 0.501961, 0]]
}], "Exercise",
 Editable->False,
 Selectable->False,
 Deletable->False,
 CellDingbat->Cell[
  "41.3", "ExerciseNumber", FontColor -> 
   RGBColor[0.9019607843137255, 0.4117647058823529, 0.027450980392156862`]],
 ShowCellBracket->False],

Cell[CellGroupData[{

Cell[TextData[{
 "En el art\[IAcute]culo de Wikipedia sobre \
\[OpenCurlyDoubleQuote]alliteration\[CloseCurlyDoubleQuote], encuentre la \
lista de las parejas de palabras sucesivas cuyas letras iniciales sean id\
\[EAcute]nticas.",
 StyleBox[ButtonBox["\[NonBreakingSpace]\[RightGuillemet]",
  Appearance->None,
  Evaluator->Automatic,
  Method->"Preemptive",
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
   FrontEndExecute[
     FrontEndToken[
      ButtonNotebook[], "OpenCloseGroup"]])],
  FontColor->RGBColor[1, 0.501961, 0]]
}], "Exercise",
 Editable->False,
 Selectable->False,
 Deletable->False,
 CellDingbat->Cell[
  "41.4", "ExerciseNumber", FontColor -> 
   RGBColor[0.9019607843137255, 0.4117647058823529, 0.027450980392156862`]],
 ShowCellBracket->False],

Cell[BoxData[
 PaneBox[GridBox[{
    {" ", 
     StyleBox[
      RowBox[{"Sample", " ", "expected", " ", 
       RowBox[{"output", ":"}]}],
      Editable->False,
      Selectable->False,
      StripOnInput->False,
      FontColor->RGBColor[0.45, 0.45, 0.45]], " "},
    {" ", 
     InterpretationBox[Cell[BoxData[
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\<\"same\"\>", ",", "\<\"sounds\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"or\"\>", ",", "\<\"of\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"stressed\"\>", ",", "\<\"syllables\"\>"}], "}"}], ",", 
         
         RowBox[{"{", 
          RowBox[{"\<\"alphabet\"\>", ",", "\<\"and\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"to\"\>", ",", "\<\"the\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"to\"\>", ",", "\<\"the\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"lazy\"\>", ",", "\<\"languid\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"Peter\"\>", ",", "\<\"Piper\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"Piper\"\>", ",", "\<\"Picked\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"Pickled\"\>", ",", "\<\"Peppers\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"wind\"\>", ",", "\<\"will\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"agreement\"\>", ",", "\<\"akin\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"to\"\>", ",", "\<\"the\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"stressed\"\>", ",", "\<\"syllable\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"as\"\>", ",", "\<\"alliterating\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"of\"\>", ",", "\<\"outside\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"same\"\>", ",", "\<\"sound\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"of\"\>", ",", "\<\"outside\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"to\"\>", ",", "\<\"the\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"brown\"\>", ",", "\<\"blazers\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"fundamentally\"\>", ",", "\<\"for\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"colour\"\>", ",", "\<\"co-ordination\"\>"}], "}"}], 
         ",", 
         RowBox[{"{", 
          RowBox[{"\<\"in\"\>", ",", "\<\"its\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"silken\"\>", ",", "\<\"sad\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"furrow\"\>", ",", "\<\"followed\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"followed\"\>", ",", "\<\"free\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"stood\"\>", ",", "\<\"still\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"Alphabetical\"\>", ",", "\<\"Africa\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"chapter\"\>", ",", "\<\"consists\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"at\"\>", ",", "\<\"all\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"written\"\>", ",", "\<\"with\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"Brent\"\>", ",", "\<\"Bernard\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"who\"\>", ",", "\<\"watch\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"watch\"\>", ",", "\<\"with\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"with\"\>", ",", "\<\"wild\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"wild\"\>", ",", "\<\"wonder\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"wide\"\>", ",", "\<\"window\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"beautiful\"\>", ",", "\<\"birds\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"birds\"\>", ",", "\<\"begin\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"bountiful\"\>", ",", "\<\"birdseed\"\>"}], "}"}], ",", 
         
         RowBox[{"{", 
          RowBox[{"\<\"Grey\"\>", ",", "\<\"Geese\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"grey\"\>", ",", "\<\"geese\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"Betty\"\>", ",", "\<\"Botter\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"Betty\"\>", ",", "\<\"Botter\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"butter\"\>", ",", "\<\"but\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"she\"\>", ",", "\<\"said\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"butter's\"\>", ",", "\<\"bitter\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"it\"\>", ",", "\<\"in\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"make\"\>", ",", "\<\"my\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"batter\"\>", ",", "\<\"bitter\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"bitter\"\>", ",", "\<\"but\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"better\"\>", ",", "\<\"butter\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"make\"\>", ",", "\<\"my\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"bitter\"\>", ",", "\<\"batter\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"batter\"\>", ",", "\<\"better\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"Peter\"\>", ",", "\<\"Piper\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"Piper\"\>", ",", "\<\"Peter\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"Peter\"\>", ",", "\<\"Piper\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"pickled\"\>", ",", "\<\"peppers\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"Peter\"\>", ",", "\<\"Piper\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"pickled\"\>", ",", "\<\"peppers\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"pickled\"\>", ",", "\<\"peppers\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"Peter\"\>", ",", "\<\"Piper\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"Irish\"\>", ",", "\<\"It\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"important\"\>", ",", "\<\"ingredient\"\>"}], "}"}], 
         ",", 
         RowBox[{"{", 
          
          RowBox[{"\<\"\[CapitalAE]thelwulf\"\>", 
           ",", "\<\"\[CapitalAE]thelbald\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          
          RowBox[{"\<\"\[CapitalAE]thelbald\"\>", 
           ",", "\<\"\[CapitalAE]thelberht\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"direct\"\>", ",", "\<\"descendants\"\>"}], "}"}], ",", 
         
         RowBox[{"{", 
          RowBox[{"\<\"Tancred\"\>", ",", "\<\"Torhtred\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"poetry\"\>", ",", "\<\"poets\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"can\"\>", ",", "\<\"call\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"splendid\"\>", ",", "\<\"silent\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"silent\"\>", ",", "\<\"sun\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"Walt\"\>", ",", "\<\"Whitman\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"Splendid\"\>", ",", "\<\"Silent\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"Silent\"\>", ",", "\<\"Sun\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"wondered\"\>", ",", "\<\"what\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"his\"\>", ",", "\<\"horse\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"also\"\>", ",", "\<\"add\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"to\"\>", ",", "\<\"the\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"harsh\"\>", ",", "\<\"hard\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"they\"\>", ",", "\<\"than\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"slippered\"\>", ",", "\<\"sleep\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"lean\"\>", ",", "\<\"lithe\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"fleet\"\>", ",", "\<\"flown\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"E.\"\>", ",", "\<\"E.\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"an\"\>", ",", "\<\"artistic\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"that\"\>", ",", "\<\"the\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"out\"\>", ",", "\<\"of\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"as\"\>", ",", "\<\"an\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"an\"\>", ",", "\<\"artistic\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"constraint\"\>", ",", "\<\"can\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"it\"\>", ",", "\<\"is\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"emotional\"\>", ",", "\<\"effect\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"as\"\>", ",", "\<\"a\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"and\"\>", ",", "\<\"attention\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"as\"\>", ",", "\<\"a\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"persuasive\"\>", ",", "\<\"public\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"any\"\>", ",", "\<\"attitude\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"as\"\>", ",", "\<\"a\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"adds\"\>", ",", "\<\"a\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"an\"\>", ",", "\<\"audience\[CloseCurlyQuote]s\"\>"}], 
          "}"}], ",", 
         RowBox[{"{", 
          
          RowBox[{"\<\"audience\[CloseCurlyQuote]s\"\>", 
           ",", "\<\"attention\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"noticeable\"\>", ",", "\<\"nature\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"evokes\"\>", ",", "\<\"emotion\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"an\"\>", ",", "\<\"audience\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"them\"\>", ",", "\<\"to\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"to\"\>", ",", "\<\"the\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"can\"\>", ",", "\<\"create\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"is\"\>", ",", "\<\"in\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"twenty-one\"\>", ",", "\<\"times\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"times\"\>", ",", "\<\"throughout\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"as\"\>", ",", "\<\"an\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"which\"\>", ",", "\<\"we\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"our\"\>", ",", "\<\"only\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"of\"\>", ",", "\<\"our\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"our\"\>", ",", "\<\"own\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"but\"\>", ",", "\<\"by\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"today\"\>", ",", "\<\"that\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"that\"\>", ",", "\<\"the\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"truths\"\>", ",", "\<\"that\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"is\"\>", ",", "\<\"inextricably\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"to\"\>", ",", "\<\"the\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"itself\"\>", ",", "\<\"is\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"testimony\"\>", ",", "\<\"to\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"to\"\>", ",", "\<\"the\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"have\"\>", ",", "\<\"had\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"because\"\>", ",", "\<\"brave\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"freedom's\"\>", ",", "\<\"front\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"Ronald\"\>", ",", "\<\"Reagan\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"Vietnam\"\>", ",", "\<\"Veterans\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"new\"\>", ",", "\<\"nation\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"to\"\>", ",", "\<\"the\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"modern\"\>", ",", "\<\"music\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"cartoon\"\>", ",", "\<\"characters\"\>"}], "}"}], ",", 
         
         RowBox[{"{", 
          RowBox[{"\<\"If\"\>", ",", "\<\"I\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"Anadiplosis\"\>", ",", "\<\"Assonance\"\>"}], "}"}], 
         ",", 
         RowBox[{"{", 
          RowBox[{"\<\"Tautogram\"\>", ",", "\<\"Tongue\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\<\"alliterations\"\>", ",", "\<\"and\"\>"}], "}"}]}], 
        "}"}]], "ExerciseOutput"],
      Apply[TextCell, 
       Cell[
        BoxData[
         RowBox[{"{", 
           RowBox[{
             RowBox[{"{", 
               RowBox[{"\"same\"", ",", "\"sounds\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"or\"", ",", "\"of\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"stressed\"", ",", "\"syllables\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"alphabet\"", ",", "\"and\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"to\"", ",", "\"the\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"to\"", ",", "\"the\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"lazy\"", ",", "\"languid\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"Peter\"", ",", "\"Piper\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"Piper\"", ",", "\"Picked\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"Pickled\"", ",", "\"Peppers\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"wind\"", ",", "\"will\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"agreement\"", ",", "\"akin\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"to\"", ",", "\"the\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"stressed\"", ",", "\"syllable\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"as\"", ",", "\"alliterating\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"of\"", ",", "\"outside\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"same\"", ",", "\"sound\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"of\"", ",", "\"outside\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"to\"", ",", "\"the\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"brown\"", ",", "\"blazers\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"fundamentally\"", ",", "\"for\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"colour\"", ",", "\"co-ordination\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"in\"", ",", "\"its\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"silken\"", ",", "\"sad\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"furrow\"", ",", "\"followed\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"followed\"", ",", "\"free\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"stood\"", ",", "\"still\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"Alphabetical\"", ",", "\"Africa\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"chapter\"", ",", "\"consists\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"at\"", ",", "\"all\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"written\"", ",", "\"with\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"Brent\"", ",", "\"Bernard\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"who\"", ",", "\"watch\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"watch\"", ",", "\"with\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"with\"", ",", "\"wild\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"wild\"", ",", "\"wonder\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"wide\"", ",", "\"window\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"beautiful\"", ",", "\"birds\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"birds\"", ",", "\"begin\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"bountiful\"", ",", "\"birdseed\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"Grey\"", ",", "\"Geese\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"grey\"", ",", "\"geese\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"Betty\"", ",", "\"Botter\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"Betty\"", ",", "\"Botter\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"butter\"", ",", "\"but\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"she\"", ",", "\"said\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"butter's\"", ",", "\"bitter\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"it\"", ",", "\"in\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"make\"", ",", "\"my\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"batter\"", ",", "\"bitter\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"bitter\"", ",", "\"but\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"better\"", ",", "\"butter\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"make\"", ",", "\"my\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"bitter\"", ",", "\"batter\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"batter\"", ",", "\"better\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"Peter\"", ",", "\"Piper\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"Piper\"", ",", "\"Peter\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"Peter\"", ",", "\"Piper\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"pickled\"", ",", "\"peppers\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"Peter\"", ",", "\"Piper\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"pickled\"", ",", "\"peppers\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"pickled\"", ",", "\"peppers\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"Peter\"", ",", "\"Piper\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"Irish\"", ",", "\"It\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"important\"", ",", "\"ingredient\""}], "}"}], ",", 
             RowBox[{"{", 
               
               RowBox[{
                "\"\[CapitalAE]thelwulf\"", ",", "\"\[CapitalAE]thelbald\""}],
                "}"}], ",", 
             RowBox[{"{", 
               
               RowBox[{
                "\"\[CapitalAE]thelbald\"", ",", 
                 "\"\[CapitalAE]thelberht\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"direct\"", ",", "\"descendants\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"Tancred\"", ",", "\"Torhtred\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"poetry\"", ",", "\"poets\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"can\"", ",", "\"call\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"splendid\"", ",", "\"silent\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"silent\"", ",", "\"sun\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"Walt\"", ",", "\"Whitman\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"Splendid\"", ",", "\"Silent\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"Silent\"", ",", "\"Sun\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"wondered\"", ",", "\"what\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"his\"", ",", "\"horse\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"also\"", ",", "\"add\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"to\"", ",", "\"the\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"harsh\"", ",", "\"hard\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"they\"", ",", "\"than\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"slippered\"", ",", "\"sleep\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"lean\"", ",", "\"lithe\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"fleet\"", ",", "\"flown\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"E.\"", ",", "\"E.\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"an\"", ",", "\"artistic\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"that\"", ",", "\"the\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"out\"", ",", "\"of\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"as\"", ",", "\"an\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"an\"", ",", "\"artistic\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"constraint\"", ",", "\"can\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"it\"", ",", "\"is\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"emotional\"", ",", "\"effect\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"as\"", ",", "\"a\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"and\"", ",", "\"attention\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"as\"", ",", "\"a\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"persuasive\"", ",", "\"public\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"any\"", ",", "\"attitude\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"as\"", ",", "\"a\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"adds\"", ",", "\"a\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"an\"", ",", "\"audience\[CloseCurlyQuote]s\""}], 
               "}"}], ",", 
             RowBox[{"{", 
               
               RowBox[{
                "\"audience\[CloseCurlyQuote]s\"", ",", "\"attention\""}], 
               "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"noticeable\"", ",", "\"nature\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"evokes\"", ",", "\"emotion\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"an\"", ",", "\"audience\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"them\"", ",", "\"to\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"to\"", ",", "\"the\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"can\"", ",", "\"create\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"is\"", ",", "\"in\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"twenty-one\"", ",", "\"times\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"times\"", ",", "\"throughout\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"as\"", ",", "\"an\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"which\"", ",", "\"we\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"our\"", ",", "\"only\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"of\"", ",", "\"our\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"our\"", ",", "\"own\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"but\"", ",", "\"by\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"today\"", ",", "\"that\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"that\"", ",", "\"the\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"truths\"", ",", "\"that\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"is\"", ",", "\"inextricably\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"to\"", ",", "\"the\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"itself\"", ",", "\"is\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"testimony\"", ",", "\"to\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"to\"", ",", "\"the\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"have\"", ",", "\"had\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"because\"", ",", "\"brave\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"freedom's\"", ",", "\"front\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"Ronald\"", ",", "\"Reagan\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"Vietnam\"", ",", "\"Veterans\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"new\"", ",", "\"nation\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"to\"", ",", "\"the\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"modern\"", ",", "\"music\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"cartoon\"", ",", "\"characters\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"If\"", ",", "\"I\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"Anadiplosis\"", ",", "\"Assonance\""}], "}"}], ",", 
             
             RowBox[{"{", 
               RowBox[{"\"Tautogram\"", ",", "\"Tongue\""}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"\"alliterations\"", ",", "\"and\""}], "}"}]}], "}"}]],
         "ExerciseOutput", Selectable -> False, Copyable -> False, Editable -> 
        False, ShowCellBracket -> False]]], " "}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Center}}},
   GridBoxBackground->{"Columns" -> {{
        RGBColor[1, 1, 1]}}},
   GridBoxSpacings->{"Columns" -> {{Automatic}}, "Rows" -> {{1}}}],
  FrameMargins->0]], "ExerciseOutput",
 Editable->False,
 Selectable->False,
 Deletable->False,
 CellFrame->{{1, 1}, {1, 1}},
 ShowCellBracket->False,
 CellFrameColor->RGBColor[0.85, 0.85, 0.85],
 LineBreakWithin->Automatic]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Use ",
 ButtonBox["Grid",
  BaseStyle->"Link"],
 " para mostrar el proceso de ordenamiento dado en esta secci\[OAcute]n para ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"4", ",", "5", ",", "1", ",", "3", ",", "2"}], "}"}]], 
  "InlineCode"],
 ", donde los pasos sucesivos se presenten en forma vertical.",
 StyleBox[ButtonBox["\[NonBreakingSpace]\[RightGuillemet]",
  Appearance->None,
  Evaluator->Automatic,
  Method->"Preemptive",
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
   FrontEndExecute[
     FrontEndToken[
      ButtonNotebook[], "OpenCloseGroup"]])],
  FontColor->RGBColor[1, 0.501961, 0]]
}], "Exercise",
 Editable->False,
 Selectable->False,
 Deletable->False,
 CellDingbat->Cell[
  "41.5", "ExerciseNumber", FontColor -> 
   RGBColor[0.9019607843137255, 0.4117647058823529, 0.027450980392156862`]],
 ShowCellBracket->False],

Cell[BoxData[
 PaneBox[GridBox[{
    {" ", 
     StyleBox[
      RowBox[{"Expected", " ", 
       RowBox[{"output", ":"}]}],
      Editable->False,
      Selectable->False,
      StripOnInput->False,
      FontColor->RGBColor[0.45, 0.45, 0.45]], " "},
    {" ", 
     InterpretationBox[Cell[BoxData[
       TagBox[GridBox[{
          {"4", "5", "1", "3", "2"},
          {"4", "1", "5", "3", "2"},
          {"1", "4", "5", "3", "2"},
          {"1", "4", "3", "5", "2"},
          {"1", "3", "4", "5", "2"},
          {"1", "3", "4", "2", "5"},
          {"1", "3", "2", "4", "5"},
          {"1", "2", "3", "4", "5"},
          {"1", "2", "3", "4", "5"}
         },
         AutoDelete->False,
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"]], "ExerciseOutput"],
      Apply[TextCell, 
       Cell[
        BoxData[
         TagBox[
          
          GridBox[{{"4", "5", "1", "3", "2"}, {"4", "1", "5", "3", "2"}, {
            "1", "4", "5", "3", "2"}, {"1", "4", "3", "5", "2"}, {
            "1", "3", "4", "5", "2"}, {"1", "3", "4", "2", "5"}, {
            "1", "3", "2", "4", "5"}, {"1", "2", "3", "4", "5"}, {
            "1", "2", "3", "4", "5"}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]], 
        "ExerciseOutput", Selectable -> False, Copyable -> False, Editable -> 
        False, ShowCellBracket -> False]]], " "}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Center}}},
   GridBoxBackground->{"Columns" -> {{
        RGBColor[1, 1, 1]}}},
   GridBoxSpacings->{"Columns" -> {{Automatic}}, "Rows" -> {{1}}}],
  FrameMargins->0]], "ExerciseOutput",
 Editable->False,
 Selectable->False,
 Deletable->False,
 CellFrame->{{1, 1}, {1, 1}},
 ShowCellBracket->False,
 CellFrameColor->RGBColor[0.85, 0.85, 0.85],
 LineBreakWithin->Automatic]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Use ",
 ButtonBox["ArrayPlot",
  BaseStyle->"Link"],
 " para mostrar el proceso de ordenamiento visto en esta secci\[OAcute]n para \
una lista de longitud 50, donde los pasos sucesivos aparezcan en forma \
horizontal.",
 StyleBox[ButtonBox["\[NonBreakingSpace]\[RightGuillemet]",
  Appearance->None,
  Evaluator->Automatic,
  Method->"Preemptive",
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
   FrontEndExecute[
     FrontEndToken[
      ButtonNotebook[], "OpenCloseGroup"]])],
  FontColor->RGBColor[1, 0.501961, 0]]
}], "Exercise",
 Editable->False,
 Selectable->False,
 Deletable->False,
 CellDingbat->Cell[
  "41.6", "ExerciseNumber", FontColor -> 
   RGBColor[0.9019607843137255, 0.4117647058823529, 0.027450980392156862`]],
 ShowCellBracket->False],

Cell[BoxData[
 PaneBox[GridBox[{
    {" ", 
     StyleBox[
      RowBox[{"Sample", " ", "expected", " ", 
       RowBox[{"output", ":"}]}],
      Editable->False,
      Selectable->False,
      StripOnInput->False,
      FontColor->RGBColor[0.45, 0.45, 0.45]], " "},
    {" ", 
     InterpretationBox[Cell[BoxData[
       GraphicsBox[RasterBox[CompressedData["
1:eJzt3e1y4jYUBuBsmnZZWBoCAdvkw8aAwAZL2V5Kr6DTG+j9/6tMYlmyzrE+
gpek9TvTmW43m2TR4/fIgtDV3//8+ff11dXVH/yfv/i/xH36vCNXhgR9+tgE
8RN/aU/ap08ZYxEhgOLr1pA+/4OY8PCkhiL6EiCC4l/awvp81ligqUJMeMpJ
1l5E19cBQii+acmwz+dKjYZZoKlCTHh40tYi4gkQQ/GveMZ9Pn7kKhrWaJgF
GrEPMuHhSduKqEyAIIp/QxP1+UiBx9tYrqJhjYZZoKlCTHh40pYiOiVAFMVf
sdA+PyWWG6UIHm9juYqGNRpmgaYKMeHhSfEiek2AMIoHSMI+5w4Ih1pulCJ4
vI3lKhrWaJgFmirEhIcnRYvoLQHiKP4GJ+vjGGMHhSAcarlRiuDxNparaFij
YRZoqhATHp4UK6IqAQIphm9HHAq2z03JJzN2UAjCoZYbpQj+0mO5ioY1GmaB
pgox4eFJET8iAXJjG4+gWHzFPoPBWzXdlHwyYweFIBxqiTiCx9tYrqJhjYY5
/DWICQ9PajohCUBIo1H8Hci0Dxx15g3equmm5JMZOygE4VDLjVIEj7exXEXD
Gg2zQFOFWJywpYgfkQCCxBMDRyuLPqdou6ipOvMGb9V0U/LJjB0UgnCo5UYp
gsfbWK6iYY2GWaCpQkx4eFLEj0iAnNPFv2tJ/neBN+ULbRc1VWfe4K2aTnwy
YweFIBxquVGK4PE2lqtIQsMs0FQhJjw8qenAN9AhnRLfNmN52/zfyVUC//eF
touaqjNvIPPJjB0UgnCo5UYpgsfbGEHDLNBUIRZPGKSIH5FAg/SaeNKIg/xP
nrei+vIlgTflC20XNVUraSDzyYwdFIJwqOVGKYL/EmMEDbNAU4WY8PCkiB+R
oAnpLfGdmvl/OOoEHAlJCbwpX2hDbqpW0kDmkxk7KAThUMvLIYIhYWiYBZoq
xISHJ0X8iAR3cGL1Nsl4K/Rpc3U1VwtqJH4rgfdMC23ITdVKUvhkxg4KQTjU
co5FDmJ4mAWaKsSEhydF/IgEyI13PJNj8ZU+V0Rf/XJ9PVfFjYSkBN4zLbQh
N23hkxk7KAThUEsxkYMYHubwIBETHp7UdIITzODE91LyTxvk2ZmJ6Csuaq4W
1EhISuA900JDNG3hkxk7KAThUEsxkduVxSzQVCEWJ4Ap4kckuIcTS3sU0+f4
aKkh5cjh+UQWNVcLaiQkJXAnLTRE0xY+mbGDQhAOtRQTOYjhYRZoqhCLxzpF
/IgEyMY3rs8V3Tr4cqlUzWpIOXL0NJFFzdWCGglJCdxJCw3RtIVPZvy+QxAO
tRQTOYjhYQ4XKjHh4UlNd1ABclodix87Kj5akLF3W6ma1ZBy5OhpIouaqwVV
S0rgTlpoiKYtfDJjB4UgHGopJnJrd2aBpgqxuANPTU97YD/NFlcvVkKGzMVy
VSC/cVupmtWQcuToaSKLmmPTLYE7Sa/0aQufzNhBIQiHWoqJHMTwMKuDm9cQ
i6fNUt8XwcVvL8jdXDjNnrq+LpCxd1upmtWQcuTWbiI7mmPTLYE7aaEhmrbw
yYwdFIJwqKWYyEEMD7N7uvUUYuEk9X2ld7w8ZfuT0/S00SEVyNi7rVTNakg5
0k0T2dEcm24J3EkLDVEbn8zYQSEIh1qKiRzE8DCHkiEWTtKlZ+KHMr5/2jHC
07apaaNDKpCxd1upmtWQcqSbJrKjOTbdEriTFg5bntksM3ZQCMKhlmIit8nE
HEqGWCxd+uCZ+JFn11EaNbUUnrZNTRsdUoGMvdtK1ayGlCPdpDiaY9Mtgcks
HLY89/eZsYNCEA61FOM4mZjDdU8snKSPnomfnp5W54sCateoqaXwtG1q2uiQ
CmTs3VaqZjWk3LjD5kHP+RKYzMJhyzOfZ8YOguFQ33HQHuZQMsTCSfrkmfj5
GRlFzuGkVgqoXaOmluJDt01NGx1SgYw9oWpW28lthtgcK58EJuOw4+HJPCVQ
39nTHuZQMsTCSfrsGfP7N9nmKye1UkDtGgKXwtO2qWmjQypMjSTZyW2GGFo+
yTkqI/OUQH1nT3uYQ8kQCyep96s5bYaLIa999ZWTWimgdo2aWgpP26amjf5Z
C4cNUP4uG8k5KiPzlEB9Z097mEPJEAsmqe+mae8ZaRLevfZVSWqlgNo1amop
PG2bmjY6msKBSP4uG8k5KiPzlEB9Z097mEPHEAsnvm8rdnCJhGovTcK7mtRK
AbVr1NRSeNo2NW10NIUDkfxdNpJzVEbmKYH6jp72MIeSIevOgtyoAeGoDhKq
vVRUd/VHrRRQu0ZNLYWnbVPTRkdTOBDJ32UjOUdlZJ4SqO/saQ9zUEA6e37m
aEjdWN85qoOEai/Zu6tJrRRQu0ZN1Z62TU0bHU3hQCR/l42zVEbmKYF2Ux3M
gQHp6vka5HsTqo51Y33nqA4Sqr1UVBKplQJqh460bVPTRkdTOBDJz3r1eyXz
lEC76Q7m4KCrd+bU1/3Eai1UHevGKlEdJFR7+G5upXy6HTrStk1NGx1N4bC6
ue+Ffr5knhJoN+XBunp2xj4qjZLWw4nVWqg6qnv0g/The7iZVgqjHTrStk1N
Gx1N4bC6+Vmvfq9knhJoN6vLfI8HzpbaQWnrvqT1cGK1FqKOqsGDJGn/CGal
MNqhI23b1LTR0RQOq5uf9er3SuYpgXazvOzS72ZV798fS1v3Ja2HE6u1EHVU
6+kgSdrDzbRSGO3QkaZt/wA0hcPq5me9+r2SeUqg3awvu/BP4VQlxW09lrbu
y188nFithaijWk8HSdIebiaV0Q4daTZoCofVzc969XvFVwLtZoGZ0wnn2XPS
wHH9zm09lrZOtF5ZrYWoo1pPB0nS3mZn9L5KKBxWt5tF+imh3awwMx1BdZrT
Zv6Z4yptNfdRayHqqNbTQbLTWRHUKbp55D9aaDdLzC754zovLy8c1zNyh7cW
oo5qIf3kR77o5pH/aKHdrDG74Ptm//j27YVDwu7walGXfeS7eeA/XDpa5Av+
T2y+/Xh6eunTp6M8Pf3o06ez/As7kWBC
         "], {{0, 0}, {608, 50}}, {0, 50}],
        Frame->Automatic,
        FrameLabel->{None, None},
        FrameTicks->{{None, None}, {None, None}},
        GridLinesStyle->Directive[
          GrayLevel[0.5, 0.4]],
        ImageSize->{542.09375, Automatic},
        Method->{
         "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
          Automatic}]], "ExerciseOutput"],
      Apply[TextCell, 
       Cell[
        BoxData[
         GraphicsBox[
          RasterBox[CompressedData["
1:eJzt3e1y4jYUBuBsmnZZWBoCAdvkw8aAwAZL2V5Kr6DTG+j9/6tMYlmyzrE+
gpek9TvTmW43m2TR4/fIgtDV3//8+ff11dXVH/yfv/i/xH36vCNXhgR9+tgE
8RN/aU/ap08ZYxEhgOLr1pA+/4OY8PCkhiL6EiCC4l/awvp81ligqUJMeMpJ
1l5E19cBQii+acmwz+dKjYZZoKlCTHh40tYi4gkQQ/GveMZ9Pn7kKhrWaJgF
GrEPMuHhSduKqEyAIIp/QxP1+UiBx9tYrqJhjYZZoKlCTHh40pYiOiVAFMVf
sdA+PyWWG6UIHm9juYqGNRpmgaYKMeHhSfEiek2AMIoHSMI+5w4Ih1pulCJ4
vI3lKhrWaJgFmirEhIcnRYvoLQHiKP4GJ+vjGGMHhSAcarlRiuDxNparaFij
YRZoqhATHp4UK6IqAQIphm9HHAq2z03JJzN2UAjCoZYbpQj+0mO5ioY1GmaB
pgox4eFJET8iAXJjG4+gWHzFPoPBWzXdlHwyYweFIBxqiTiCx9tYrqJhjYY5
/DWICQ9PajohCUBIo1H8Hci0Dxx15g3equmm5JMZOygE4VDLjVIEj7exXEXD
Gg2zQFOFWJywpYgfkQCCxBMDRyuLPqdou6ipOvMGb9V0U/LJjB0UgnCo5UYp
gsfbWK6iYY2GWaCpQkx4eFLEj0iAnNPFv2tJ/neBN+ULbRc1VWfe4K2aTnwy
YweFIBxquVGK4PE2lqtIQsMs0FQhJjw8qenAN9AhnRLfNmN52/zfyVUC//eF
touaqjNvIPPJjB0UgnCo5UYpgsfbGEHDLNBUIRZPGKSIH5FAg/SaeNKIg/xP
nrei+vIlgTflC20XNVUraSDzyYwdFIJwqOVGKYL/EmMEDbNAU4WY8PCkiB+R
oAnpLfGdmvl/OOoEHAlJCbwpX2hDbqpW0kDmkxk7KAThUMvLIYIhYWiYBZoq
xISHJ0X8iAR3cGL1Nsl4K/Rpc3U1VwtqJH4rgfdMC23ITdVKUvhkxg4KQTjU
co5FDmJ4mAWaKsSEhydF/IgEyI13PJNj8ZU+V0Rf/XJ9PVfFjYSkBN4zLbQh
N23hkxk7KAThUEsxkYMYHubwIBETHp7UdIITzODE91LyTxvk2ZmJ6Csuaq4W
1EhISuA900JDNG3hkxk7KAThUEsxkduVxSzQVCEWJ4Ap4kckuIcTS3sU0+f4
aKkh5cjh+UQWNVcLaiQkJXAnLTRE0xY+mbGDQhAOtRQTOYjhYRZoqhCLxzpF
/IgEyMY3rs8V3Tr4cqlUzWpIOXL0NJFFzdWCGglJCdxJCw3RtIVPZvy+QxAO
tRQTOYjhYQ4XKjHh4UlNd1ABclodix87Kj5akLF3W6ma1ZBy5OhpIouaqwVV
S0rgTlpoiKYtfDJjB4UgHGopJnJrd2aBpgqxuANPTU97YD/NFlcvVkKGzMVy
VSC/cVupmtWQcuToaSKLmmPTLYE7Sa/0aQufzNhBIQiHWoqJHMTwMKuDm9cQ
i6fNUt8XwcVvL8jdXDjNnrq+LpCxd1upmtWQcuTWbiI7mmPTLYE7aaEhmrbw
yYwdFIJwqKWYyEEMD7N7uvUUYuEk9X2ld7w8ZfuT0/S00SEVyNi7rVTNakg5
0k0T2dEcm24J3EkLDVEbn8zYQSEIh1qKiRzE8DCHkiEWTtKlZ+KHMr5/2jHC
07apaaNDKpCxd1upmtWQcqSbJrKjOTbdEriTFg5bntksM3ZQCMKhlmIit8nE
HEqGWCxd+uCZ+JFn11EaNbUUnrZNTRsdUoGMvdtK1ayGlCPdpDiaY9Mtgcks
HLY89/eZsYNCEA61FOM4mZjDdU8snKSPnomfnp5W54sCateoqaXwtG1q2uiQ
CmTs3VaqZjWk3LjD5kHP+RKYzMJhyzOfZ8YOguFQ33HQHuZQMsTCSfrkmfj5
GRlFzuGkVgqoXaOmluJDt01NGx1SgYw9oWpW28lthtgcK58EJuOw4+HJPCVQ
39nTHuZQMsTCSfrsGfP7N9nmKye1UkDtGgKXwtO2qWmjQypMjSTZyW2GGFo+
yTkqI/OUQH1nT3uYQ8kQCyep96s5bYaLIa999ZWTWimgdo2aWgpP26amjf5Z
C4cNUP4uG8k5KiPzlEB9Z097mEPJEAsmqe+mae8ZaRLevfZVSWqlgNo1amop
PG2bmjY6msKBSP4uG8k5KiPzlEB9Z097mEPHEAsnvm8rdnCJhGovTcK7mtRK
AbVr1NRSeNo2NW10NIUDkfxdNpJzVEbmKYH6jp72MIeSIevOgtyoAeGoDhKq
vVRUd/VHrRRQu0ZNLYWnbVPTRkdTOBDJ32UjOUdlZJ4SqO/saQ9zUEA6e37m
aEjdWN85qoOEai/Zu6tJrRRQu0ZN1Z62TU0bHU3hQCR/l42zVEbmKYF2Ux3M
gQHp6vka5HsTqo51Y33nqA4Sqr1UVBKplQJqh460bVPTRkdTOBDJz3r1eyXz
lEC76Q7m4KCrd+bU1/3Eai1UHevGKlEdJFR7+G5upXy6HTrStk1NGx1N4bC6
ue+Ffr5knhJoN+XBunp2xj4qjZLWw4nVWqg6qnv0g/The7iZVgqjHTrStk1N
Gx1N4bC6+Vmvfq9knhJoN6vLfI8HzpbaQWnrvqT1cGK1FqKOqsGDJGn/CGal
MNqhI23b1LTR0RQOq5uf9er3SuYpgXazvOzS72ZV798fS1v3Ja2HE6u1EHVU
6+kgSdrDzbRSGO3QkaZt/wA0hcPq5me9+r2SeUqg3awvu/BP4VQlxW09lrbu
y188nFithaijWk8HSdIebiaV0Q4daTZoCofVzc969XvFVwLtZoGZ0wnn2XPS
wHH9zm09lrZOtF5ZrYWoo1pPB0nS3mZn9L5KKBxWt5tF+imh3awwMx1BdZrT
Zv6Z4yptNfdRayHqqNbTQbLTWRHUKbp55D9aaDdLzC754zovLy8c1zNyh7cW
oo5qIf3kR77o5pH/aKHdrDG74Ptm//j27YVDwu7walGXfeS7eeA/XDpa5Av+
T2y+/Xh6eunTp6M8Pf3o06ez/As7kWBC
           "], {{0, 0}, {608, 50}}, {0, 50}],
           Frame -> Automatic, FrameLabel -> {None, None}, 
          FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
          Directive[
            GrayLevel[0.5, 0.4]], ImageSize -> {542.09375, Automatic}, 
          Method -> {
           "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
            Automatic}]], "ExerciseOutput", Selectable -> False, Copyable -> 
        False, Editable -> False, ShowCellBracket -> False]]], " "}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Center}}},
   GridBoxBackground->{"Columns" -> {{
        RGBColor[1, 1, 1]}}},
   GridBoxSpacings->{"Columns" -> {{Automatic}}, "Rows" -> {{1}}}],
  FrameMargins->0]], "ExerciseOutput",
 Editable->False,
 Selectable->False,
 Deletable->False,
 CellFrame->{{1, 1}, {1, 1}},
 ShowCellBracket->False,
 CellFrameColor->RGBColor[0.85, 0.85, 0.85],
 LineBreakWithin->Automatic]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Empezando con 1.0, aplicar repetidamente la funci\[OAcute]n del \
\[OpenCurlyDoubleQuote]",
 StyleBox["m\[EAcute]todo de Newton ",
  FontSlant->"Italic"],
 "\[CloseCurlyDoubleQuote],  ",
 Cell[BoxData[
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      ButtonBox["#",
       BaseStyle->"Link",
       ButtonData->"Slot"], 
      ButtonBox["+",
       BaseStyle->"Link",
       ButtonData->"Plus"], 
      RowBox[{"2", "/", 
       ButtonBox["#",
        BaseStyle->"Link",
        ButtonData->"Slot"]}]}], " ", ")"}], "/", "2"}], 
   ButtonBox["&",
    BaseStyle->"Link",
    ButtonData->"Function"]}]], "InlineCode"],
 " hasta que el resultado ya no cambie.",
 StyleBox[ButtonBox["\[NonBreakingSpace]\[RightGuillemet]",
  Appearance->None,
  Evaluator->Automatic,
  Method->"Preemptive",
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
   FrontEndExecute[
     FrontEndToken[
      ButtonNotebook[], "OpenCloseGroup"]])],
  FontColor->RGBColor[1, 0.501961, 0]]
}], "Exercise",
 Editable->False,
 Selectable->False,
 Deletable->False,
 CellDingbat->Cell[
  "41.7", "ExerciseNumber", FontColor -> 
   RGBColor[0.9019607843137255, 0.4117647058823529, 0.027450980392156862`]],
 ShowCellBracket->False,
 CellTags->"i:11"],

Cell[BoxData[
 PaneBox[GridBox[{
    {" ", 
     StyleBox[
      RowBox[{"Expected", " ", 
       RowBox[{"output", ":"}]}],
      Editable->False,
      Selectable->False,
      StripOnInput->False,
      FontColor->RGBColor[0.45, 0.45, 0.45]], " "},
    {" ", 
     InterpretationBox[Cell[BoxData[
       RowBox[{"{", 
        RowBox[{
        "1.`", ",", "1.5`", ",", "1.4166666666666665`", ",", 
         "1.4142156862745097`", ",", "1.4142135623746899`", ",", 
         "1.414213562373095`", ",", "1.414213562373095`"}], "}"}]], 
       "ExerciseOutput"],
      Apply[TextCell, 
       Cell[
        BoxData[
         RowBox[{"{", 
           
           RowBox[{"1.`", ",", "1.5`", ",", "1.4166666666666665`", ",", 
             "1.4142156862745097`", ",", "1.4142135623746899`", ",", 
             "1.414213562373095`", ",", "1.414213562373095`"}], "}"}]], 
        "ExerciseOutput", Selectable -> False, Copyable -> False, Editable -> 
        False, ShowCellBracket -> False]]], " "}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Center}}},
   GridBoxBackground->{"Columns" -> {{
        RGBColor[1, 1, 1]}}},
   GridBoxSpacings->{"Columns" -> {{Automatic}}, "Rows" -> {{1}}}],
  FrameMargins->0]], "ExerciseOutput",
 Editable->False,
 Selectable->False,
 Deletable->False,
 CellFrame->{{1, 1}, {1, 1}},
 ShowCellBracket->False,
 CellFrameColor->RGBColor[0.85, 0.85, 0.85],
 LineBreakWithin->Automatic]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Implemente el ",
 StyleBox["algoritmo de Euclides",
  FontSlant->"Italic"],
 " para el m\[AAcute]ximo com\[UAcute]n divisor, donde ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"a", ",", "b"}], "}"}]], "InlineCode"],
 " se sustituya repetidamente por ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"b", ",", 
    RowBox[{
     ButtonBox["Mod",
      BaseStyle->"CodeLink"], "[", 
     RowBox[{"a", ",", "b"}], "]"}]}], "}"}]], "InlineCode"],
 " hasta que ",
 Cell[BoxData["b"], "InlineCode"],
 " sea 0, y aplicar el algoritmo a ",
 Cell[BoxData[
  RowBox[{"12345", ",", " ", "54321"}]], "InlineCode"],
 ".",
 StyleBox[ButtonBox["\[NonBreakingSpace]\[RightGuillemet]",
  Appearance->None,
  Evaluator->Automatic,
  Method->"Preemptive",
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
   FrontEndExecute[
     FrontEndToken[
      ButtonNotebook[], "OpenCloseGroup"]])],
  FontColor->RGBColor[1, 0.501961, 0]]
}], "Exercise",
 Editable->False,
 Selectable->False,
 Deletable->False,
 CellDingbat->Cell[
  "41.8", "ExerciseNumber", FontColor -> 
   RGBColor[0.9019607843137255, 0.4117647058823529, 0.027450980392156862`]],
 ShowCellBracket->False,
 CellTags->"i:12"],

Cell[BoxData[
 PaneBox[GridBox[{
    {" ", 
     StyleBox[
      RowBox[{"Expected", " ", 
       RowBox[{"output", ":"}]}],
      Editable->False,
      Selectable->False,
      StripOnInput->False,
      FontColor->RGBColor[0.45, 0.45, 0.45]], " "},
    {" ", 
     InterpretationBox[Cell[BoxData[
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"12345", ",", "54321"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"54321", ",", "12345"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"12345", ",", "4941"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"4941", ",", "2463"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2463", ",", "15"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"15", ",", "3"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", "0"}], "}"}]}], "}"}]], "ExerciseOutput"],
      Apply[TextCell, 
       Cell[
        BoxData[
         RowBox[{"{", 
           RowBox[{
             RowBox[{"{", 
               RowBox[{"12345", ",", "54321"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"54321", ",", "12345"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"12345", ",", "4941"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"4941", ",", "2463"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"2463", ",", "15"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"15", ",", "3"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"3", ",", "0"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"3", ",", "0"}], "}"}]}], "}"}]], "ExerciseOutput", 
        Selectable -> False, Copyable -> False, Editable -> False, 
        ShowCellBracket -> False]]], " "}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Center}}},
   GridBoxBackground->{"Columns" -> {{
        RGBColor[1, 1, 1]}}},
   GridBoxSpacings->{"Columns" -> {{Automatic}}, "Rows" -> {{1}}}],
  FrameMargins->0]], "ExerciseOutput",
 Editable->False,
 Selectable->False,
 Deletable->False,
 CellFrame->{{1, 1}, {1, 1}},
 ShowCellBracket->False,
 CellFrameColor->RGBColor[0.85, 0.85, 0.85],
 LineBreakWithin->Automatic]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Defina ",
 StyleBox["combinadores",
  FontSlant->"Italic"],
 " usando las reglas ",
 Cell[BoxData[
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"s", "[", 
       RowBox[{"x", 
        ButtonBox["_",
         BaseStyle->"Link",
         ButtonData->"Blank"]}], "]"}], "[", 
      RowBox[{"y", 
       ButtonBox["_",
        BaseStyle->"Link",
        ButtonData->"Blank"]}], "]"}], "[", 
     RowBox[{"z", 
      ButtonBox["_",
       BaseStyle->"Link",
       ButtonData->"Blank"]}], "]"}], 
    ButtonBox["\[Rule]",
     BaseStyle->"Link",
     ButtonData->"Rule"], 
    RowBox[{
     RowBox[{"x", "[", "z", "]"}], "[", 
     RowBox[{"y", "[", "z", "]"}], "]"}]}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"k", "[", 
      RowBox[{"x", 
       ButtonBox["_",
        BaseStyle->"Link",
        ButtonData->"Blank"]}], "]"}], "[", 
     RowBox[{"y", 
      ButtonBox["_",
       BaseStyle->"Link",
       ButtonData->"Blank"]}], "]"}], 
    ButtonBox["\[Rule]",
     BaseStyle->"Link",
     ButtonData->"Rule"], "x"}]}]], "InlineCode"],
 ", y luego generar una lista empezando con ",
 Cell[BoxData[
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"s", "[", "s", "]"}], "[", "k", "]"}], "[", 
    RowBox[{
     RowBox[{"s", "[", 
      RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], "[", "s", 
   "]"}]], "InlineCode"],
 " y aplicando dichas reglas hasta que no haya cambios.",
 StyleBox[ButtonBox["\[NonBreakingSpace]\[RightGuillemet]",
  Appearance->None,
  Evaluator->Automatic,
  Method->"Preemptive",
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
   FrontEndExecute[
     FrontEndToken[
      ButtonNotebook[], "OpenCloseGroup"]])],
  FontColor->RGBColor[1, 0.501961, 0]]
}], "Exercise",
 Editable->False,
 Selectable->False,
 Deletable->False,
 CellDingbat->Cell[
  "41.9", "ExerciseNumber", FontColor -> 
   RGBColor[0.9019607843137255, 0.4117647058823529, 0.027450980392156862`]],
 ShowCellBracket->False,
 CellTags->"i:13"],

Cell[BoxData[
 PaneBox[GridBox[{
    {" ", 
     StyleBox[
      RowBox[{"Expected", " ", 
       RowBox[{"output", ":"}]}],
      Editable->False,
      Selectable->False,
      StripOnInput->False,
      FontColor->RGBColor[0.45, 0.45, 0.45]], " "},
    {" ", 
     InterpretationBox[Cell[BoxData[
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"s", "[", "s", "]"}], "[", "k", "]"}], "[", 
           RowBox[{
            RowBox[{"s", "[", 
             RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], "[",
           "s", "]"}], ",", 
         RowBox[{
          RowBox[{
           RowBox[{"s", "[", 
            RowBox[{
             RowBox[{"s", "[", 
              RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], 
           "[", 
           RowBox[{"k", "[", 
            RowBox[{
             RowBox[{"s", "[", 
              RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], 
           "]"}], "[", "s", "]"}], ",", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"s", "[", 
             RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "[", "s", 
           "]"}], "[", 
          RowBox[{
           RowBox[{"k", "[", 
            RowBox[{
             RowBox[{"s", "[", 
              RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], 
           "[", "s", "]"}], "]"}], ",", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"s", "[", "s", "]"}], "[", "s", "]"}], "[", 
           RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
          RowBox[{
           RowBox[{"s", "[", 
            RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], ",", 
         
         RowBox[{
          RowBox[{
           RowBox[{"s", "[", 
            RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
           RowBox[{"s", "[", 
            RowBox[{"s", "[", "s", "]"}], "]"}], "]"}], "[", 
          RowBox[{
           RowBox[{"s", "[", 
            RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], ",", 
         
         RowBox[{
          RowBox[{
           RowBox[{"s", "[", "s", "]"}], "[", 
           RowBox[{
            RowBox[{"s", "[", 
             RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], "[", 
          RowBox[{
           RowBox[{"s", "[", 
            RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
           RowBox[{
            RowBox[{"s", "[", 
             RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], 
          "]"}], ",", 
         RowBox[{
          RowBox[{"s", "[", 
           RowBox[{
            RowBox[{"s", "[", 
             RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
            RowBox[{
             RowBox[{"s", "[", 
              RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], 
           "]"}], "[", 
          RowBox[{
           RowBox[{
            RowBox[{"s", "[", 
             RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "[", 
           RowBox[{
            RowBox[{"s", "[", 
             RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
            RowBox[{
             RowBox[{"s", "[", 
              RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], 
           "]"}], "]"}], ",", 
         RowBox[{
          RowBox[{"s", "[", 
           RowBox[{
            RowBox[{"s", "[", 
             RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
            RowBox[{
             RowBox[{"s", "[", 
              RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], 
           "]"}], "[", 
          RowBox[{
           RowBox[{
            RowBox[{"s", "[", "s", "]"}], "[", 
            RowBox[{
             RowBox[{"s", "[", 
              RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
             RowBox[{
              RowBox[{"s", "[", 
               RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], 
            "]"}], "[", 
           RowBox[{"s", "[", 
            RowBox[{
             RowBox[{"s", "[", 
              RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
             RowBox[{
              RowBox[{"s", "[", 
               RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], 
            "]"}], "]"}], "]"}], ",", 
         RowBox[{
          RowBox[{"s", "[", 
           RowBox[{
            RowBox[{"s", "[", 
             RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
            RowBox[{
             RowBox[{"s", "[", 
              RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], 
           "]"}], "[", 
          RowBox[{
           RowBox[{"s", "[", 
            RowBox[{"s", "[", 
             RowBox[{
              RowBox[{"s", "[", 
               RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
              RowBox[{
               RowBox[{"s", "[", 
                RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], 
             "]"}], "]"}], "[", 
           RowBox[{
            RowBox[{
             RowBox[{"s", "[", 
              RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
             RowBox[{
              RowBox[{"s", "[", 
               RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], 
            "[", 
            RowBox[{"s", "[", 
             RowBox[{
              RowBox[{"s", "[", 
               RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
              RowBox[{
               RowBox[{"s", "[", 
                RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], 
             "]"}], "]"}], "]"}], "]"}], ",", 
         RowBox[{
          RowBox[{"s", "[", 
           RowBox[{
            RowBox[{"s", "[", 
             RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
            RowBox[{
             RowBox[{"s", "[", 
              RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], 
           "]"}], "[", 
          RowBox[{
           RowBox[{"s", "[", 
            RowBox[{"s", "[", 
             RowBox[{
              RowBox[{"s", "[", 
               RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
              RowBox[{
               RowBox[{"s", "[", 
                RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], 
             "]"}], "]"}], "[", 
           RowBox[{
            RowBox[{
             RowBox[{"s", "[", "s", "]"}], "[", 
             RowBox[{"s", "[", 
              RowBox[{
               RowBox[{"s", "[", 
                RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
               RowBox[{
                RowBox[{"s", "[", 
                 RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], 
              "]"}], "]"}], "[", 
            RowBox[{
             RowBox[{
              RowBox[{"s", "[", 
               RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "[", 
             RowBox[{"s", "[", 
              RowBox[{
               RowBox[{"s", "[", 
                RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
               RowBox[{
                RowBox[{"s", "[", 
                 RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], 
              "]"}], "]"}], "]"}], "]"}], "]"}], ",", 
         RowBox[{
          RowBox[{"s", "[", 
           RowBox[{
            RowBox[{"s", "[", 
             RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
            RowBox[{
             RowBox[{"s", "[", 
              RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], 
           "]"}], "[", 
          RowBox[{
           RowBox[{"s", "[", 
            RowBox[{"s", "[", 
             RowBox[{
              RowBox[{"s", "[", 
               RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
              RowBox[{
               RowBox[{"s", "[", 
                RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], 
             "]"}], "]"}], "[", 
           RowBox[{
            RowBox[{"s", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"s", "[", 
                RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "[", 
              RowBox[{"s", "[", 
               RowBox[{
                RowBox[{"s", "[", 
                 RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                RowBox[{
                 RowBox[{"s", "[", 
                  RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}],
                "]"}], "]"}], "]"}], "[", 
            RowBox[{
             RowBox[{"s", "[", 
              RowBox[{
               RowBox[{"s", "[", 
                RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
               RowBox[{
                RowBox[{"s", "[", 
                 RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], 
              "]"}], "[", 
             RowBox[{
              RowBox[{
               RowBox[{"s", "[", 
                RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "[", 
              RowBox[{"s", "[", 
               RowBox[{
                RowBox[{"s", "[", 
                 RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                RowBox[{
                 RowBox[{"s", "[", 
                  RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}],
                "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], ",", 
         RowBox[{
          RowBox[{"s", "[", 
           RowBox[{
            RowBox[{"s", "[", 
             RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
            RowBox[{
             RowBox[{"s", "[", 
              RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], 
           "]"}], "[", 
          RowBox[{
           RowBox[{"s", "[", 
            RowBox[{"s", "[", 
             RowBox[{
              RowBox[{"s", "[", 
               RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
              RowBox[{
               RowBox[{"s", "[", 
                RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], 
             "]"}], "]"}], "[", 
           RowBox[{
            RowBox[{"s", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"s", "[", "s", "]"}], "[", 
               RowBox[{"s", "[", 
                RowBox[{
                 RowBox[{"s", "[", 
                  RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                 RowBox[{
                  RowBox[{"s", "[", 
                   RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                 "]"}], "]"}], "]"}], "[", 
              RowBox[{"s", "[", 
               RowBox[{"s", "[", 
                RowBox[{
                 RowBox[{"s", "[", 
                  RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                 RowBox[{
                  RowBox[{"s", "[", 
                   RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                 "]"}], "]"}], "]"}], "]"}], "]"}], "[", 
            RowBox[{
             RowBox[{"s", "[", 
              RowBox[{
               RowBox[{"s", "[", 
                RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
               RowBox[{
                RowBox[{"s", "[", 
                 RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], 
              "]"}], "[", 
             RowBox[{
              RowBox[{
               RowBox[{"s", "[", "s", "]"}], "[", 
               RowBox[{"s", "[", 
                RowBox[{
                 RowBox[{"s", "[", 
                  RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                 RowBox[{
                  RowBox[{"s", "[", 
                   RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                 "]"}], "]"}], "]"}], "[", 
              RowBox[{"s", "[", 
               RowBox[{"s", "[", 
                RowBox[{
                 RowBox[{"s", "[", 
                  RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                 RowBox[{
                  RowBox[{"s", "[", 
                   RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                 "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], ",", 
         
         RowBox[{
          RowBox[{"s", "[", 
           RowBox[{
            RowBox[{"s", "[", 
             RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
            RowBox[{
             RowBox[{"s", "[", 
              RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], 
           "]"}], "[", 
          RowBox[{
           RowBox[{"s", "[", 
            RowBox[{"s", "[", 
             RowBox[{
              RowBox[{"s", "[", 
               RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
              RowBox[{
               RowBox[{"s", "[", 
                RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], 
             "]"}], "]"}], "[", 
           RowBox[{
            RowBox[{"s", "[", 
             RowBox[{
              RowBox[{"s", "[", 
               RowBox[{"s", "[", 
                RowBox[{"s", "[", 
                 RowBox[{
                  RowBox[{"s", "[", 
                   RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                  RowBox[{
                   RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                  "]"}], "]"}], "]"}], "]"}], "[", 
              RowBox[{
               RowBox[{"s", "[", 
                RowBox[{
                 RowBox[{"s", "[", 
                  RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                 RowBox[{
                  RowBox[{"s", "[", 
                   RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                 "]"}], "]"}], "[", 
               RowBox[{"s", "[", 
                RowBox[{"s", "[", 
                 RowBox[{
                  RowBox[{"s", "[", 
                   RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                  RowBox[{
                   RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                  "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], "[", 
            RowBox[{
             RowBox[{"s", "[", 
              RowBox[{
               RowBox[{"s", "[", 
                RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
               RowBox[{
                RowBox[{"s", "[", 
                 RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], 
              "]"}], "[", 
             RowBox[{
              RowBox[{"s", "[", 
               RowBox[{"s", "[", 
                RowBox[{"s", "[", 
                 RowBox[{
                  RowBox[{"s", "[", 
                   RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                  RowBox[{
                   RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                  "]"}], "]"}], "]"}], "]"}], "[", 
              RowBox[{
               RowBox[{"s", "[", 
                RowBox[{
                 RowBox[{"s", "[", 
                  RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                 RowBox[{
                  RowBox[{"s", "[", 
                   RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                 "]"}], "]"}], "[", 
               RowBox[{"s", "[", 
                RowBox[{"s", "[", 
                 RowBox[{
                  RowBox[{"s", "[", 
                   RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                  RowBox[{
                   RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                  "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], 
          "]"}], ",", 
         RowBox[{
          RowBox[{"s", "[", 
           RowBox[{
            RowBox[{"s", "[", 
             RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
            RowBox[{
             RowBox[{"s", "[", 
              RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], 
           "]"}], "[", 
          RowBox[{
           RowBox[{"s", "[", 
            RowBox[{"s", "[", 
             RowBox[{
              RowBox[{"s", "[", 
               RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
              RowBox[{
               RowBox[{"s", "[", 
                RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], 
             "]"}], "]"}], "[", 
           RowBox[{
            RowBox[{"s", "[", 
             RowBox[{
              RowBox[{"s", "[", 
               RowBox[{"s", "[", 
                RowBox[{"s", "[", 
                 RowBox[{
                  RowBox[{"s", "[", 
                   RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                  RowBox[{
                   RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                  "]"}], "]"}], "]"}], "]"}], "[", 
              RowBox[{
               RowBox[{"s", "[", 
                RowBox[{
                 RowBox[{"s", "[", 
                  RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                 RowBox[{
                  RowBox[{"s", "[", 
                   RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                 "]"}], "]"}], "[", 
               RowBox[{"s", "[", 
                RowBox[{"s", "[", 
                 RowBox[{
                  RowBox[{"s", "[", 
                   RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                  RowBox[{
                   RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                  "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], "[", 
            RowBox[{
             RowBox[{"s", "[", 
              RowBox[{
               RowBox[{"s", "[", 
                RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
               RowBox[{
                RowBox[{"s", "[", 
                 RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "]"}], 
              "]"}], "[", 
             RowBox[{
              RowBox[{"s", "[", 
               RowBox[{"s", "[", 
                RowBox[{"s", "[", 
                 RowBox[{
                  RowBox[{"s", "[", 
                   RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                  RowBox[{
                   RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                  "]"}], "]"}], "]"}], "]"}], "[", 
              RowBox[{
               RowBox[{"s", "[", 
                RowBox[{
                 RowBox[{"s", "[", 
                  RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                 RowBox[{
                  RowBox[{"s", "[", 
                   RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                 "]"}], "]"}], "[", 
               RowBox[{"s", "[", 
                RowBox[{"s", "[", 
                 RowBox[{
                  RowBox[{"s", "[", 
                   RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                  RowBox[{
                   RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                  "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], 
          "]"}]}], "}"}]], "ExerciseOutput"],
      Apply[TextCell, 
       Cell[
        BoxData[
         RowBox[{"{", 
           RowBox[{
             RowBox[{
               RowBox[{
                 RowBox[{
                   RowBox[{"s", "[", "s", "]"}], "[", "k", "]"}], "[", 
                 RowBox[{
                   RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                 "]"}], "[", "s", "]"}], ",", 
             RowBox[{
               RowBox[{
                 RowBox[{"s", "[", 
                   RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                   "]"}], "[", 
                 RowBox[{"k", "[", 
                   RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                   "]"}], "]"}], "[", "s", "]"}], ",", 
             RowBox[{
               RowBox[{
                 RowBox[{
                   RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "[",
                  "s", "]"}], "[", 
               RowBox[{
                 RowBox[{"k", "[", 
                   RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                   "]"}], "[", "s", "]"}], "]"}], ",", 
             RowBox[{
               RowBox[{
                 RowBox[{
                   RowBox[{"s", "[", "s", "]"}], "[", "s", "]"}], "[", 
                 RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
               RowBox[{
                 RowBox[{"s", "[", 
                   RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
               "]"}], ",", 
             RowBox[{
               RowBox[{
                 RowBox[{"s", "[", 
                   RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                 RowBox[{"s", "[", 
                   RowBox[{"s", "[", "s", "]"}], "]"}], "]"}], "[", 
               RowBox[{
                 RowBox[{"s", "[", 
                   RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
               "]"}], ",", 
             RowBox[{
               RowBox[{
                 RowBox[{"s", "[", "s", "]"}], "[", 
                 RowBox[{
                   RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                 "]"}], "[", 
               RowBox[{
                 RowBox[{"s", "[", 
                   RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                 RowBox[{
                   RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                 "]"}], "]"}], ",", 
             RowBox[{
               RowBox[{"s", "[", 
                 RowBox[{
                   RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                   RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                   "]"}], "]"}], "[", 
               RowBox[{
                 RowBox[{
                   RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "[", 
                 RowBox[{
                   RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                   RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                   "]"}], "]"}], "]"}], ",", 
             RowBox[{
               RowBox[{"s", "[", 
                 RowBox[{
                   RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                   RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                   "]"}], "]"}], "[", 
               RowBox[{
                 RowBox[{
                   RowBox[{"s", "[", "s", "]"}], "[", 
                   RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "[", 
                 RowBox[{"s", "[", 
                   RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "]"}], "]"}], ",", 
             RowBox[{
               RowBox[{"s", "[", 
                 RowBox[{
                   RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                   RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                   "]"}], "]"}], "[", 
               RowBox[{
                 RowBox[{"s", "[", 
                   RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "]"}], "[", 
                 RowBox[{
                   RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "[", 
                   RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "]"}], "]"}], "]"}], ",", 
             RowBox[{
               RowBox[{"s", "[", 
                 RowBox[{
                   RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                   RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                   "]"}], "]"}], "[", 
               RowBox[{
                 RowBox[{"s", "[", 
                   RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "]"}], "[", 
                 RowBox[{
                   RowBox[{
                    RowBox[{"s", "[", "s", "]"}], "[", 
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "]"}], "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "[", 
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], ",", 
             RowBox[{
               RowBox[{"s", "[", 
                 RowBox[{
                   RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                   RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                   "]"}], "]"}], "[", 
               RowBox[{
                 RowBox[{"s", "[", 
                   RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "]"}], "[", 
                 RowBox[{
                   RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "[", 
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "]"}], "]"}], "[", 
                   RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "[", 
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], ",", 
             RowBox[{
               RowBox[{"s", "[", 
                 RowBox[{
                   RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                   RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                   "]"}], "]"}], "[", 
               RowBox[{
                 RowBox[{"s", "[", 
                   RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "]"}], "[", 
                 RowBox[{
                   RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"s", "[", "s", "]"}], "[", 
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "]"}], "[", 
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "]"}], "]"}], "]"}], "[", 
                   RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"s", "[", "s", "]"}], "[", 
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "]"}], "[", 
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], 
             ",", 
             RowBox[{
               RowBox[{"s", "[", 
                 RowBox[{
                   RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                   RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                   "]"}], "]"}], "[", 
               RowBox[{
                 RowBox[{"s", "[", 
                   RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "]"}], "[", 
                 RowBox[{
                   RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "[", 
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], "[", 
                   RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "[", 
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], 
               "]"}], ",", 
             RowBox[{
               RowBox[{"s", "[", 
                 RowBox[{
                   RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                   RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                   "]"}], "]"}], "[", 
               RowBox[{
                 RowBox[{"s", "[", 
                   RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "]"}], "[", 
                 RowBox[{
                   RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "[", 
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], "[", 
                   RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "[", 
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], 
               "]"}]}], "}"}]], "ExerciseOutput", Selectable -> False, 
        Copyable -> False, Editable -> False, ShowCellBracket -> False]]], " "}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Center}}},
   GridBoxBackground->{"Columns" -> {{
        RGBColor[1, 1, 1]}}},
   GridBoxSpacings->{"Columns" -> {{Automatic}}, "Rows" -> {{1}}}],
  FrameMargins->0]], "ExerciseOutput",
 Editable->False,
 Selectable->False,
 Deletable->False,
 CellFrame->{{1, 1}, {1, 1}},
 ShowCellBracket->False,
 CellFrameColor->RGBColor[0.85, 0.85, 0.85],
 LineBreakWithin->Automatic]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Elimine todos los ceros al final de la lista de d\[IAcute]gitos de ",
 Cell[BoxData[
  RowBox[{"100", 
   ButtonBox["!",
    BaseStyle->"Link",
    ButtonData->"Factorial"]}]], "InlineCode"],
 ".",
 StyleBox[ButtonBox["\[NonBreakingSpace]\[RightGuillemet]",
  Appearance->None,
  Evaluator->Automatic,
  Method->"Preemptive",
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
   FrontEndExecute[
     FrontEndToken[
      ButtonNotebook[], "OpenCloseGroup"]])],
  FontColor->RGBColor[1, 0.501961, 0]]
}], "Exercise",
 Editable->False,
 Selectable->False,
 Deletable->False,
 CellDingbat->Cell[
  "41.10", "ExerciseNumber", FontColor -> 
   RGBColor[0.9019607843137255, 0.4117647058823529, 0.027450980392156862`]],
 ShowCellBracket->False],

Cell[BoxData[
 PaneBox[GridBox[{
    {" ", 
     StyleBox[
      RowBox[{"Expected", " ", 
       RowBox[{"output", ":"}]}],
      Editable->False,
      Selectable->False,
      StripOnInput->False,
      FontColor->RGBColor[0.45, 0.45, 0.45]], " "},
    {" ", 
     InterpretationBox[Cell[BoxData[
       RowBox[{"{", 
        RowBox[{
        "9", ",", "3", ",", "3", ",", "2", ",", "6", ",", "2", ",", "1", ",", 
         "5", ",", "4", ",", "4", ",", "3", ",", "9", ",", "4", ",", "4", ",",
          "1", ",", "5", ",", "2", ",", "6", ",", "8", ",", "1", ",", "6", 
         ",", "9", ",", "9", ",", "2", ",", "3", ",", "8", ",", "8", ",", "5",
          ",", "6", ",", "2", ",", "6", ",", "6", ",", "7", ",", "0", ",", 
         "0", ",", "4", ",", "9", ",", "0", ",", "7", ",", "1", ",", "5", ",",
          "9", ",", "6", ",", "8", ",", "2", ",", "6", ",", "4", ",", "3", 
         ",", "8", ",", "1", ",", "6", ",", "2", ",", "1", ",", "4", ",", "6",
          ",", "8", ",", "5", ",", "9", ",", "2", ",", "9", ",", "6", ",", 
         "3", ",", "8", ",", "9", ",", "5", ",", "2", ",", "1", ",", "7", ",",
          "5", ",", "9", ",", "9", ",", "9", ",", "9", ",", "3", ",", "2", 
         ",", "2", ",", "9", ",", "9", ",", "1", ",", "5", ",", "6", ",", "0",
          ",", "8", ",", "9", ",", "4", ",", "1", ",", "4", ",", "6", ",", 
         "3", ",", "9", ",", "7", ",", "6", ",", "1", ",", "5", ",", "6", ",",
          "5", ",", "1", ",", "8", ",", "2", ",", "8", ",", "6", ",", "2", 
         ",", "5", ",", "3", ",", "6", ",", "9", ",", "7", ",", "9", ",", "2",
          ",", "0", ",", "8", ",", "2", ",", "7", ",", "2", ",", "2", ",", 
         "3", ",", "7", ",", "5", ",", "8", ",", "2", ",", "5", ",", "1", ",",
          "1", ",", "8", ",", "5", ",", "2", ",", "1", ",", "0", ",", "9", 
         ",", "1", ",", "6", ",", "8", ",", "6", ",", "4"}], "}"}]], 
       "ExerciseOutput"],
      Apply[TextCell, 
       Cell[
        BoxData[
         RowBox[{"{", 
           
           RowBox[{"9", ",", "3", ",", "3", ",", "2", ",", "6", ",", "2", ",",
              "1", ",", "5", ",", "4", ",", "4", ",", "3", ",", "9", ",", "4",
              ",", "4", ",", "1", ",", "5", ",", "2", ",", "6", ",", "8", ",",
              "1", ",", "6", ",", "9", ",", "9", ",", "2", ",", "3", ",", "8",
              ",", "8", ",", "5", ",", "6", ",", "2", ",", "6", ",", "6", ",",
              "7", ",", "0", ",", "0", ",", "4", ",", "9", ",", "0", ",", "7",
              ",", "1", ",", "5", ",", "9", ",", "6", ",", "8", ",", "2", ",",
              "6", ",", "4", ",", "3", ",", "8", ",", "1", ",", "6", ",", "2",
              ",", "1", ",", "4", ",", "6", ",", "8", ",", "5", ",", "9", ",",
              "2", ",", "9", ",", "6", ",", "3", ",", "8", ",", "9", ",", "5",
              ",", "2", ",", "1", ",", "7", ",", "5", ",", "9", ",", "9", ",",
              "9", ",", "9", ",", "3", ",", "2", ",", "2", ",", "9", ",", "9",
              ",", "1", ",", "5", ",", "6", ",", "0", ",", "8", ",", "9", ",",
              "4", ",", "1", ",", "4", ",", "6", ",", "3", ",", "9", ",", "7",
              ",", "6", ",", "1", ",", "5", ",", "6", ",", "5", ",", "1", ",",
              "8", ",", "2", ",", "8", ",", "6", ",", "2", ",", "5", ",", "3",
              ",", "6", ",", "9", ",", "7", ",", "9", ",", "2", ",", "0", ",",
              "8", ",", "2", ",", "7", ",", "2", ",", "2", ",", "3", ",", "7",
              ",", "5", ",", "8", ",", "2", ",", "5", ",", "1", ",", "1", ",",
              "8", ",", "5", ",", "2", ",", "1", ",", "0", ",", "9", ",", "1",
              ",", "6", ",", "8", ",", "6", ",", "4"}], "}"}]], 
        "ExerciseOutput", Selectable -> False, Copyable -> False, Editable -> 
        False, ShowCellBracket -> False]]], " "}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Center}}},
   GridBoxBackground->{"Columns" -> {{
        RGBColor[1, 1, 1]}}},
   GridBoxSpacings->{"Columns" -> {{Automatic}}, "Rows" -> {{1}}}],
  FrameMargins->0]], "ExerciseOutput",
 Editable->False,
 Selectable->False,
 Deletable->False,
 CellFrame->{{1, 1}, {1, 1}},
 ShowCellBracket->False,
 CellFrameColor->RGBColor[0.85, 0.85, 0.85],
 LineBreakWithin->Automatic]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Comenzando con ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}], ","}]], "InlineCode"],
 " elimine repetidamente los primeros 2 elementos y pegue ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"0", ",", "1"}], "}"}]], "InlineCode"],
 " si el primer elemento es 1, y ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"1", ",", "0", ",", "0"}], "}"}]], "InlineCode"],
 " si es 0, en 200 pasos; obtenga la lista de las longitudes de las \
secuencias as\[IAcute] producidas (",
 StyleBox["sistema de etiquetas",
  FontSlant->"Italic"],
 ").",
 StyleBox[ButtonBox["\[NonBreakingSpace]\[RightGuillemet]",
  Appearance->None,
  Evaluator->Automatic,
  Method->"Preemptive",
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
   FrontEndExecute[
     FrontEndToken[
      ButtonNotebook[], "OpenCloseGroup"]])],
  FontColor->RGBColor[1, 0.501961, 0]]
}], "Exercise",
 Editable->False,
 Selectable->False,
 Deletable->False,
 CellDingbat->Cell[
  "41.11", "ExerciseNumber", FontColor -> 
   RGBColor[0.9019607843137255, 0.4117647058823529, 0.027450980392156862`]],
 ShowCellBracket->False,
 CellTags->"i:14"],

Cell[BoxData[
 PaneBox[GridBox[{
    {" ", 
     StyleBox[
      RowBox[{"Expected", " ", 
       RowBox[{"output", ":"}]}],
      Editable->False,
      Selectable->False,
      StripOnInput->False,
      FontColor->RGBColor[0.45, 0.45, 0.45]], " "},
    {" ", 
     InterpretationBox[Cell[BoxData[
       RowBox[{"{", 
        RowBox[{
        "2", ",", "2", ",", "3", ",", "3", ",", "4", ",", "4", ",", "5", ",", 
         "6", ",", "6", ",", "7", ",", "8", ",", "9", ",", "9", ",", "10", 
         ",", "11", ",", "11", ",", "12", ",", "12", ",", "13", ",", "13", 
         ",", "14", ",", "14", ",", "15", ",", "16", ",", "16", ",", "17", 
         ",", "17", ",", "18", ",", "19", ",", "19", ",", "20", ",", "21", 
         ",", "22", ",", "22", ",", "23", ",", "23", ",", "24", ",", "24", 
         ",", "25", ",", "25", ",", "26", ",", "26", ",", "27", ",", "28", 
         ",", "29", ",", "29", ",", "30", ",", "30", ",", "31", ",", "32", 
         ",", "32", ",", "33", ",", "33", ",", "34", ",", "35", ",", "35", 
         ",", "36", ",", "37", ",", "37", ",", "38", ",", "38", ",", "39", 
         ",", "40", ",", "40", ",", "41", ",", "42", ",", "43", ",", "43", 
         ",", "44", ",", "44", ",", "45", ",", "45", ",", "46", ",", "46", 
         ",", "47", ",", "47", ",", "48", ",", "48", ",", "49", ",", "50", 
         ",", "50", ",", "51", ",", "52", ",", "53", ",", "53", ",", "54", 
         ",", "55", ",", "55", ",", "56", ",", "56", ",", "57", ",", "58", 
         ",", "58", ",", "59", ",", "59", ",", "60", ",", "61", ",", "61", 
         ",", "62", ",", "62", ",", "63", ",", "64", ",", "64", ",", "65", 
         ",", "66", ",", "67", ",", "67", ",", "68", ",", "69", ",", "69", 
         ",", "70", ",", "70", ",", "71", ",", "71", ",", "72", ",", "72", 
         ",", "73", ",", "74", ",", "74", ",", "75", ",", "76", ",", "77", 
         ",", "77", ",", "78", ",", "78", ",", "79", ",", "79", ",", "80", 
         ",", "80", ",", "81", ",", "82", ",", "82", ",", "83", ",", "84", 
         ",", "85", ",", "85", ",", "86", ",", "87", ",", "87", ",", "88", 
         ",", "88", ",", "89", ",", "89", ",", "90", ",", "90", ",", "91", 
         ",", "92", ",", "92", ",", "93", ",", "93", ",", "94", ",", "95", 
         ",", "95", ",", "96", ",", "97", ",", "98", ",", "98", ",", "99", 
         ",", "100", ",", "100", ",", "101", ",", "101", ",", "102", ",", 
         "103", ",", "103", ",", "104", ",", "104", ",", "105", ",", "106", 
         ",", "106", ",", "107", ",", "108", ",", "109", ",", "109", ",", 
         "110", ",", "111", ",", "111", ",", "112", ",", "112", ",", "113", 
         ",", "113", ",", "114", ",", "114", ",", "115", ",", "116", ",", 
         "116", ",", "117", ",", "117", ",", "118", ",", "119", ",", "119", 
         ",", "120", ",", "121", ",", "122", ",", "122", ",", "123", ",", 
         "123", ",", "124", ",", "124", ",", "125", ",", "125"}], "}"}]], 
       "ExerciseOutput"],
      Apply[TextCell, 
       Cell[
        BoxData[
         RowBox[{"{", 
           
           RowBox[{"2", ",", "2", ",", "3", ",", "3", ",", "4", ",", "4", ",",
              "5", ",", "6", ",", "6", ",", "7", ",", "8", ",", "9", ",", "9",
              ",", "10", ",", "11", ",", "11", ",", "12", ",", "12", ",", 
             "13", ",", "13", ",", "14", ",", "14", ",", "15", ",", "16", ",",
              "16", ",", "17", ",", "17", ",", "18", ",", "19", ",", "19", 
             ",", "20", ",", "21", ",", "22", ",", "22", ",", "23", ",", "23",
              ",", "24", ",", "24", ",", "25", ",", "25", ",", "26", ",", 
             "26", ",", "27", ",", "28", ",", "29", ",", "29", ",", "30", ",",
              "30", ",", "31", ",", "32", ",", "32", ",", "33", ",", "33", 
             ",", "34", ",", "35", ",", "35", ",", "36", ",", "37", ",", "37",
              ",", "38", ",", "38", ",", "39", ",", "40", ",", "40", ",", 
             "41", ",", "42", ",", "43", ",", "43", ",", "44", ",", "44", ",",
              "45", ",", "45", ",", "46", ",", "46", ",", "47", ",", "47", 
             ",", "48", ",", "48", ",", "49", ",", "50", ",", "50", ",", "51",
              ",", "52", ",", "53", ",", "53", ",", "54", ",", "55", ",", 
             "55", ",", "56", ",", "56", ",", "57", ",", "58", ",", "58", ",",
              "59", ",", "59", ",", "60", ",", "61", ",", "61", ",", "62", 
             ",", "62", ",", "63", ",", "64", ",", "64", ",", "65", ",", "66",
              ",", "67", ",", "67", ",", "68", ",", "69", ",", "69", ",", 
             "70", ",", "70", ",", "71", ",", "71", ",", "72", ",", "72", ",",
              "73", ",", "74", ",", "74", ",", "75", ",", "76", ",", "77", 
             ",", "77", ",", "78", ",", "78", ",", "79", ",", "79", ",", "80",
              ",", "80", ",", "81", ",", "82", ",", "82", ",", "83", ",", 
             "84", ",", "85", ",", "85", ",", "86", ",", "87", ",", "87", ",",
              "88", ",", "88", ",", "89", ",", "89", ",", "90", ",", "90", 
             ",", "91", ",", "92", ",", "92", ",", "93", ",", "93", ",", "94",
              ",", "95", ",", "95", ",", "96", ",", "97", ",", "98", ",", 
             "98", ",", "99", ",", "100", ",", "100", ",", "101", ",", "101", 
             ",", "102", ",", "103", ",", "103", ",", "104", ",", "104", ",", 
             "105", ",", "106", ",", "106", ",", "107", ",", "108", ",", 
             "109", ",", "109", ",", "110", ",", "111", ",", "111", ",", 
             "112", ",", "112", ",", "113", ",", "113", ",", "114", ",", 
             "114", ",", "115", ",", "116", ",", "116", ",", "117", ",", 
             "117", ",", "118", ",", "119", ",", "119", ",", "120", ",", 
             "121", ",", "122", ",", "122", ",", "123", ",", "123", ",", 
             "124", ",", "124", ",", "125", ",", "125"}], "}"}]], 
        "ExerciseOutput", Selectable -> False, Copyable -> False, Editable -> 
        False, ShowCellBracket -> False]]], " "}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Center}}},
   GridBoxBackground->{"Columns" -> {{
        RGBColor[1, 1, 1]}}},
   GridBoxSpacings->{"Columns" -> {{Automatic}}, "Rows" -> {{1}}}],
  FrameMargins->0]], "ExerciseOutput",
 Editable->False,
 Selectable->False,
 Deletable->False,
 CellFrame->{{1, 1}, {1, 1}},
 ShowCellBracket->False,
 CellFrameColor->RGBColor[0.85, 0.85, 0.85],
 LineBreakWithin->Automatic]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Comenzando con ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"0", ",", "0"}], "}"}]], "InlineCode"],
 " y por 200 pasos, elimine repetidamente los primeros 2 elementos y pegue ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"2", ",", "1"}], "}"}]], "InlineCode"],
 " si el primer elemento es 0; ",
 Cell[BoxData[
  RowBox[{"{", "0", "}"}]], "InlineCode"],
 " si el primer elemento es 1, y ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"0", ",", "2", ",", "1", ",", "2"}], "}"}]], "InlineCode"],
 " si es 2; cree una gr\[AAcute]fica con los puntos unidos de las longitudes \
de las secuencias producidas (",
 StyleBox["sistema de etiquetas",
  FontSlant->"Italic"],
 ").",
 StyleBox[ButtonBox["\[NonBreakingSpace]\[RightGuillemet]",
  Appearance->None,
  Evaluator->Automatic,
  Method->"Preemptive",
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
   FrontEndExecute[
     FrontEndToken[
      ButtonNotebook[], "OpenCloseGroup"]])],
  FontColor->RGBColor[1, 0.501961, 0]]
}], "Exercise",
 Editable->False,
 Selectable->False,
 Deletable->False,
 CellDingbat->Cell[
  "41.12", "ExerciseNumber", FontColor -> 
   RGBColor[0.9019607843137255, 0.4117647058823529, 0.027450980392156862`]],
 ShowCellBracket->False,
 CellTags->"LastCellOfAPage"],

Cell[BoxData[
 PaneBox[GridBox[{
    {" ", 
     StyleBox[
      RowBox[{"Expected", " ", 
       RowBox[{"output", ":"}]}],
      Editable->False,
      Selectable->False,
      StripOnInput->False,
      FontColor->RGBColor[0.45, 0.45, 0.45]], " "},
    {" ", 
     InterpretationBox[Cell[BoxData[
       GraphicsBox[{{}, {{}, {}, 
          {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
           0.01388888888888889], AbsoluteThickness[1.6], 
           LineBox[CompressedData["
1:eJx11UluFEEQheEUK5YsWLBgUSCEEEKIeQYnzTzabgbbDKZo09CsuEIcpY6S
W25RR+AIgHivUPwCS1b0V5mRVRmdUX1k8W2+3FdK+f7r/3f88/djTR/qv+N+
xQP/iQcx7xCuH4Y7XD+KeAzzjuP6CcSTiqcQzyiehnn9LHwO65yHL+C+F+FL
eL7LyL8CX0X+NTzPdfgG8m/Ct7DeGvJrdtiuw21F7Tts12WmqDoEXO4oqg5h
e993FVWXsF2He4rad9je531F7Svg8kBRdQjb+3yYHbbzH2F923V9jPVtr/9E
UXULe6b4VFF1Cdt1eKaofYftfT5X1L5Cnuqwnh3ryN/I+RWOjZzfbNdxM7tu
Ih9unu/7z7PrPD9fwM3zfQ5eZFd5qhfcPN/1fZldZdc/4Ob5Psevsqs8fZ9w
8/yZrr9GPhy27297/1t5f9V2/eC2hfxt2fWHYxv5tr//ney6g3zb3z9c3iDf
Vh8G3Gz34VtF9V2V3adha7zZ7sN3svqu2uqzgJs89eV7RfVdhcNW3zXbfbar
eRqvcOwi33b+h+wqT33rcfVdk93Hpc/u+pxf+5zfw4H8AW5Yb4TLx7xeJ/u9
UT2uvu897veAx9XXg8fl5nH17ehx9/VC95E7uC5yfr/I+QEPyG/wiPXKXnYn
+z1V4X4v7y+QP8AN+SNcPuX1OrjKfq/2cMhT/ZHf4BH5ZZmfp4PrMuf3cCzz
egPclvn5Rrh81jydpw6uss9bD4fs360BbrLP7wiXL5rn8w9X2f3QwyH7d3dA
foNH5JdVfp4Orquc38OxyusNyG/wiPzyVffx/f/6J8OJS2E=
            "]]}}, {}},
        AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
        Axes->{True, True},
        AxesLabel->{None, None},
        AxesOrigin->{0, 0},
        DisplayFunction->Identity,
        Frame->{{False, False}, {False, False}},
        FrameLabel->{{None, None}, {None, None}},
        FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
        GridLines->{None, None},
        GridLinesStyle->Directive[
          GrayLevel[0.5, 0.4]],
        ImageSize->{374.6875, Automatic},
        Method->{},
        PlotRange->{{0., 201.}, {0, 82.}},
        PlotRangeClipping->True,
        PlotRangePadding->{{
           Scaled[0.02], 
           Scaled[0.02]}, {
           Scaled[0.02], 
           Scaled[0.05]}},
        Ticks->{Automatic, Automatic}]], "ExerciseOutput"],
      Apply[TextCell, 
       Cell[
        BoxData[
         GraphicsBox[{{}, {{}, {}, {
             RGBColor[0.368417, 0.506779, 0.709798], 
             PointSize[0.01388888888888889], 
             AbsoluteThickness[1.6], 
             LineBox[CompressedData["
1:eJx11UluFEEQheEUK5YsWLBgUSCEEEKIeQYnzTzabgbbDKZo09CsuEIcpY6S
W25RR+AIgHivUPwCS1b0V5mRVRmdUX1k8W2+3FdK+f7r/3f88/djTR/qv+N+
xQP/iQcx7xCuH4Y7XD+KeAzzjuP6CcSTiqcQzyiehnn9LHwO65yHL+C+F+FL
eL7LyL8CX0X+NTzPdfgG8m/Ct7DeGvJrdtiuw21F7Tts12WmqDoEXO4oqg5h
e993FVWXsF2He4rad9je531F7Svg8kBRdQjb+3yYHbbzH2F923V9jPVtr/9E
UXULe6b4VFF1Cdt1eKaofYftfT5X1L5Cnuqwnh3ryN/I+RWOjZzfbNdxM7tu
Ih9unu/7z7PrPD9fwM3zfQ5eZFd5qhfcPN/1fZldZdc/4Ob5Psevsqs8fZ9w
8/yZrr9GPhy27297/1t5f9V2/eC2hfxt2fWHYxv5tr//ney6g3zb3z9c3iDf
Vh8G3Gz34VtF9V2V3adha7zZ7sN3svqu2uqzgJs89eV7RfVdhcNW3zXbfbar
eRqvcOwi33b+h+wqT33rcfVdk93Hpc/u+pxf+5zfw4H8AW5Yb4TLx7xeJ/u9
UT2uvu897veAx9XXg8fl5nH17ehx9/VC95E7uC5yfr/I+QEPyG/wiPXKXnYn
+z1V4X4v7y+QP8AN+SNcPuX1OrjKfq/2cMhT/ZHf4BH5ZZmfp4PrMuf3cCzz
egPclvn5Rrh81jydpw6uss9bD4fs360BbrLP7wiXL5rn8w9X2f3QwyH7d3dA
foNH5JdVfp4Orquc38OxyusNyG/wiPzyVffx/f/6J8OJS2E=
              "]]}}, {}}, 
          AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
          Axes -> {True, True}, AxesLabel -> {None, None}, 
          AxesOrigin -> {0, 0}, DisplayFunction -> Identity, 
          Frame -> {{False, False}, {False, False}}, 
          FrameLabel -> {{None, None}, {None, None}}, 
          FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
          GridLines -> {None, None}, GridLinesStyle -> Directive[
            GrayLevel[0.5, 0.4]], ImageSize -> {374.6875, Automatic}, 
          Method -> {}, PlotRange -> {{0., 201.}, {0, 82.}}, 
          PlotRangeClipping -> True, PlotRangePadding -> {{
             Scaled[0.02], 
             Scaled[0.02]}, {
             Scaled[0.02], 
             Scaled[0.05]}}, Ticks -> {Automatic, Automatic}]], 
        "ExerciseOutput", Selectable -> False, Copyable -> False, Editable -> 
        False, ShowCellBracket -> False]]], " "}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Center}}},
   GridBoxBackground->{"Columns" -> {{
        RGBColor[1, 1, 1]}}},
   GridBoxSpacings->{"Columns" -> {{Automatic}}, "Rows" -> {{1}}}],
  FrameMargins->0]], "ExerciseOutput",
 Editable->False,
 Selectable->False,
 Deletable->False,
 CellFrame->{{1, 1}, {1, 1}},
 ShowCellBracket->False,
 CellFrameColor->RGBColor[0.85, 0.85, 0.85],
 LineBreakWithin->Automatic]
}, Closed]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Preguntas y respuestas", "QASection",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False,
 CellTags->"p:253"],

Cell["\<\
\[DownQuestion]Qu\[EAcute] otras funciones que trabajen con patrones hay en \
Wolfram Language?\
\>", "Question",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["Except",
    BaseStyle->"CodeLink"], "[", 
   StyleBox["patt", "CodeVariable"], "]"}]], "InlineCode"],
 " coincide con cualquier cosa, excepto ",
 Cell[BoxData[
  StyleBox["patt", "CodeVariable"]], "InlineCode"],
 ". ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["PatternSequence",
    BaseStyle->"CodeLink"], "[", 
   StyleBox["patt", "CodeVariable"], "]"}]], "InlineCode"],
 " coincide con una secuencia de argumentos en una funci\[OAcute]n. ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["OrderlessPatternSequence",
    BaseStyle->"CodeLink"], "[", 
   StyleBox["patt", "CodeVariable"], "]"}]], "InlineCode"],
 " coincide con dichos argumentos sin importar el orden. ",
 Cell[BoxData[
  RowBox[{"f", "[", 
   RowBox[{
    RowBox[{"x", 
     ButtonBox["_",
      BaseStyle->"Link",
      ButtonData->"Blank"]}], ":", "v"}], "]"}]], "InlineCode"],
 " define a v como valor por defecto, as\[IAcute] que en ",
 Cell[BoxData[
  RowBox[{"f", "[", " ", "]"}]], "InlineCode"],
 ", x se toma como ",
 Cell[BoxData["v"], "InlineCode"],
 ". "
}], "Answer",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False,
 CellTags->"i:15"],

Cell["\<\
\[DownQuestion]C\[OAcute]mo pueden verse todas las formas en que un patr\
\[OAcute]n podr\[IAcute]a coincidir con una expresi\[OAcute]n dada?\
\>", "Question",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False],

Cell[TextData[{
 "Use ",
 ButtonBox["ReplaceList",
  BaseStyle->"Link"],
 ". ",
 ButtonBox["Replace",
  BaseStyle->"Link"],
 " obtiene la primera coincidencia; ",
 ButtonBox["ReplaceList",
  BaseStyle->"Link"],
 " obtiene la lista de todas ellas."
}], "Answer",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False,
 CellTags->"i:16"],

Cell[TextData[{
 "\[DownQuestion]Qu\[EAcute] hace ",
 ButtonBox["FixedPointList",
  BaseStyle->"Link"],
 " cuando no hay un punto fijo?"
}], "Question",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False],

Cell[TextData[{
 "En alg\[UAcute]n momento se detendr\[AAcute]. Existe, adem\[AAcute]s, una \
opci\[OAcute]n para fijar qu\[EAcute] tan lejos debe llegar. ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["FixedPointList",
    BaseStyle->"CodeLink"], "[", 
   RowBox[{
    StyleBox["f", "CodeVariable"], ",", 
    StyleBox["x", "CodeVariable"], ",", 
    StyleBox["n", "CodeVariable"]}], "]"}]], "InlineCode"],
 " se detiene despu\[EAcute]s de un m\[AAcute]ximo de ",
 Cell[BoxData[
  StyleBox["n", "CodeVariable"]], "InlineCode"],
 " pasos."
}], "Answer",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False]
}, Open  ]],

Cell[CellGroupData[{

Cell["Notas t\[EAcute]cnicas", "TechNoteSection",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False],

Cell[TextData[{
 "En el caso de un patr\[OAcute]n repetitivo ",
 Cell[BoxData[
  RowBox[{
   StyleBox["patt", "CodeVariable"], 
   ButtonBox["..",
    BaseStyle->"Link",
    ButtonData->"Repeated"]}]], "InlineCode"],
 ", recuerde que debe dejarse un espacio, por ejemplo, cuando se tiene ",
 Cell[BoxData[
  RowBox[{"0", " ", 
   ButtonBox["..",
    BaseStyle->"Link",
    ButtonData->"Repeated"]}]], "InlineCode"],
 " para evitar la confusi\[OAcute]n con n\[UAcute]meros decimales."
}], "TechNote",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False],

Cell[TextData[{
 "Las funciones pueden tener atributos que afecten el funcionamiento de la \
coincidencia de patrones. Por ejemplo, ",
 ButtonBox["Plus",
  BaseStyle->"Link"],
 " tiene los atributos ",
 ButtonBox["Flat",
  BaseStyle->"Link"],
 " y ",
 ButtonBox["Orderless",
  BaseStyle->"Link"],
 ". ",
 ButtonBox["Flat",
  BaseStyle->"Link"],
 " significa que ",
 Cell[BoxData[
  RowBox[{"b", "+", "c"}]], "InlineCode"],
 " puede extraerse de ",
 Cell[BoxData[
  RowBox[{"a", "+", "b", "+", "c", "+", "d"}]], "InlineCode"],
 ". ",
 ButtonBox["Orderless",
  BaseStyle->"Link"],
 " significa que los elementos pueden reordenarse, de tal modo que ",
 Cell[BoxData[
  RowBox[{"a", "+", "c"}]], "InlineCode"],
 " puede sacarse. (",
 ButtonBox["Flat",
  BaseStyle->"Link"],
 " es como la propiedad matem\[AAcute]tica de la ",
 StyleBox["asociatividad",
  FontSlant->"Italic"],
 "; ",
 ButtonBox["Orderless",
  BaseStyle->"Link"],
 " es como la ",
 StyleBox["conmutatividad",
  FontSlant->"Italic"],
 "). "
}], "TechNote",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False,
 CellTags->"i:17"],

Cell[TextData[{
 "El algoritmo que se ha mostrado para efectuar un ordenamiento se conoce \
usualmente como ",
 StyleBox["ordenamiento de burbuja",
  FontSlant->"Italic"],
 ". Para una lista de longitud ",
 Cell[BoxData[
  StyleBox["n", "CodeVariable"]], "InlineCode"],
 ", tomar\[AAcute] por lo general alrededor de ",
 Cell[BoxData[
  RowBox[{
   StyleBox["n", "CodeVariable"], "^", "2"}]], "InlineCode"],
 " pasos. La funci\[OAcute]n nativa de Wolfram Language, ",
 ButtonBox["Sort",
  BaseStyle->"Link"],
 ", es mucho m\[AAcute]s r\[AAcute]pida y toma apenas un poco m\[AAcute]s de ",
 Cell[BoxData[
  StyleBox["n", "CodeVariable"]], "InlineCode"],
 " pasos."
}], "TechNote",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False,
 CellTags->"i:18"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Para explorar m\[AAcute]s", "MoreExploreSection",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False],

Cell[TextData[ButtonBox["Gu\[IAcute]a para patrones en Wolfram Language\
\[NonBreakingSpace]\[RightGuillemet]",
 BaseStyle->"Link",
 ButtonData->"paclet:guide/Patterns"]], "MoreExplore",
 Editable->False,
 Deletable->False,
 ShowCellBracket->False,
 CellTags->"LastCellOfAPage"]
}, Open  ]]
},
Saveable->False,
WindowToolbars->{},
BlinkingCellInsertionPoint->False,
CellInsertionPointCell->None,
WindowSize->{830, 800},
WindowMargins->Automatic,
WindowPersistentStyles->{
 WindowFrame, WindowMargins, WindowSize, Magnification},
WindowTitle->"M\[AAcute]s informaci\[OAcute]n sobre los patrones: Una \
introducci\[OAcute]n elemental a Wolfram Language",
DockedCells->{
  Cell[
   BoxData[
    TagBox[
     GridBox[{{
        TemplateBox[{
         "\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "\"\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\"", 
          GraphicsBox[
           TagBox[
            RasterBox[CompressedData["
1:eJztl01IVFEUxyctMFzUysjIyUDCTauiIJFM6ENpM4NEtJrBUaSYZMYPhCRm
rYuoICgiW0VEBVIUEbTNEMTAIqRsk6JGCVFBHx7//+4JLo/36DqvB4Ie+Mk7
7+t3733nHpzq9NlEW0ksFsuX4U8i1duQy6X6kpuRtGTzHe3ZTOuxbFemPZPb
ny7FyZ2gEqwHInICfJToguOIReywPVHHlYDzcY4hJHZ486giyBOXtfms5Pms
Bs9zUBDTow6DJOgBT8DP/+B5CepAPbgqZm+zT70Bt9VXCx6H8DwE28Gw5ufB
IT2eA1N6PKquC0V4xtUxqfkE6ARD4BHYAx5Y938Gu8GdZXq4VsNWngIfwDzY
Aa6Bm55nOKYq8NXRw29eb+Uz4JSVd4Nn4IbPs2fARUdPQcfLWAQJ8Mq6Tkdd
gGcEHHT0sHYn9Jg1dcnnnhf6vnee8xzXVkcP9wdr97eY7z0NnlrX74qpxffg
iOZ2VDp6kvqOe6AVXAb7xNQB462YNfsCfoBzoE1MzTEqHD096mgE98WsEec4
Jqamvvk8cx2kwWuw19HDXnIAbNAx03ka9IO8mO+3ScyebRZTi01i1rqguHjY
r3aJWaugOA5O6vEC+K6ebWDW0cNgv6oBnwKus87KwKDmv8BRMOBz77/6G/sV
e8lkwHWuTwm4pQ7WzGIRHgb7FXsJ9/mI5z2si42gXMw8/ByuHgb7FXsJ9yX3
IPfHFjF1xTl5v0exnrCx5gnn+fu7JC7h/z/0Y52+P+rfWX9iCXVYErg=
             "], {{0,
              34}, {26, 0}}, {0, 255}, ColorFunction -> RGBColor], 
            BoxForm`ImageTag[
            "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
             1], Selectable -> False], DefaultBaseStyle -> "ImageGraphics", 
           ImageSize -> Magnification[1], ImageSizeRaw -> {26, 34}, 
           PlotRange -> {{0, 26}, {0, 34}}], 
          GraphicsBox[
           TagBox[
            RasterBox[CompressedData["
1:eJztXUuS47gRLX8WXtYRaJ+gl17SS+8U4/CeM+H2hDdtRY8jHF6ZR9AReATt
qrwyj6AjcO+ZaN0gLZCZwEMiQVJqSd2qwYvgdBGf/AF4+LFqfvvd37/56y+f
np5++M3pP998+88/fPz47b/+9Hx6+fOHH/72/Yf3f/njh3+8//79x99/96tT
4u9Oz79/8fT066cY9NNLSz++9uPz0+uOPv3n3Zj+40vj083npZktd5IVdJzk
hvT9pHOq78uc9I75rD/KA31n6/z03+dY1lRX64jkQh3LLpevbWI7t6N/Esv/
vdSJDpcOdpr5M74lvk/tt6VPL1VG3j7v79Qedr2XLlevoKDgsTHx8Cud+OTA
XDKM7yfOijnmlB+XC9zvuGfMm+HhqfwR8sjLY54ddbJuw05yesL7Sp2qHtY1
4+F8VjZ4Xajf2/q6Gd/HuUDH6OTvZOM21jHZmm0TsTvH/d531WZOn5o3x3lL
Ys22pnFN87Bezs6CgoLHhFsnMqd1IW1cz26TsrO8nOdSX8bgO+CwZlmHzf2L
OoXbYE08y/2e80AXcDGkbVEuzEXbIAvmA9S/kvuz+aIL5yeJHbTlVHbcQwzT
/BDncT5l6xXuLyh4k4C1Xfb8wZe9Bfcrnr0J949r43H9vV9bl2Oyn2w88Te/
Yx0+DxmiOiddiSyDk2/B/cEGFWPm/GkOeDmavo5zQ5wnaYX7CwreJvy61HGb
cc7uy63g/rEMPLEeg/tl7cxrZa/DpStZ2TOfFTo1Vy5yP88Zk02vGzkTic54
prjx/JDuFWJ501nXXCwS/Wev+9m+aN/Bdrk8dUYVZE1zv7n/4vScHQUFBY8L
f2fpz99PP1v8vob71ROV8efSruxYfj9xojujVuf92cfg/mWdPf88yDp9ed0f
8uXMZJIxroP5zN3ar6Tn6cGOsK5efd6f8S1/3n/6Nzrbirl7sj852yFuk87P
Zfzzmr1VQUHBY2M6+x/HPJnnCddY9yOXjevmkz7kqhut+xPZS9zv1/juvnvc
N3STTv5+R8XCsi+2Y+Joyy67fLijxifxXbhf5uzkeyZ/zt/yt0ADzrXs06RH
fJ7uKI7TnXfh/oKCnwvgDiD67u8W5/1JmZuc92vOndbus9wvd+D+TEq+ZQ3v
wpNTebkTMO5S4b4gZ5dp9xlnPp7/cR7F73v0g9/K4v7Ff4c17VEK9xcUvE2M
vJR828dcpc/m3wL3e05fvsPktW/0jY7n02m9PSS6FP+infHvJlyZ+4352p/h
671AWi5wv/+2R/Y5hfsLCt4icKzD2cpe3xmOZS8484nuIm/E/efqpJXfLkIc
hihdvtnP7YvcuYq/Ww1nM7EM/v5I2y5zzCV3vXJeF/YCg7Yx8kv2LMj9MofI
7/YV7i8oeJOY1vhwxh+e5JvPS+5643vGG3H/mTr9efYi9/vf5+qUHebc6O0P
c4M8e+Mc3rzLDWcvF3C/P6fnuSdno5xX+d/Lm7mnKNxfUPDmodeeBZdjXD+P
sYw5v6CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoOBr
BxE9n57aPV/aloLr4dSeFbdr9m/CXlmf60fVPXTdGi5mHLvqS9uyhNz45fTm
9LTu3y9jXcFacHu1/NRXktlmnprzXb8ZcQ19Pxdw3K7WTtcG2+bQ30nf4fQc
7zXX3BIuZhy79kryKhl3Kt1K23J6tVK2OX7Bh69mbFv+FkzgeVpg/r9bL5CZ
Q8v5D8n99+S1jP4W43hm3Zvbfivuz/nN6Y7/b/57dCcdwzX6K/T9VqXfgvuj
MYZpBPPluWPRGr9KdkdfyXz8iDxzLzi+5/Ac+d/PHkfQB7bcT+SpOP/huJ+m
PflDcj/Eu7+NZV7PXbn/nrhWf70X97NMGdM1v+M6b8tp0q+T/+/cCh/ISrsG
h1wLj8Yz9wJN5z3C+x3/3KgyY7/g8XeE8vn/z1dAncnP7Rk3xOsrRof9SHiF
6x/gXc4Zxb6dkvuO4v1oT/G6R/JQhvt3w/mNsmuUAbL3Kk/rF50tlNnyv3tV
VvQk8SWDA0HeJba3UFfi2UIbYb2Dtol9HyBf4thr+1a0/Vbpk3bdUYoWZRP0
M8Nu3dai38ntVLmEs9jHAylAvu6zkT4lC9tI+yKx2yt5jZJh6TO5FmQKz6O/
e7DJv4PPOF6cPh1jHweK+4H2S2yUdnT+yzkz1hkobifpmxsK3HNkeysKYy6q
Z8TA25nJrykdv63hK/ogequZmCFqMtZfZI9nHIsSr0bZvKW0H3nZNMW3W5Cx
4bwOftZcRErG0SqXqROt+4146jEkcPZIv+gytmC/ORpp77hOBfk9hfY5gFxs
syPIGYz2OHL5HeftVLqgUXajjcJrggr6j9drxHWO+0XHEWUs2N5COnG5DduB
aVhfbMW4DqT4SNu30PYt1JUz/IEC9+vYNcr3WsVvzu6aYuA4S//+Xcr9PYUx
Vis5EoOR3wxZDZTRvmjewHg+G/51YFevdam4SnsPYOfR6lOUtiv6LmPK4n4d
I91G6HMFaRi33rBdxwPXN6u5aCa/A3nYBtKndH/BdulADtoXjQUK9/g5H1tD
jo59ZdiD+a68tDPOix3EqTb8dn0SuUivtYntdGU8Ry/FWwPyrfEvfjT8/sw2
Hw25so4R3h0otNWg5EgZbCdp43fqfc96fd80bPZtB3Zu4F307SBN0Km6En/x
p9V1Vfk57u8usB25H9dcYheuBSVGnRH7Z1Wvh3o5WzBN+qbEYfTD0O39Vr7X
/C593rJbxoXo92sh8MXkEMtmpa+DNOl/yTyiYq59ETt7CuM8GrOgbwv1RJ81
12xQptgKunCtKjokFr3hp+wVrDbMxUig98IbitcRWp7E6cD5yE/S18W/41MG
lk0q38nG8St9uNV+UeifjREjgV47VUoO1rHGs6uLY1F4sTbigvviDuo74LgU
e5GTxL4NxecoTS52ZLRTLt4cx1YeyLf6jqCH52iVMWKH8Yx4At4PIFfGS63K
1DO6TP6E2O4hntomwbOqJzIP/C7xrzJxneP+s22nzFwDduCYiPq7jrOSl/hu
2ELWe8bvtdwv7Tpn99wYjOKTszmnf6WsJe5vjTTxD/di0RhBG6C+jFVXRniy
ARsaUnMH6MT5Rfw/qvfV3J+xbUfqPG0uTpSO2zV9Zzafy1jjt13ha2/YJnEU
v/ReCetYPjo+30I7aHsiHieY3/l9y++yj+lJ7Q8pPmPRwHVTEjsrzcqnM877
oU6vn5xeupz75dHr/npGV44/8cynA1lZu1V935/Fzpm43or7W5U+GDJ1H/sa
ud/a22q7H5n7BVZfrjL6JCbST/H8we/dDJ1Nzn8rHksxUmm4Lu4hJkvcr+Px
2dxP8ZnPTrfDgq89pAknu7EjXHtYqBP5SBPvH0BOS2EsYhwkrYc4bpRM5H55
RE8H9Vt+pC9k19or4ymoM/lWPMWfjVXH0kvruL/D94zcc7jf2WmdidUzNmXj
BeWlzc2zAlW2hbQk1mfYvsRDuEeMzkUgrp1RJvGdwt5X1iXCI7iX9z5k7OlU
uo69xZ9ipz6vQBuX+BrP2a39eGPo6zKyTF0Z2zXXJby8BKjjoM9PPf/O2a9t
ps/n/tbQoeXdnPspvneQ9brm47Xc731iO7cUjzWpg/OBnKVpXdhOms/ceHHj
WOb/PcVj34/1mZhIu+tvNyIOtmK3Nt6kznwonK/WUEbSJHbjOSyFfdhGyzXi
jW2gY4W6XPmN2GXUqWd04fjvKb3LOpD6bmRNvCjufw7VTFw/l/u17Tnuxz1h
C+W8Hoq/F9zN+C79aU9qH2vE/8i6OoL7UiXb6ZL92pxNObvP5n6ly/nTqnrO
1i3F34HUGTlbKOPHLa3jfvFP4iRjpJmxG2Ng3YNondhXdhS+sSEK/QbHQqPr
WXGbsWlHcDdqlJmLx2rup5iHWq6LY8/Jxn7W5nSQ3YfEhx2F71twnYAxi3y2
dFE6XqSM9IGBfxZdlWGLq79hfXKXKWN7MGIl/nczbZekZeKtgbGaW3MIjmTw
HLwvcr+KF8IaB/Wcj6S+veI0HO/OXpnL+zlZSq7Umf3Gmi7k/hnbTe43/CKr
HKXfkUkc0fdWyfD9GcrgXhfL1Zxfq7x2xnfLbuvs2rLRp62IR2XEQNDMyHG+
JvdCtIL7M3aMZxUz+qJ5PCNno+pY40XfCUXjl87jfjzzIYI7OChzbe7XaJVM
iWVuLb523a8x3skauhyk76CPOA4GsvsFzhsI/J0NXebA6RWpeQnkRnn8c63K
JGlWvvHgPOj0bLUNbJ9LT85+tF7LD8r8XRQu2/Cj71yljt6jJT7SNJYaZccG
5Ro2ZeNFExdI+2bPe5S/FaTVa2ynMOd72y15hj6JWa6MtJfpO5RpQW8utjWX
S3RBf9lQ/O1E5PuS3RT+Fo3ui+Z4UHU3FL5bxnhLDLJxMmwQ+2ScJf3W6pfK
v+z5qOGvtrmy0g0dpk96/KIeVS7X1lK/Ql8N+7LxyOm09BsPyh3HhZJZqXe0
zepDbgwPFP4+hoxpUnWlD1VaF8j2bavjQGHe6Sic0yfraCi7pRV9suC+4H4g
87w/4ygoKHgcUNhb4f2YnMsTLawpztTVa5kUzhH7a+kpuC0o3vc2X9qegoKC
80Hp78Phmr+7si48q5O9hqwdrzbHFNwWFL61rr60LQUFBZeDwt9N7Sl8O1nf
SFdD4XuijtQ3RXP4P6lulfg=
             "], {{0, 34}, {383, 0}}, {0, 255}, 
             ColorFunction -> RGBColor], 
            BoxForm`ImageTag[
            "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
             1], Selectable -> False], DefaultBaseStyle -> "ImageGraphics", 
           ImageSize -> Magnification[1], ImageSizeRaw -> {383, 34}, 
           PlotRange -> {{0, 383}, {0, 34}}]}, "RowWithSeparators"], 
        PaneBox[
         StyleBox["\[VeryThinSpace]", ShowStringCharacters -> False], 
         Alignment -> Right, ImageSize -> {174, 47}], 
        PaneBox[
         PaneBox[
          TemplateBox[{"\[ThinSpace]", "\" \"", 
            TagBox[
             TooltipBox[
              PaneSelectorBox[{False -> ButtonBox[
                  PaneBox[
                   GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAPiDmBmIUBO/j//z8jEDcA8W8g3oBFnhmIZ/9HgE9o8mxAvBZJ/hsQuyPJ
8wPxfiT5N0BsjiQvCsTnkOSfALEWkrwSEN9Bkr8OxDJobniAJP8ZZCYWfxCj
RpGQXcS4mVi/ExuGxMYFmlp4nAIAG14fWQ==
                    "], {{0, 14}, {9, 
                    0}}, {0, 255}, ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {9, 14}, PlotRange -> {{0, 9}, {0, 14}}, 
                    ImageSize -> Magnification[1]], ImageSize -> {35, 30}, 
                   Alignment -> Center], 
                  ButtonFunction :> (
                   NotebookLocate[{
                    "EIWL2-40-defining-your-own-functions.nb", ""}, 
                    FrontEnd`HistoryData :> {
                    EvaluationNotebook[]}]& ), Enabled -> True, Appearance -> 
                  None, Evaluator -> Automatic, Method -> "Preemptive"], True -> 
                ButtonBox[
                  PaneBox[
                   GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAPiDmBmIUBO/j//z8jEDcA8W8g3oBFnhmIZ/9HgE9o8mxAvBZJ/hsQuyPJ
8wPxfiT5N0BsjiQvCsTnkOSfALEWkrwSEN9Bkr8OxDJobniAJP8ZZCYWfxCj
RpGQXcS4mVi/ExuGxMYFmlp4nAIAG14fWQ==
                    "], {{0, 14}, {9, 
                    0}}, {0, 255}, ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {9, 14}, PlotRange -> {{0, 9}, {0, 14}}, 
                    ImageSize -> Magnification[1]], ImageSize -> {35, 30}, 
                   Alignment -> Center], 
                  ButtonFunction :> (
                   NotebookLocate[{
                    "EIWL2-40-defining-your-own-functions.nb", ""}, 
                    FrontEnd`HistoryData :> {
                    EvaluationNotebook[]}]& ), Enabled -> True, Appearance -> 
                  None, Background -> RGBColor[0.835294, 0.364706, 0.0196078],
                   Evaluator -> Automatic, Method -> "Preemptive"]}, 
               Dynamic[
                CurrentValue["MouseOver"]], ImageSize -> Automatic, 
               FrameMargins -> 0], "\"Funciones definidas por el usuario\"", 
              TooltipDelay -> 0.15, LabelStyle -> "TextStyling"], 
             Annotation[#, "Funciones definidas por el usuario", 
              "Tooltip"]& ], 
            TemplateBox[{5}, "Spacer1"], 
            TagBox[
             TooltipBox[
              PaneSelectorBox[{False -> ButtonBox[
                  PaneBox[
                   GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAfiDmBmAWI////vwKIfwFxMQMOAJT7+R8B6nGoSf+PCjpwqMskUl0SEP9F
UtcHxIxY1EWjqZuOQ10Mmr2TcNj7BEnNP1LNIeQeIDsZn78IhQ8x4fwfNb4a
cPgTFu8l2ORBAAC+1hnm
                    "], {{0, 15}, {9, 0}}, {0, 255}, 
                    ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {9, 15}, PlotRange -> {{0, 9}, {0, 15}}, 
                    ImageSize -> Magnification[1]], ImageSize -> {35, 30}, 
                   Alignment -> Center], 
                  ButtonFunction :> (
                   NotebookLocate[{
                    "EIWL2-42-string-patterns-and-templates.nb", ""}, 
                    FrontEnd`HistoryData :> {
                    EvaluationNotebook[]}]& ), Appearance -> None, Evaluator -> 
                  Automatic, Method -> "Preemptive"], True -> ButtonBox[
                  PaneBox[
                   GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAfiDmBmAWI////vwKIfwFxMQMOAJT7+R8B6nGoSf+PCjpwqMskUl0SEP9F
UtcHxIxY1EWjqZuOQ10Mmr2TcNj7BEnNP1LNIeQeIDsZn78IhQ8x4fwfNb4a
cPgTFu8l2ORBAAC+1hnm
                    "], {{0, 15}, {9, 0}}, {0, 255}, 
                    ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {9, 15}, PlotRange -> {{0, 9}, {0, 15}}, 
                    ImageSize -> Magnification[1]], ImageSize -> {35, 30}, 
                   Alignment -> Center], 
                  ButtonFunction :> (
                   NotebookLocate[{
                    "EIWL2-42-string-patterns-and-templates.nb", ""}, 
                    FrontEnd`HistoryData :> {
                    EvaluationNotebook[]}]& ), Appearance -> None, Background -> 
                  RGBColor[0.835294, 0.364706, 0.0196078], Evaluator -> 
                  Automatic, Method -> "Preemptive"]}, 
               Dynamic[
                CurrentValue["MouseOver"]], ImageSize -> Automatic, 
               FrameMargins -> 0], "\"Cadenas de caracteres y plantillas \"", 
              TooltipDelay -> 0.15, LabelStyle -> "TextStyling"], 
             Annotation[#, "Cadenas de caracteres y plantillas ", 
              "Tooltip"]& ]}, "RowWithSeparators"], Alignment -> Right], 
         ImageSize -> {100, 30}, FrameMargins -> {{0, 6}, {0, 0}}, Alignment -> 
         Right], 
        ActionMenuBox[
         PaneSelectorBox[{True -> PanelBox[
             GraphicsBox[
              TagBox[
               RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UBAkIQ3ELED8////Jf/pA0D2/KWTXSB7ZtPBPrA9DKOAYgAMR1Eg9gPiABpi
P6g912mcLmAAZM9XOtkFsicKiNcD8QYaYpD5UQOdXoYD+E/HMooO9iDbR7c6
BQDxtyEt
                "], {{0, 16}, {27, 0}}, {0, 255}, ColorFunction -> 
                RGBColor], 
               BoxForm`ImageTag[
               "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                Magnification -> 1], Selectable -> False], DefaultBaseStyle -> 
              "ImageGraphics", ImageSize -> Magnification[1], 
              ImageSizeRaw -> {27, 16}, PlotRange -> {{0, 27}, {0, 16}}], 
             Appearance -> None, Background -> 
             RGBColor[0.835294, 0.364706, 0.0196078], ImageSize -> {35, 30}, 
             Alignment -> Center], False -> PanelBox[
             GraphicsBox[
              TagBox[
               RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UBAkIQ3ELED8////Jf/pA0D2/KWTXSB7ZtPBPrA9DKOAYgAMR1Eg9gPiABpi
P6g912mcLmAAZM9XOtkFsicKiNcD8QYaYpD5UQOdXoYD+E/HMooO9iDbR7c6
BQDxtyEt
                "], {{0, 16}, {27, 0}}, {0, 255}, ColorFunction -> 
                RGBColor], 
               BoxForm`ImageTag[
               "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                Magnification -> 1], Selectable -> False], DefaultBaseStyle -> 
              "ImageGraphics", ImageSize -> Magnification[1], 
              ImageSizeRaw -> {27, 16}, PlotRange -> {{0, 27}, {0, 16}}], 
             Appearance -> None, Background -> 
             RGBColor[0.952941, 0.509804, 0], ImageSize -> {35, 30}, 
             Alignment -> Center]}, 
          Dynamic[
           CurrentValue["MouseOver"]]], {
         "Prefacio" :> 
          NotebookLocate[{"EIWL2-0a-preface.nb", ""}, FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "\[DownQuestion]Qu\[EAcute] es Wolfram Language?" :> 
          NotebookLocate[{"EIWL2-0b-what-is-the-wolfram-language.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "Aspectos pr\[AAcute]cticos en el uso de Wolfram Language" :> 
          NotebookLocate[{
            "EIWL2-0c-practicalities-of-using-the-wolfram-language.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], "Otros recursos" :> 
          NotebookLocate[{"EIWL2-0d-other-resources.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "Sobre la traducci\[OAcute]n al espa\[NTilde]ol" :> 
          NotebookLocate[{"EIWL2-0e-translation-notes.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "\[ThickSpace]\[ThickSpace]\[ThinSpace]1\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]Inicio: aritm\[EAcute]tica elemental" :> 
          NotebookLocate[{
            "EIWL2-01-starting-out-elementary-arithmetic.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "\[ThickSpace]\[ThickSpace]\[ThinSpace]2\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]Introducci\[OAcute]n a las funciones" :> 
          NotebookLocate[{"EIWL2-02-introducing-functions.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "\[ThickSpace]\[ThickSpace]\[ThinSpace]3\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]Un primer vistazo a las listas" :> 
          NotebookLocate[{"EIWL2-03-first-look-at-lists.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "\[ThickSpace]\[ThickSpace]\[ThinSpace]4\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]Visualizaci\[OAcute]n de listas" :> 
          NotebookLocate[{"EIWL2-04-displaying-lists.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "\[ThickSpace]\[ThickSpace]\[ThinSpace]5\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]Operaciones con listas" :> 
          NotebookLocate[{"EIWL2-05-operations-on-lists.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "\[ThickSpace]\[ThickSpace]\[ThinSpace]6\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]Construcci\[OAcute]n de tablas" :> 
          NotebookLocate[{"EIWL2-06-making-tables.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "\[ThickSpace]\[ThickSpace]\[ThinSpace]7\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]Colores y estilos" :> 
          NotebookLocate[{"EIWL2-07-colors-and-styles.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "\[ThickSpace]\[ThickSpace]\[ThinSpace]8\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]Objetos gr\[AAcute]ficos elementales" :> 
          NotebookLocate[{"EIWL2-08-basic-graphics-objects.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "\[ThickSpace]\[ThickSpace]\[ThinSpace]9\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]Manipulaci\[OAcute]n interactiva" :> 
          NotebookLocate[{"EIWL2-09-interactive-manipulation.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "10\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]Im\[AAcute]\
genes" :> NotebookLocate[{"EIWL2-10-images.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "11\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]Cadenas de \
caracteres y texto" :> 
          NotebookLocate[{"EIWL2-11-strings-and-text.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "12\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]Sonido" :> 
          NotebookLocate[{"EIWL2-12-sound.nb", ""}, FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "13\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]Arreglos o \
listas de listas" :> 
          NotebookLocate[{"EIWL2-13-arrays-or-lists-of-lists.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "14\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]Coordenadas \
y gr\[AAcute]ficos" :> 
          NotebookLocate[{"EIWL2-14-coordinates-and-graphics.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "15\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]El alcance \
de Wolfram Language" :> 
          NotebookLocate[{
            "EIWL2-15-the-scope-of-the-wolfram-language.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "16\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]Datos del \
mundo real" :> 
          NotebookLocate[{"EIWL2-16-real-world-data.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "17\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]Unidades" :> 
          NotebookLocate[{"EIWL2-17-units.nb", ""}, FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "18\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
Geocomputaci\[OAcute]n" :> 
          NotebookLocate[{"EIWL2-18-geocomputation.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "19\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]Fechas y \
horas" :> NotebookLocate[{"EIWL2-19-dates-and-times.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "20\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]Opciones" :> 
          NotebookLocate[{"EIWL2-20-options.nb", ""}, FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "21\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]Grafos y \
redes" :> NotebookLocate[{"EIWL2-21-graphs-and-networks.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "22\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]Aprendizaje \
autom\[AAcute]tico" :> 
          NotebookLocate[{"EIWL2-22-machine-learning.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "23\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]M\[AAcute]s \
sobre n\[UAcute]meros" :> 
          NotebookLocate[{"EIWL2-23-more-about-numbers.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "24\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]M\[AAcute]s \
formas de visualizaci\[OAcute]n" :> 
          NotebookLocate[{"EIWL2-24-more-forms-of-visualization.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "25\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]Maneras de \
aplicar funciones" :> 
          NotebookLocate[{"EIWL2-25-ways-to-apply-functions.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "26\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]Funciones \
puras an\[OAcute]nimas" :> 
          NotebookLocate[{"EIWL2-26-pure-anonymous-functions.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "27\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]Aplicaci\
\[OAcute]n repetida de funciones " :> 
          NotebookLocate[{"EIWL2-27-applying-functions-repeatedly.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "28\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]Pruebas y \
condicionales" :> 
          NotebookLocate[{"EIWL2-28-tests-and-conditionals.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "29\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]M\[AAcute]s \
sobre las funciones puras" :> 
          NotebookLocate[{"EIWL2-29-more-about-pure-functions.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "30\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
Reorganizaci\[OAcute]n de listas" :> 
          NotebookLocate[{"EIWL2-30-rearranging-lists.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "31\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]Partes de \
listas" :> NotebookLocate[{"EIWL2-31-parts-of-lists.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "32\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]Patrones" :> 
          NotebookLocate[{"EIWL2-32-patterns.nb", ""}, FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "33\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]Expresiones \
y su estructura" :> 
          NotebookLocate[{"EIWL2-33-expressions-and-their-structure.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "34\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
Asociaciones" :> 
          NotebookLocate[{"EIWL2-34-associations.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "35\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]Comprensi\
\[OAcute]n del lenguaje natural" :> 
          NotebookLocate[{"EIWL2-35-natural-language-understanding.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "36\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]Construcci\
\[OAcute]n de sitios web y aplicaciones" :> 
          NotebookLocate[{"EIWL2-36-creating-websites-and-apps.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "37\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]Composici\
\[OAcute]n y visualizaci\[OAcute]n" :> 
          NotebookLocate[{"EIWL2-37-layout-and-display.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "38\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]Asignaci\
\[OAcute]n de nombres a cosas" :> 
          NotebookLocate[{"EIWL2-38-assigning-names-to-things.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "39\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]Valores \
inmediatos y diferidos" :> 
          NotebookLocate[{"EIWL2-39-immediate-and-delayed-values.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "40\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]Funciones \
definidas por el usuario" :> 
          NotebookLocate[{"EIWL2-40-defining-your-own-functions.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "41\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]M\[AAcute]s \
informaci\[OAcute]n sobre los patrones" :> 
          NotebookLocate[{"EIWL2-41-more-about-patterns.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "42\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]Cadenas de \
caracteres y plantillas " :> 
          NotebookLocate[{"EIWL2-42-string-patterns-and-templates.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "43\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]C\[OAcute]\
mo guardar cosas" :> 
          NotebookLocate[{"EIWL2-43-storing-things.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "44\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]Importar y \
exportar" :> 
          NotebookLocate[{"EIWL2-44-importing-and-exporting.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "45\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]Conjuntos \
de datos" :> 
          NotebookLocate[{"EIWL2-45-datasets.nb", ""}, FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "46\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]C\[OAcute]\
mo escribir c\[OAcute]digo de buena calidad" :> 
          NotebookLocate[{"EIWL2-46-writing-good-code.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], 
          "47\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]Depuraci\
\[OAcute]n de c\[OAcute]digo" :> 
          NotebookLocate[{"EIWL2-47-debugging-your-code.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], "Lo que no se vio en el libro" :> 
          NotebookLocate[{"EIWL2-what-we-havent-discussed.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], "Ep\[IAcute]logo: ser un programador" :> 
          NotebookLocate[{"EIWL2-being-a-programmer.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], "Respuestas a los ejercicios" :> 
          NotebookLocate[{"EIWL2-answers-to-exercises.nb", ""}, 
            FrontEnd`HistoryData :> {
              EvaluationNotebook[]}], "\[CapitalIAcute]ndice" :> 
          NotebookLocate[{"EIWL2-book-index.nb", ""}, FrontEnd`HistoryData :> {
              EvaluationNotebook[]}]}, Appearance -> None]}}, 
      GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Center}}}, 
      GridBoxItemSize -> {
       "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]], 
   "Text", ShowCellBracket -> False, CellFrame -> {{0, 0}, {3, 0}}, 
   Selectable -> False, CellFrameColor -> 
   RGBColor[0.835294, 0.364706, 0.0196078], CellMargins -> {{0, 0}, {0, -1}}, 
   CellFrameMargins -> {{27, 0}, {1, 7}}, Background -> 
   RGBColor[0.952941, 0.509804, 0], CellTags -> "DockedCellLogoCell"], 
  Cell["SEGUNDA EDICI\[CapitalOAcute]N", "Text", FontFamily -> 
   "Source Sans Pro", CellFrame -> {{0, 0}, {3, 0}}, ShowCellBracket -> False,
    CellMargins -> {{0, 0}, {-1, -1}}, CellFrameMargins -> {{66, 0}, {2, 4}}, 
   CellFrameColor -> RGBColor[0.952941, 0.509804, 0], FontSize -> 10, 
   FontTracking -> "Extended", FontColor -> RGBColor[1, 0.929412, 0.721569], 
   Background -> RGBColor[0.862745, 0.309804, 0], CellTags -> 
   "DockedCellLogoCell"]},
PrintingStartingPageNumber->332,
PageHeaders->{{
   Cell[
    TextData[{
      StyleBox[
       CounterBox["Page"], "PageNumber"], 
      StyleBox[
      "    An Elementary Introduction to the Wolfram Language", "Header"]}], 
    "Header", CellMargins -> {{37, Inherited}, {Inherited, Inherited}}], None,
    None}, {None, None, 
   Cell[
    TextData[{
      StyleBox[
       CounterBox["Section"], "Header"], 
      StyleBox[" | More about Patterns \[LongDash] wolfr.am/eiwl-", "Header"], 
      StyleBox[
       CounterBox["Section"], "Header"], 
      StyleBox["    ", "Header"], 
      StyleBox[
       CounterBox["Page"], "PageNumber"]}], "Header", 
    CellMargins -> {{Inherited, 17}, {Inherited, Inherited}}]}},
PrintingOptions->{"FirstPageHeader"->True},
ShowCellBracket->Automatic,
ShowAutoSpellCheck->False,
ShowPredictiveInterface->False,
ShowSyntaxStyles->False,
AutoStyleOptions->{"HighlightMisspelledWords"->False},
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, \
2018)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    CellGroupData[{
      Cell[
      "Style Environments", "Section", 
       CellChangeTimes -> {{3.64661165091824*^9, 3.646611654013329*^9}, 
         3.6485723794335403`*^9, 3.651347081728628*^9, 3.651347179462186*^9, 
         3.651347384135805*^9, 3.651348171662589*^9}], 
      Cell[
       StyleData[All, "Working"], CellInsertionPointCell -> 
       FEPrivate`FrontEndResource["FEExpressions", "CellInsertionMenu"], 
       CreateCellID -> True, $CellContext`GhostCellInEmptyNotebook -> False], 
      
      Cell[
       StyleData[All, "Printout"], 
       PrintingOptions -> {
        "PageSize" -> {504, 720}, "PrintRegistrationMarks" -> True}, 
       Magnification -> 0.6]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell["Styles for Headers and Footers", "Section"], 
      Cell[
       StyleData["Header"], StyleMenuListing -> None, FontFamily -> "Verdana",
        FontSize -> 7, FontSlant -> "Plain", FontColor -> GrayLevel[0.6]], 
      Cell[
       StyleData["PageNumber"], CellMargins -> {{0, 0}, {4, 1}}, 
       StyleMenuListing -> None, FontFamily -> "Verdana", FontSize -> 7, 
       FontWeight -> "Bold", FontSlant -> "Plain", FontColor -> 
       GrayLevel[0]]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell[
      "WPL Specific", "Section", 
       CellChangeTimes -> {{3.6556608433734913`*^9, 3.6556608489412746`*^9}}], 
      Cell[
       StyleData["Link"], FontFamily -> "Source Sans Pro", FontSize :> 
       If[CurrentValue[
           EvaluationCell[], "FontFamily"] === "Source Sans Pro", Inherited, 
         If[CurrentValue[
            EvaluationCell[], "FontFamily"] === "WolframCodeSans", Inherited, 
          Inherited 0.9]], FontColor -> GrayLevel[0]], 
      Cell[
       StyleData["CodeLink"], 
       ButtonBoxOptions -> {
        Appearance -> None, ButtonFunction :> (FEPrivate`FrontEndExecute[
           FrontEndToken["OpenHelpLink", {
             Part[#, 1], Null}]]& ), ButtonSource -> ButtonContents, 
         Evaluator -> None, Method -> "Preemptive"}]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell[
      "Custom Styles", "Section", 
       CellChangeTimes -> {{3.646611660445352*^9, 3.646611669493331*^9}}], 
      Cell[
       StyleData["Notebook"], PageWidth -> 700, 
       PrintingOptions -> {
        "InnerOuterMargins" -> {35, 16}, "PaperOrientation" -> "Portrait", 
         "PaperSize" -> {504, 720}, 
         "PrintingMargins" -> {{20, 20}, {54, 54}}}, CellLabelAutoDelete -> 
       False, ShowSyntaxStyles -> True, 
       AutoStyleOptions -> {
        "FormattingErrorTooltips" -> False, "HighlightComments" -> False, 
         "HighlightEmphasizedSyntaxErrors" -> False, 
         "HighlightExcessArguments" -> False, "HighlightFormattingErrors" -> 
         False, "HighlightGlobalToLocalScopeConflicts" -> False, 
         "HighlightGraphicsCompatibilityProblems" -> False, 
         "HighlightLocalScopeConflicts" -> False, "HighlightMissingArguments" -> 
         False, "HighlightNoKernelPresent" -> False, 
         "HighlightOrderOfEvaluationConflicts" -> False, "HighlightStrings" -> 
         True, "HighlightSymbolContexts" -> False, "HighlightSymbolShadowing" -> 
         False, "HighlightSyntaxErrors" -> False, "HighlightUndefinedSymbols" -> 
         False, "HighlightUnknownOptions" -> False, 
         "HighlightUnwantedAssignments" -> False}, MenuSortingValue -> None, 
       GraphicsBoxOptions -> {ImageSize -> 240}, 
       Graphics3DBoxOptions -> {ImageSize -> 240}], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Title"], CellMargins -> {{64, Inherited}, {50, 72}}, 
          MenuCommandKey -> None, FontFamily -> "Verdana", FontSize -> 42, 
          FontWeight -> "Bold", FontColor -> GrayLevel[0.4]], 
         Cell[
          StyleData["Title", "Printout"], 
          CellMargins -> {{64, Inherited}, {50, 72}}]}, Closed]], 
      Cell[
       StyleData["Chapter"], MenuCommandKey -> None], 
      Cell[
       StyleData["Subchapter"], MenuCommandKey -> None], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Section"], CellFrame -> {{0, 0}, {0, 0}}, CellDingbat -> 
          Cell[
            TextData[
             CounterBox["Section"], 
             StyleBox[
             "|\[NegativeThinSpace]", FontColor -> 
              RGBColor[
               0.9019607843137255, 0.4117647058823529, 0.027450980392156862`],
               FontFamily -> "Courier", FontSize -> 36, FontWeight -> Plain]],
             "SectionNumber"], CellMargins -> {{96, Inherited}, {12, 44}}, 
          Evaluatable -> True, CellGroupingRules -> {"SectionGrouping", 60}, 
          PageBreakAbove -> True, ShowCellLabel -> False, 
          CellFrameLabelMargins -> {{2, Inherited}, {Inherited, Inherited}}, 
          CellChangeTimes -> {3.652728456208679*^9, 3.652728527108994*^9}, 
          CounterIncrements -> "Section", 
          CounterAssignments -> {{"Subsection", 0}, {"Subsubsection", 0}, {
            "Exercise", 0}}, FontFamily -> "Source Sans Pro Semibold", 
          FontSize -> 26, FontSlant -> "Plain", FontColor -> 
          RGBColor[
           0.9019607843137255, 0.4117647058823529, 0.027450980392156862`], 
          InterpretationBoxOptions -> {Editable -> True}], 
         Cell[
          StyleData["Section", "Printout"], 
          CellMargins -> {{96, Inherited}, {12, 2}}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["SectionDoubleDigit"], CellFrame -> {{0, 0}, {0, 0}}, 
          CellDingbat -> Cell[
            TextData[
             CounterBox["Section"], 
             StyleBox[
             "|\[NegativeThinSpace]", FontColor -> 
              RGBColor[
               0.9019607843137255, 0.4117647058823529, 0.027450980392156862`],
               FontFamily -> "Courier", FontSize -> 36, FontWeight -> Plain]],
             "SectionNumber"], CellMargins -> {{112, Inherited}, {12, 44}}, 
          Evaluatable -> True, CellGroupingRules -> {"SectionGrouping", 60}, 
          PageBreakAbove -> True, ShowCellLabel -> False, 
          CellFrameLabelMargins -> {{2, Inherited}, {Inherited, Inherited}}, 
          CellChangeTimes -> {3.652728456208679*^9, 3.652728527108994*^9}, 
          CounterIncrements -> "Section", 
          CounterAssignments -> {{"Subsection", 0}, {"Subsubsection", 0}, {
            "Exercise", 0}}, FontFamily -> "Source Sans Pro Semibold", 
          FontSize -> 26, FontSlant -> "Plain", FontColor -> 
          RGBColor[
           0.9019607843137255, 0.4117647058823529, 0.027450980392156862`], 
          InterpretationBoxOptions -> {Editable -> True}], 
         Cell[
          StyleData["SectionDoubleDigit", "Printout"], 
          CellMargins -> {{112, Inherited}, {12, 2}}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["SectionNumber"], CellBaseline -> Baseline, FontFamily -> 
          "Source Sans Pro Semibold", FontSize -> 26, FontColor -> 
          RGBColor[
           0.9019607843137255, 0.4117647058823529, 0.027450980392156862`]], 
         Cell[
          StyleData["SectionNumber", "Printout"]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["SectionInline"], FontFamily -> 
          "Source Sans Pro Semibold", FontColor -> 
          RGBColor[
           0.9019607843137255, 0.4117647058823529, 0.027450980392156862`]], 
         Cell[
          StyleData["SectionInline", "Printout"]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["SectionNoDingbat"], 
          CellMargins -> {{64, Inherited}, {12, 44}}, Evaluatable -> True, 
          CellGroupingRules -> {"SectionGrouping", 60}, PageBreakAbove -> 
          True, ShowCellLabel -> False, 
          CellFrameLabelMargins -> {{2, Inherited}, {Inherited, Inherited}}, 
          CellChangeTimes -> {3.652728456208679*^9, 3.652728527108994*^9}, 
          CounterIncrements -> "Section", 
          CounterAssignments -> {{"Subsection", 0}, {"Subsubsection", 0}, {
            "Exercise", 0}}, FontFamily -> "Source Sans Pro Semibold", 
          FontSize -> 26, FontSlant -> "Plain", FontColor -> 
          RGBColor[
           0.9019607843137255, 0.4117647058823529, 0.027450980392156862`], 
          InterpretationBoxOptions -> {Editable -> True}], 
         Cell[
          StyleData["SectionNoDingbat", "Printout"], 
          CellMargins -> {{64, Inherited}, {12, 2}}]}, Closed]], 
      Cell[
       StyleData["AnswerKeyNumberedSection"], 
       CellMargins -> {{64, Inherited}, {8, 28}}, Evaluatable -> True, 
       CellGroupingRules -> {"SectionGrouping", 60}, PageBreakAbove -> True, 
       ShowCellLabel -> False, 
       CellFrameLabelMargins -> {{2, Inherited}, {Inherited, Inherited}}, 
       CellChangeTimes -> {3.652728456208679*^9, 3.652728527108994*^9}, 
       CounterIncrements -> "Section", 
       CounterAssignments -> {{"Subsection", 0}, {"Subsubsection", 0}, {
         "Exercise", 0}}, FontFamily -> "Source Sans Pro Semibold", FontSize -> 
       18, FontSlant -> "Plain", FontColor -> 
       RGBColor[
        0.9019607843137255, 0.4117647058823529, 0.027450980392156862`], 
       InterpretationBoxOptions -> {Editable -> True}], 
      Cell[
       StyleData["AnswerKeySectionNumber"], CellBaseline -> Baseline, 
       FontFamily -> "Source Sans Pro Semibold", FontSize -> 18, FontColor -> 
       RGBColor[
        0.9019607843137255, 0.4117647058823529, 0.027450980392156862`]], 
      Cell[
       StyleData["IndexLinkGuide"], 
       CellMargins -> {{64, Inherited}, {48, 28}}, Evaluatable -> True, 
       CellGroupingRules -> {"SectionGrouping", 60}, PageBreakAbove -> True, 
       ShowCellLabel -> False, 
       CellFrameLabelMargins -> {{2, Inherited}, {Inherited, Inherited}}, 
       CellChangeTimes -> {3.652728456208679*^9, 3.652728527108994*^9}, 
       CounterIncrements -> "Section", 
       CounterAssignments -> {{"Subsection", 0}, {"Subsubsection", 0}, {
         "Exercise", 0}}, FontFamily -> "Source Sans Pro", FontSize -> 14, 
       FontSlant -> "Plain", FontColor -> 
       RGBColor[
        0.9019607843137255, 0.4117647058823529, 0.027450980392156862`], 
       InterpretationBoxOptions -> {Editable -> True}], 
      Cell[
       StyleData["Index"], MenuSortingValue -> 10000, FontFamily -> 
       "Source Sans Pro", FontSize -> 11], 
      Cell[
       StyleData["IndexSubentry"], MenuSortingValue -> 10000, FontFamily -> 
       "Source Sans Pro", FontSize -> 11], 
      Cell[
       StyleData["FunctionName"], MenuSortingValue -> 10000, FontFamily -> 
       "Source Sans Pro Semibold", FontWeight -> "Bold"], 
      Cell[
       StyleData["IndexColumn"], 
       CellMargins -> {{66, 0}, {Inherited, Inherited}}, TabSpacings -> {2.}, 
       MenuSortingValue -> 10000, FontFamily -> "Source Sans Pro", 
       GridBoxOptions -> {
        GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
         GridBoxItemSize -> {"Columns" -> {{25}}}, 
         GridBoxSpacings -> {"Columns" -> {{2}}}}], 
      Cell[
       StyleData["IndexSubsection"], 
       CellMargins -> {{64, Inherited}, {9, 28}}, 
       CellGroupingRules -> {"SectionGrouping", 40}, MenuSortingValue -> 
       10000, FontFamily -> "Source Sans Pro", FontSize -> 24], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Subsection"], CellMargins -> {{64, Inherited}, {12, 32}},
           FontFamily -> "Source Sans Pro Semibold", FontSize -> 18, 
          FontColor -> 
          RGBColor[
           0.9019607843137255, 0.4117647058823529, 0.027450980392156862`]], 
         Cell[
          StyleData["Subsection", "Printout"], 
          CellMargins -> {{64, Inherited}, {12, 32}}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["ResourcesSubsection"], 
          CellMargins -> {{64, Inherited}, {4, 16}}, FontFamily -> 
          "Source Sans Pro Semibold", FontSize -> 15, FontSlant -> "Plain", 
          FontColor -> GrayLevel[0]], 
         Cell[
          StyleData["ResourcesSubsection", "Printout"], 
          CellMargins -> {{64, Inherited}, {4, 16}}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Subsubsection"], 
          CellMargins -> {{64, Inherited}, {6, 12}}, FontFamily -> 
          "Source Sans Pro Semibold", FontSize -> 16, FontColor -> 
          RGBColor[
           0.9019607843137255, 0.4117647058823529, 0.027450980392156862`]], 
         Cell[
          StyleData["Subsubsection", "Printout"], 
          CellMargins -> {{64, Inherited}, {6, 12}}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["VocabularySection"], PageWidth -> 700, 
          CellFrame -> {{0, 0}, {0, 3}}, 
          CellMargins -> {{64, Inherited}, {8, 24}}, 
          CellGroupingRules -> {"SectionGrouping", 60}, PageBreakBelow -> 
          False, CellFrameMargins -> {{8, 8}, {4, 6}}, CellFrameColor -> 
          RGBColor[0.901961, 0.411765, 0.027451], FontFamily -> 
          "Source Sans Pro", FontSize -> 18, FontSlant -> "Italic", FontColor -> 
          RGBColor[
           0.9019607843137255, 0.4117647058823529, 0.027450980392156862`], 
          GridBoxOptions -> {GridBoxAlignment -> {}}], 
         Cell[
          StyleData["VocabularySection", "Printout"], 
          CellMargins -> {{64, Inherited}, {8, 24}}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["VocabularyTable", StyleDefinitions -> StyleData["Text"]],
           SpanMaxSize -> 1, FontFamily -> "Source Sans Pro Light", FontColor -> 
          GrayLevel[0.8], 
          GridBoxOptions -> {
           GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            GridBoxDividers -> {"Columns" -> {{False}}, "Rows" -> {False, {
                 Directive[
                  Thickness[0.5], "VocabDivColor"]}, False}}, 
            GridBoxItemStyle -> {
             "Columns" -> {"VocabularyCode", Inherited, Inherited}, 
              "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {
             "Columns" -> {{0, 1, 2, 1, 2}}, "Rows" -> {{1}}}}], 
         Cell[
          StyleData["VocabularyTable", "Printout"]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData[
          "VocabularyTable3Column", StyleDefinitions -> StyleData["Text"]], 
          SpanMaxSize -> 1, FontFamily -> "Source Sans Pro Light", FontColor -> 
          GrayLevel[0.8], 
          GridBoxOptions -> {
           GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            GridBoxDividers -> {"Columns" -> {{False}}, "Rows" -> {False, {
                 Directive[
                  Thickness[0.5], "VocabDivColor"]}, False}}, 
            GridBoxItemStyle -> {
             "Columns" -> {
               "VocabularyCode", Inherited, "VocabularyCode", Inherited, 
                Inherited}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {
             "Columns" -> {{0, 1, 2, 1, 2}}, "Rows" -> {{1}}}}], 
         Cell[
          StyleData["VocabularyTable3Column", "Printout"]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["VocabularyText"], FontFamily -> "Source Sans Pro", 
          FontSize -> 14, FontWeight -> "Plain", FontSlant -> "Plain", 
          FontColor -> GrayLevel[0.25]], 
         Cell[
          StyleData["VocabularyText", "Printout"], 
          CellMargins -> {{66, 10}, {7, 7}}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["VocabularyCode", StyleDefinitions -> StyleData["Text"]], 
          Deletable -> False, FontFamily -> "Source Sans Pro", FontSize -> 14,
           FontWeight -> "Bold", FontColor -> GrayLevel[0.25], 
          GridBoxOptions -> {
           GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            GridBoxDividers -> {
             "Columns" -> {{False}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {True, {True}, True}, "RowsIndexed" -> {}}}], 
         Cell[
          StyleData["VocabularyCode", "Printout"], FontColor -> 
          GrayLevel[0.25]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["VocabDivColor"], FontColor -> GrayLevel[0.8]], 
         Cell[
          StyleData["VocabDivColor", "Printout"]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["ExerciseSection"], PageWidth -> 700, 
          CellFrame -> {{0, 0}, {0, 3}}, 
          CellMargins -> {{64, Inherited}, {8, 30}}, Evaluatable -> True, 
          CellGroupingRules -> {"SectionGrouping", 60}, PageBreakBelow -> 
          False, ShowCellLabel -> False, CellFrameMargins -> {{8, 8}, {4, 6}},
           CellFrameColor -> RGBColor[0.901961, 0.411765, 0.027451], 
          CounterAssignments -> {{"Subsection", 0}, {"Subsubsection", 0}, {
            "Exercise", 0}}, FontFamily -> "Source Sans Pro", FontSize -> 18, 
          FontSlant -> "Italic", FontColor -> 
          RGBColor[
           0.9019607843137255, 0.4117647058823529, 0.027450980392156862`], 
          GridBoxOptions -> {GridBoxAlignment -> {}}], 
         Cell[
          StyleData["ExerciseSection", "Printout"], 
          CellMargins -> {{64, Inherited}, {8, 30}}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Exercise"], PageWidth -> 700, CellDingbat -> Cell[
            TextData[{"  ", 
              CounterBox["Section"], ".", 
              CounterBox["Exercise"]}], "ExerciseNumber", FontColor -> 
            RGBColor[
             0.9019607843137255, 0.4117647058823529, 0.027450980392156862`]], 
          ShowGroupOpener -> True, CellMargins -> {{108, Inherited}, {4, 8}}, 
          CellGroupingRules -> {"SectionGrouping", 67}, CounterIncrements -> 
          "Exercise", MenuSortingValue -> 10020, MenuCommandKey -> "2", 
          FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
          "Plain", FontSlant -> "Plain", FontColor -> GrayLevel[0.25]], 
         Cell[
          StyleData["Exercise", "Printout"], ShowGroupOpener -> False, 
          CellMargins -> {{110, Inherited}, {4, 8}}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["ExerciseNumber"], FontFamily -> "Source Sans Pro", 
          FontSize -> 14, FontWeight -> "Bold", FontColor -> GrayLevel[0.25]], 
         Cell[
          StyleData["ExerciseNumber", "Printout"]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["ExerciseSubsection"], PageWidth -> 500, 
          CellFrame -> {{False, False}, {1, False}}, 
          CellMargins -> {{64, Inherited}, {8, 18}}, 
          CellGroupingRules -> {"SectionGrouping", 60}, CellFrameColor -> 
          RGBColor[0.65, 0.6, 0.6], FontFamily -> "Source Sans Pro", FontSize -> 
          18, FontSlant -> "Italic", FontColor -> RGBColor[0.65, 0.6, 0.6]], 
         Cell[
          StyleData["ExerciseSubsection", "Printout"], 
          CellFrame -> {{False, False}, {1, False}}, CellFrameColor -> 
          RGBColor[0.65, 0.6, 0.6]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["ExerciseNote"], PageWidth -> 700, 
          CellMargins -> {{64, Inherited}, {4, 8}}, PageBreakBelow -> False, 
          MenuSortingValue -> 10050, FontFamily -> "Source Sans Pro", 
          FontSize -> 14, FontWeight -> "Plain", FontSlant -> "Plain", 
          FontColor -> GrayLevel[0.25], $CellContext`ReturnCreatesNewCell -> 
          True], 
         Cell[
          StyleData["ExerciseNote", "Printout"], 
          CellMargins -> {{64, Inherited}, {4, 8}}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["QASection"], PageWidth -> 700, 
          CellFrame -> {{0, 0}, {0, 3}}, 
          CellMargins -> {{64, Inherited}, {8, 30}}, 
          CellGroupingRules -> {"SectionGrouping", 60}, PageBreakBelow -> 
          False, CellFrameMargins -> {{8, 8}, {4, 6}}, CellFrameColor -> 
          RGBColor[0.901961, 0.411765, 0.027451], 
          CounterAssignments -> {{"Subsection", 0}, {"Subsubsection", 0}, {
            "Question", 0}}, FontFamily -> "Source Sans Pro", FontSize -> 18, 
          FontSlant -> "Italic", FontColor -> 
          RGBColor[
           0.9019607843137255, 0.4117647058823529, 0.027450980392156862`], 
          GridBoxOptions -> {GridBoxAlignment -> {}}], 
         Cell[
          StyleData["QASection", "Printout"], 
          CellMargins -> {{64, Inherited}, {8, 30}}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Question"], PageWidth -> 700, 
          CellMargins -> {{64, Inherited}, {2, 12}}, PageBreakBelow -> False, 
          CounterIncrements -> "Question", MenuSortingValue -> 10030, 
          MenuCommandKey -> "3", FontFamily -> "Source Sans Pro", FontSize -> 
          14, FontWeight -> "Bold", FontSlant -> 
          "Plain", $CellContext`ReturnCreatesNewCell -> 
          True, $CellContext`DefaultReturnCreatedCellStyle -> "Answer"], 
         Cell[
          StyleData["Question", "Printout"], 
          CellMargins -> {{65, Inherited}, {2, 12}}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Answer"], PageWidth -> 700, 
          CellMargins -> {{66, 10}, {4, 1}}, LineSpacing -> {1.125, 1., 2.}, 
          MenuSortingValue -> 10032, FontFamily -> "Source Sans Pro", 
          FontSize -> 14, FontWeight -> "Plain", FontSlant -> "Plain", 
          FontColor -> GrayLevel[0.25], $CellContext`ReturnCreatesNewCell -> 
          True, $CellContext`DefaultReturnCreatedCellStyle -> "Question"], 
         Cell[
          StyleData["Answer", "Printout"], 
          CellMargins -> {{66, 10}, {4, 1}}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["QuestionNumber"], FontFamily -> "Source Sans Pro", 
          FontSize -> 14, FontWeight -> "Bold", FontColor -> GrayLevel[0.25]], 
         Cell[
          StyleData["QuestionNumber", "Printout"]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["TechNoteSection"], PageWidth -> 700, 
          CellFrame -> {{0, 0}, {0, 3}}, 
          CellMargins -> {{64, Inherited}, {8, 30}}, 
          CellGroupingRules -> {"SectionGrouping", 60}, PageBreakBelow -> 
          False, CellFrameMargins -> {{8, 8}, {4, 6}}, CellFrameColor -> 
          RGBColor[0.901961, 0.411765, 0.027451], FontFamily -> 
          "Source Sans Pro", FontSize -> 18, FontSlant -> "Italic", FontColor -> 
          RGBColor[
           0.9019607843137255, 0.4117647058823529, 0.027450980392156862`], 
          GridBoxOptions -> {GridBoxAlignment -> {}}], 
         Cell[
          StyleData["TechNoteSection", "Printout"], 
          CellMargins -> {{64, Inherited}, {8, 30}}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["TechNote"], PageWidth -> 700, CellDingbat -> Cell[
            TextData[{"\[FilledSmallSquare]"}], FontSize -> 12, FontColor -> 
            GrayLevel[0.5]], CellMargins -> {{78, Inherited}, {4, 8}}, 
          CellChangeTimes -> {{3.651515120816633*^9, 3.651515125814807*^9}, 
            3.6515155174947033`*^9}, LineSpacing -> {1.25, 1., 2.}, 
          MenuSortingValue -> 10040, FontFamily -> "Source Sans Pro", 
          FontSize -> 14, FontWeight -> "Plain", FontSlant -> "Plain", 
          FontColor -> GrayLevel[0.25], $CellContext`ReturnCreatesNewCell -> 
          True], 
         Cell[
          StyleData["TechNote", "Printout"], 
          CellMargins -> {{82, Inherited}, {4, 8}}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["MoreExploreSection"], PageWidth -> 700, 
          CellFrame -> {{0, 0}, {0, 3}}, 
          CellMargins -> {{64, Inherited}, {8, 30}}, 
          CellGroupingRules -> {"SectionGrouping", 60}, PageBreakBelow -> 
          False, CellFrameMargins -> {{8, 8}, {4, 6}}, CellFrameColor -> 
          RGBColor[0.901961, 0.411765, 0.027451], FontFamily -> 
          "Source Sans Pro", FontSize -> 18, FontSlant -> "Italic", FontColor -> 
          RGBColor[
           0.9019607843137255, 0.4117647058823529, 0.027450980392156862`], 
          GridBoxOptions -> {GridBoxAlignment -> {}}], 
         Cell[
          StyleData["MoreExploreSection", "Printout"], 
          CellMargins -> {{64, Inherited}, {8, 30}}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["MoreExplore"], PageWidth -> 700, 
          CellMargins -> {{64, Inherited}, {4, 8}}, PageBreakBelow -> False, 
          MenuSortingValue -> 10050, FontFamily -> "Source Sans Pro", 
          FontSize -> 14, FontWeight -> "Plain", FontSlant -> "Plain", 
          FontColor -> GrayLevel[0], $CellContext`ReturnCreatesNewCell -> 
          True], 
         Cell[
          StyleData["MoreExplore", "Printout"], 
          CellMargins -> {{64, Inherited}, {4, 8}}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["MoreExploreShortURL"], 
          CellMargins -> {{64, Inherited}, {4, 8}}, PageBreakBelow -> False, 
          FontFamily -> "Source Sans Pro Light", FontSize -> 14, FontSlant -> 
          "Plain", FontColor -> GrayLevel[0]], 
         Cell[
          StyleData["MoreExploreShortURL", "Printout"], 
          CellMargins -> {{64, Inherited}, {4, 8}}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Text"], CellMargins -> {{66, 10}, {4, 14}}, FontFamily -> 
          "Baskerville", FontSize -> 18, FontColor -> 
          GrayLevel[0], $CellContext`ReturnCreatesNewCell -> True], 
         Cell[
          StyleData["Text", "Printout"], CellMargins -> {{66, 10}, {7, 7}}]}, 
        Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["ResourcesText"], CellMargins -> {{66, 10}, {2, 0}}, 
          FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
          "Plain", FontSlant -> "Plain", FontColor -> 
          GrayLevel[0], $CellContext`ReturnCreatesNewCell -> True], 
         Cell[
          StyleData["ResourcesText", "Printout"], 
          CellMargins -> {{66, 10}, {2, 0}}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["ResourcesLink"], CellMargins -> {{66, 10}, {2, 0}}, 
          FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
          "Plain", FontSlant -> "Italic", FontColor -> 
          GrayLevel[0], $CellContext`ReturnCreatesNewCell -> True], 
         Cell[
          StyleData["ResourcesLink", "Printout"], 
          CellMargins -> {{66, 10}, {2, 0}}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["CodeCaption"], CellFrame -> {{0, 0}, {0, 0}}, 
          CellMargins -> {{66, 10}, {4, 12}}, PageBreakBelow -> False, 
          CellFrameColor -> GrayLevel[0.4], MenuSortingValue -> 10010, 
          MenuCommandKey -> "1", FontFamily -> "Source Sans Pro", FontSize -> 
          16, FontColor -> GrayLevel[0.25]], 
         Cell[
          StyleData["CodeCaption", "Printout"], 
          CellMargins -> {{66, 10}, {4, 12}}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Input"], CellMargins -> {{99, 10}, {3, 7}}, SpanMaxSize -> 
          1, FontSize -> 15], 
         Cell[
          StyleData["Input", "Printout"], CellMargins -> {{99, 10}, {3, 7}}]},
         Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Output"], CellMargins -> {{99, 10}, {14, 7}}, FontSize -> 
          15], 
         Cell[
          StyleData["Output", "Printout"], 
          CellMargins -> {{99, 10}, {14, 7}}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["InputOnly"], CellMargins -> {{99, 10}, {25, 10}}, 
          SpanMaxSize -> 1, MenuSortingValue -> 1500, FontSize -> 15], 
         Cell[
          StyleData["InputOnly", "Printout"], 
          CellMargins -> {{99, 10}, {15, 10}}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["CellLabel"], 
          CellLabelMargins -> {{12, Inherited}, {Inherited, Inherited}}, 
          LanguageCategory -> None, StyleMenuListing -> None, FontFamily -> 
          "Helvetica Neue", FontSize -> 9, FontWeight -> "Plain", FontSlant -> 
          "Plain", FontColor -> GrayLevel[0.5]], 
         Cell[
          StyleData["CellLabel", "Printout"], FontSize -> 8, FontColor -> 
          GrayLevel[0.5]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Message"], Editable -> False, 
          CellMargins -> {{66, Inherited}, {Inherited, Inherited}}, 
          CellGroupingRules -> "OutputGrouping", TextClipboardType -> 
          "PlainText", PageBreakWithin -> False, GroupPageBreakWithin -> 
          False, GeneratedCell -> True, CellAutoOverwrite -> True, 
          ShowCellLabel -> False, DefaultFormatType -> 
          DefaultOutputFormatType, ContextMenu -> 
          FEPrivate`FrontEndResource["ContextMenus", "Output"], 
          ShowAutoStyles -> False, ShowSyntaxStyles -> False, 
          AutoStyleOptions -> {
           "StringStyle" -> None, "SyntaxErrorStyle" -> None}, 
          HyphenationOptions -> {"HyphenationCharacter" -> "\[Continuation]"},
           AutoItalicWords -> {}, AutoQuoteCharacters -> {}, 
          PasteAutoQuoteCharacters -> {}, LanguageCategory -> None, 
          FormatType -> InputForm, ShowStringCharacters -> False, 
          CounterIncrements -> "Message", MenuSortingValue -> 1600, 
          StyleMenuListing -> None, FontFamily :> 
          CurrentValue["PanelFontFamily"], FontSize -> 11, FontColor -> 
          RGBColor[0.5072, 0.16933, 0.15221], $CellContext`StripStyleOnPaste -> 
          True], 
         Cell[
          StyleData["Message", "Printout"], 
          CellMargins -> {{100, Inherited}, {Inherited, Inherited}}, 
          CellFrameLabels -> {{None, None}, {None, None}}, FontColor -> 
          GrayLevel[0]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["ExerciseInput", StyleDefinitions -> StyleData["Input"]], 
          CellMargins -> {{88, 10}, {4, 7}}, ShowCellLabel -> False, 
          SpanMaxSize -> 1, FontSize -> 
          14, $CellContext`GeneratedCellStyles -> {
           "Output" -> "ExerciseOutput"}], 
         Cell[
          StyleData["ExerciseInput", "Printout"], 
          CellMargins -> {{88, 10}, {4, 7}}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData[
          "ExerciseOutput", StyleDefinitions -> StyleData["Output"]], 
          CellMargins -> {{88, 10}, {10, 4}}, ShowCellLabel -> False, 
          FontSize -> 14], 
         Cell[
          StyleData["ExerciseOutput", "Printout"], 
          CellMargins -> {{88, 10}, {10, 4}}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Picture"], CellMargins -> {{66, 10}, {10, 10}}, 
          CellGroupingRules -> "GraphicsGrouping", StyleMenuListing -> None], 
         
         Cell[
          StyleData["Picture", "Printout"], 
          CellMargins -> {{66, 10}, {8, 8}}]}, Closed]], 
      Cell[
       StyleData["ExerciseSummaryCell"], PageWidth -> 700, CellFrame -> 0, 
       CellMargins -> {{64, Inherited}, {8, 10}}, 
       CellGroupingRules -> {"SectionGrouping", 64}, PageBreakBelow -> False, 
       ShowCellLabel -> False, CellFrameMargins -> 0, ShowStringCharacters -> 
       False, FontFamily -> "Source Sans Pro", FontSize -> 18, FontColor -> 
       RGBColor[1, 1, 1], 
       GridBoxOptions -> {GridBoxBackground -> {"Columns" -> {{
              RGBColor[0.990997, 0.539528, 0.155779], 
              RGBColor[0.989487, 0.434699, 0.0320439]}}, "Rows" -> {{None}}}, 
         GridBoxItemSize -> {"Columns" -> {
             Scaled[0.7], 
             Scaled[0.3]}, "Rows" -> {{Automatic}}}}], 
      Cell[
       StyleData["ExerciseSummaryHeading"], ShowStringCharacters -> False, 
       FontFamily -> "Source Sans Pro", FontSize -> 18, FontColor -> 
       RGBColor[1, 1, 1]], 
      Cell[
       StyleData["ExerciseSummarySubheading"], ShowStringCharacters -> False, 
       FontFamily -> "Source Sans Pro", FontSize -> 15, FontColor -> 
       RGBColor[1., 0.9294117647058824, 0.7215686274509804]], 
      Cell[
       StyleData["ExercisePreviewButtonText"], ShowStringCharacters -> False, 
       FontFamily -> "Source Sans Pro", FontSize -> 14, FontSlant -> "Plain", 
       FontColor -> RGBColor[0.6, 0.6, 0.6]], 
      Cell[
       StyleData["ExercisePreviewButtonTextHighlight"], ShowStringCharacters -> 
       False, FontFamily -> "Source Sans Pro", FontSize -> 14, FontSlant -> 
       "Plain", FontColor -> 
       RGBColor[
        0.9019607843137255, 0.4117647058823529, 0.027450980392156862`]]}, 
     Open]], 
   Cell[
    CellGroupData[{
      Cell[
      "Inline and special formatting", "Section", 
       CellChangeTimes -> {{3.646681732592888*^9, 3.646681749414035*^9}}], 
      Cell[
       StyleData["Graphics"], MenuSortingValue -> None], 
      Cell[
       StyleData["Graphics3D"], MenuSortingValue -> None], 
      Cell[
       StyleData["StandardForm"], 
       InputAutoReplacements -> {
        "->" -> "\[Rule]", ":>" -> "\[RuleDelayed]", "<=" -> "\[LessEqual]", 
         ">=" -> "\[GreaterEqual]", "!=" -> "\[NotEqual]", "==" -> "\[Equal]",
          "@>" -> "\\[InlinePart]", "<->" -> "\[UndirectedEdge]", ParentList},
        LineSpacing -> {1.25, 0, 2}, SingleLetterItalics -> False, 
       StyleMenuListing -> None, FontFamily -> "Source Sans Pro", 
       PrivateFontOptions -> {"OperatorSubstitution" -> True}], 
      Cell[
       StyleData["OutputForm"], PageWidth -> DirectedInfinity[1], 
       TextAlignment -> Left, LineSpacing -> {0.6, 1}, 
       AutoQuoteCharacters -> {}, PasteAutoQuoteCharacters -> {}, 
       StyleMenuListing -> None, FontFamily -> "Source Sans Pro", 
       PrivateFontOptions -> {"OperatorSubstitution" -> True}], 
      Cell[
       StyleData["InputForm"], PageWidth -> DirectedInfinity[1], 
       InputAutoReplacements -> {}, AllowInlineCells -> False, Hyphenation -> 
       False, AutoQuoteCharacters -> {}, PasteAutoQuoteCharacters -> {}, 
       AutoSpacing -> False, NumberMarks -> True, AutoNumberFormatting -> 
       False, StyleMenuListing -> None, FontFamily -> "Source Sans Pro", 
       PrivateFontOptions -> {"OperatorSubstitution" -> True}], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["DetailsLink"], FontFamily -> "Source Sans Pro", FontSize :> 
          If[CurrentValue[
              EvaluationCell[], "FontFamily"] === "Source Sans Pro", 
            Inherited, 
            If[CurrentValue[
               EvaluationCell[], "FontFamily"] === "WolframCodeSans", 
             Inherited, Inherited 0.9]], FontColor -> GrayLevel[0], 
          ButtonBoxOptions -> {
           ButtonFunction :> (
             Function[$CellContext`t, 
              NotebookFind[$CellContext`t, "Notes", All, CellStyle]; 
              NotebookFind[$CellContext`t, "NotesSection", All, CellStyle, 
                AutoScroll -> Top]][
              Documentation`HelpLookup[
               StringJoin["ref/", #]]]& ), ButtonSource -> ButtonContents, 
            Evaluator -> Automatic}], 
         Cell[
          StyleData["DetailsLink", "Printout"], FontFamily -> 
          "Source Sans Pro", FontSize :> If[CurrentValue[
              EvaluationCell[], "FontFamily"] === "Source Sans Pro", 
            Inherited, 
            If[CurrentValue[
               EvaluationCell[], "FontFamily"] === "WolframCodeSans", 
             Inherited, Inherited 0.88]], FontColor -> GrayLevel[0]]}, 
        Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["LinkAlt"], FontFamily -> "Source Sans Pro", FontSize :> 
          If[CurrentValue[
              EvaluationCell[], "FontFamily"] === "Source Sans Pro", 
            Inherited, 
            If[CurrentValue[
               EvaluationCell[], "FontFamily"] === "WolframCodeSans", 
             Inherited, Inherited 0.9]], FontColor -> GrayLevel[0]], 
         Cell[
          StyleData["LinkAlt", "Printout"], FontFamily -> "Source Sans Pro", 
          FontSize :> If[CurrentValue[
              EvaluationCell[], "FontFamily"] === "Source Sans Pro", 
            Inherited, 
            If[CurrentValue[
               EvaluationCell[], "FontFamily"] === "WolframCodeSans", 
             Inherited, Inherited 0.88]], FontColor -> GrayLevel[0]]}, 
        Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Hyperlink"], MenuSortingValue -> None, FontColor -> 
          RGBColor[0.3, 0.35, 0.5]], 
         Cell[
          StyleData["Hyperlink", "Printout"]]}, Closed]], 
      Cell[
       StyleData[
       "IndexNavigationLink", StyleDefinitions -> StyleData["Hyperlink"]], 
       MenuSortingValue -> None, FontColor -> 
       RGBColor[
        0.9019607843137255, 0.4117647058823529, 0.027450980392156862`]], 
      Cell[
       StyleData["Crosslink"], 
       ButtonBoxOptions -> {ButtonFunction :> (FrontEndExecute[{
            
            NotebookLocate[#2, "OpenInNewWindow" -> 
             CurrentValue["HyperlinkModifierKey"]]}]& ), Evaluator -> None, 
         Method -> "Queued"}], 
      Cell[
       StyleData["VocabularyLink"], FontColor -> GrayLevel[0], 
       ButtonBoxOptions -> {ButtonFunction :> (FrontEndExecute[{
            
            NotebookLocate[#2, "OpenInNewWindow" -> 
             CurrentValue["HyperlinkModifierKey"]]}]& ), Evaluator -> None, 
         Method -> "Queued"}], 
      Cell[
       StyleData["InlineCode"], SpanMaxSize -> 1, FontColor -> GrayLevel[0]], 
      
      Cell[
       StyleData["InlineCodeText"], SpanMaxSize -> 1, FontFamily -> 
       "Source Sans Pro", FontSize -> 0.95 Inherited], 
      Cell[
       StyleData["NoLabel"], ShowCellLabel -> 
       False, $CellContext`GeneratedCellStyles -> {
        "Output" -> "ExerciseOutput"}], 
      Cell[
       StyleData["MenuName"], FontFamily -> "Verdana", FontWeight -> "Bold", 
       FontColor -> GrayLevel[0.286275]], 
      Cell[
       StyleData["KeyEvent"], CellFrame -> {{0.5, 0.5}, {0.5, 0.5}}, 
       CellFrameMargins -> {{2, 2}, {2, 2}}, CellFrameColor -> GrayLevel[0.7],
        FontFamily -> "Verdana", FontColor -> GrayLevel[0.4]], 
      Cell[
       StyleData["KeyEventDelimiter"], FontColor -> GrayLevel[0.5]], 
      Cell[
       CellGroupData[{
         Cell["Key Styles", "Subsubsection"], 
         Cell[
          StyleData["Key0"], 
          TemplateBoxOptions -> {DisplayFunction -> (FrameBox[
              TagBox[
               GridBox[{{
                  ItemBox[
                   
                   TemplateBox[{"\[ThickSpace]", #, "\[ThickSpace]"}, 
                    "RowDefault"], Background -> GrayLevel[1], StripOnInput -> 
                   False]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
                False, GridBoxDividers -> {"Rows" -> {{None}}}, 
                GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{1.45}}},
                 GridBoxSpacings -> {"Columns" -> {{0}}}, 
                BaselinePosition -> {{1, 1}, Baseline}], "Grid"], 
              RoundingRadius -> 4, Background -> 
              GrayLevel[0.9333333333333333], 
              FrameMargins -> {{0, 0}, {-2, -2}}, FrameStyle -> {
                GrayLevel[0.8352941176470589], 
                AbsoluteThickness[1]}, BaselinePosition -> Baseline, 
              StripOnInput -> False]& )}], 
         Cell[
          StyleData["Key1"], 
          TemplateBoxOptions -> {DisplayFunction -> (FrameBox[
              TagBox[
               GridBox[{{
                  ItemBox[
                   
                   TemplateBox[{"\[ThickSpace]", #, "\[ThickSpace]"}, 
                    "RowDefault"], Background -> 
                   GrayLevel[0.9333333333333333], StripOnInput -> False], 
                  ItemBox[
                   
                   TemplateBox[{"\[ThickSpace]", #2, "\[ThickSpace]"}, 
                    "RowDefault"], Background -> GrayLevel[1], StripOnInput -> 
                   False]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
                False, GridBoxDividers -> {
                 "ColumnsIndexed" -> {2 -> GrayLevel[0.8352941176470589]}, 
                  "Rows" -> {{None}}}, 
                GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{1.45}}},
                 GridBoxSpacings -> {"Columns" -> {{0}}}, 
                BaselinePosition -> {{1, 1}, Baseline}], "Grid"], 
              RoundingRadius -> 4, Background -> 
              GrayLevel[0.9333333333333333], 
              FrameMargins -> {{0, 0}, {-2, -2}}, FrameStyle -> {
                GrayLevel[0.8352941176470589], 
                AbsoluteThickness[1]}, BaselinePosition -> Baseline, 
              StripOnInput -> False]& )}], 
         Cell[
          StyleData["Key2"], 
          TemplateBoxOptions -> {DisplayFunction -> (FrameBox[
              TagBox[
               GridBox[{{
                  ItemBox[
                   
                   TemplateBox[{"\[ThickSpace]", #, "\[ThickSpace]"}, 
                    "RowDefault"], Background -> 
                   GrayLevel[0.9333333333333333], StripOnInput -> False], 
                  ItemBox[
                   
                   TemplateBox[{"\[ThickSpace]", #2, "\[ThickSpace]"}, 
                    "RowDefault"], Background -> 
                   GrayLevel[0.9333333333333333], StripOnInput -> False], 
                  ItemBox[
                   
                   TemplateBox[{"\[ThickSpace]", #3, "\[ThickSpace]"}, 
                    "RowDefault"], Background -> GrayLevel[1], StripOnInput -> 
                   False]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
                False, GridBoxDividers -> {
                 "ColumnsIndexed" -> {
                   2 -> GrayLevel[0.8352941176470589], 3 -> 
                    GrayLevel[0.8352941176470589]}, "Rows" -> {{None}}}, 
                GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{1.45}}},
                 GridBoxSpacings -> {"Columns" -> {{0}}}, 
                BaselinePosition -> {{1, 1}, Baseline}], "Grid"], 
              RoundingRadius -> 4, Background -> 
              GrayLevel[0.9333333333333333], 
              FrameMargins -> {{0, 0}, {-2, -2}}, FrameStyle -> {
                GrayLevel[0.8352941176470589], 
                AbsoluteThickness[1]}, BaselinePosition -> Baseline, 
              StripOnInput -> False]& )}], 
         Cell[
          StyleData["Key3"], 
          TemplateBoxOptions -> {DisplayFunction -> (FrameBox[
              TagBox[
               GridBox[{{
                  ItemBox[
                   
                   TemplateBox[{"\[ThickSpace]", #, "\[ThickSpace]"}, 
                    "RowDefault"], Background -> 
                   GrayLevel[0.9333333333333333], StripOnInput -> False], 
                  ItemBox[
                   
                   TemplateBox[{"\[ThickSpace]", #2, "\[ThickSpace]"}, 
                    "RowDefault"], Background -> 
                   GrayLevel[0.9333333333333333], StripOnInput -> False], 
                  ItemBox[
                   
                   TemplateBox[{"\[ThickSpace]", #3, "\[ThickSpace]"}, 
                    "RowDefault"], Background -> 
                   GrayLevel[0.9333333333333333], StripOnInput -> False], 
                  ItemBox[
                   
                   TemplateBox[{"\[ThickSpace]", #4, "\[ThickSpace]"}, 
                    "RowDefault"], Background -> GrayLevel[1], StripOnInput -> 
                   False]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
                False, GridBoxDividers -> {
                 "ColumnsIndexed" -> {
                   2 -> GrayLevel[0.8352941176470589], 3 -> 
                    GrayLevel[0.8352941176470589], 4 -> 
                    GrayLevel[0.8352941176470589]}, "Rows" -> {{None}}}, 
                GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{1.45}}},
                 GridBoxSpacings -> {"Columns" -> {{0}}}, 
                BaselinePosition -> {{1, 1}, Baseline}], "Grid"], 
              RoundingRadius -> 4, Background -> 
              GrayLevel[0.9333333333333333], 
              FrameMargins -> {{0, 0}, {-2, -2}}, FrameStyle -> {
                GrayLevel[0.8352941176470589], 
                AbsoluteThickness[1]}, BaselinePosition -> Baseline, 
              StripOnInput -> False]& )}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Entity styles", "Subsubsection"], 
         Cell[
          StyleData["Entity"], ShowStringCharacters -> False, 
          TemplateBoxOptions -> {DisplayFunction -> (TooltipBox[
              FrameBox[
               PaneSelectorBox[{True -> GridBox[{{
                    
                    StyleBox[#, FontWeight -> "Bold", FontFamily -> 
                    "Source Sans Pro", FontColor -> 
                    RGBColor[0.395437, 0.20595, 0.061158]], 
                    StyleBox[
                    RowBox[{"(", #4, ")"}], FontFamily -> "Source Sans Pro", 
                    FontWeight -> "Plain", FontColor -> GrayLevel[0.65], 
                    Selectable -> False]}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0.2}}, "Rows" -> {{0}}},
                    BaselinePosition -> {1, 1}], False -> 
                 PaneBox[#, 
                   BaseStyle -> {
                    FontColor -> RGBColor[0.395437, 0.20595, 0.061158]}, 
                   BaselinePosition -> Baseline]}, 
                Dynamic[
                 CurrentValue[Evaluatable]], ImageSize -> Automatic, 
                BaselinePosition -> Baseline, 
                BaseStyle -> {FontFamily -> "Helvetica"}], FrameStyle -> 
               RGBColor[1., 0.504768, 0.], Background -> 
               RGBColor[1., 0.980392, 0.921569], 
               FrameMargins -> {{5, 5}, {1.5, 1.5}}, 
               ImageMargins -> {{2, 2}, {2, 2}}, BaselinePosition -> Baseline,
                RoundingRadius -> 4], #3, 
              BaseStyle -> {
               FontWeight -> "Plain", ShowStringCharacters -> False, 
                LineIndent -> 0, 
                PrivateFontOptions -> {"OperatorSubstitution" -> False}}]& ), 
            Editable -> False, InterpretationFunction -> (#2& )}], 
         Cell[
          StyleData["EntityFrameless"], ShowStringCharacters -> False, 
          TemplateBoxOptions -> {DisplayFunction -> (TooltipBox[
              PaneSelectorBox[{True -> GridBox[{{
                    
                    StyleBox[#, FontWeight -> "Bold", FontFamily -> 
                    "Source Sans Pro", FontColor -> 
                    RGBColor[0.395437, 0.20595, 0.061158]], 
                    StyleBox[
                    RowBox[{"(", #4, ")"}], FontFamily -> "Source Sans Pro", 
                    FontWeight -> "Plain", FontColor -> GrayLevel[0.65], 
                    Selectable -> False]}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                  GridBoxSpacings -> {"Columns" -> {{0.2}}, "Rows" -> {{0}}}, 
                  BaselinePosition -> {1, 1}], False -> 
                PaneBox[#, 
                  BaseStyle -> {
                   FontColor -> RGBColor[0.395437, 0.20595, 0.061158]}, 
                  BaselinePosition -> Baseline]}, 
               Dynamic[
                CurrentValue[Evaluatable]], ImageSize -> Automatic, 
               BaselinePosition -> Baseline, 
               BaseStyle -> {FontFamily -> "Helvetica"}], #3, 
              BaseStyle -> {
               ShowStringCharacters -> False, LineIndent -> 0, 
                PrivateFontOptions -> {
                 FontWeight -> "Plain", "OperatorSubstitution" -> False}}]& ),
             Editable -> False, InterpretationFunction -> (#2& )}], 
         Cell[
          StyleData["EntityFramelessHot"], ShowStringCharacters -> False, 
          TemplateBoxOptions -> {
           DisplayFunction -> (PaneSelectorBox[{True -> GridBox[{{
                   
                   StyleBox[#, FontWeight -> "Bold", FontFamily -> 
                    "Source Sans Pro", FontColor -> GrayLevel[0]], 
                   StyleBox[
                    RowBox[{"(", #4, ")"}], FontWeight -> "Plain", FontFamily -> 
                    "Source Sans Pro", FontColor -> GrayLevel[0], Selectable -> 
                    False]}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {"Columns" -> {{0.2}}, "Rows" -> {{0}}}, 
                 BaselinePosition -> {1, 1}], False -> 
               PaneBox[#, BaseStyle -> {FontColor -> GrayLevel[0]}, 
                 BaselinePosition -> Baseline]}, 
              Dynamic[
               CurrentValue[Evaluatable]], ImageSize -> Automatic, 
              BaselinePosition -> Baseline, 
              BaseStyle -> {
               FontWeight -> "Plain", FontFamily -> "Helvetica", 
                ShowStringCharacters -> False, LineIndent -> 0, 
                PrivateFontOptions -> {"OperatorSubstitution" -> False}}]& ), 
            Editable -> False, InterpretationFunction -> (#2& )}], 
         Cell[
          StyleData["EntityClass"], ShowStringCharacters -> False, 
          TemplateBoxOptions -> {DisplayFunction -> (TooltipBox[
              FrameBox[
               PaneSelectorBox[{True -> GridBox[{{
                    PaneBox[
                    DynamicBox[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Typeset", "Entity"}, 
                    "EntityClass.png"]], ImageSizeCache -> {8., {2., 6.}}], 
                    BaselinePosition -> Bottom], 
                    
                    StyleBox[#, FontWeight -> "Bold", FontFamily -> 
                    "Source Sans Pro", FontColor -> 
                    RGBColor[0.395437, 0.20595, 0.061158]], 
                    StyleBox[
                    RowBox[{"(", #4, ")"}], FontWeight -> "Plain", FontFamily -> 
                    "Source Sans Pro", FontColor -> GrayLevel[0.65], 
                    Selectable -> False]}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0.2}}, "Rows" -> {{0}}},
                    BaselinePosition -> {1, 2}], False -> GridBox[{{
                    PaneBox[
                    DynamicBox[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Typeset", "Entity"}, 
                    "EntityClass.png"]], ImageSizeCache -> {8., {2., 6.}}], 
                    BaselinePosition -> Bottom], 
                    
                    StyleBox[#, FontColor -> 
                    RGBColor[0.395437, 0.20595, 0.061158]]}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0.2}}, "Rows" -> {{0}}},
                    BaselinePosition -> {1, 2}]}, 
                Dynamic[
                 CurrentValue[Evaluatable]], ImageSize -> Automatic, 
                BaselinePosition -> Baseline, 
                BaseStyle -> {FontFamily -> "Helvetica"}], FrameStyle -> 
               RGBColor[1., 0.504768, 0.], Background -> 
               RGBColor[1., 0.980392, 0.921569], 
               FrameMargins -> {{5, 5}, {1.5, 1.5}}, 
               ImageMargins -> {{2, 2}, {2, 2}}, BaselinePosition -> Baseline,
                RoundingRadius -> 4], #3, 
              BaseStyle -> {
               FontWeight -> "Plain", ShowStringCharacters -> False, 
                LineIndent -> 0, 
                PrivateFontOptions -> {"OperatorSubstitution" -> False}}]& ), 
            Editable -> False, InterpretationFunction -> (#2& )}], 
         Cell[
          StyleData["EntityClassFrameless"], ShowStringCharacters -> False, 
          TemplateBoxOptions -> {DisplayFunction -> (TooltipBox[
              PaneSelectorBox[{True -> GridBox[{{
                    PaneBox[
                    DynamicBox[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Typeset", "Entity"}, 
                    "EntityClass.png"]], ImageSizeCache -> {8., {2., 6.}}], 
                    BaselinePosition -> Bottom], 
                    
                    StyleBox[#, FontWeight -> "Bold", FontFamily -> 
                    "Source Sans Pro", FontColor -> 
                    RGBColor[0.395437, 0.20595, 0.061158]], 
                    StyleBox[
                    RowBox[{"(", #4, ")"}], FontWeight -> "Plain", FontFamily -> 
                    "Source Sans Pro", FontColor -> GrayLevel[0.65], 
                    Selectable -> False]}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                  GridBoxSpacings -> {"Columns" -> {{0.2}}, "Rows" -> {{0}}}, 
                  BaselinePosition -> {1, 2}], False -> GridBox[{{
                    PaneBox[
                    DynamicBox[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Typeset", "Entity"}, 
                    "EntityClass.png"]], ImageSizeCache -> {8., {2., 6.}}], 
                    BaselinePosition -> Bottom], 
                    
                    StyleBox[#, FontColor -> 
                    RGBColor[0.395437, 0.20595, 0.061158]]}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                  GridBoxSpacings -> {"Columns" -> {{0.2}}, "Rows" -> {{0}}}, 
                  BaselinePosition -> {1, 2}]}, 
               Dynamic[
                CurrentValue[Evaluatable]], ImageSize -> Automatic, 
               BaselinePosition -> Baseline, 
               BaseStyle -> {FontFamily -> "Helvetica"}], #3, 
              BaseStyle -> {
               FontWeight -> "Plain", ShowStringCharacters -> False, 
                LineIndent -> 0, 
                PrivateFontOptions -> {"OperatorSubstitution" -> False}}]& ), 
            Editable -> False, InterpretationFunction -> (#2& )}], 
         Cell[
          StyleData["EntityClassFramelessHot"], ShowStringCharacters -> False,
           TemplateBoxOptions -> {
           DisplayFunction -> (PaneSelectorBox[{True -> GridBox[{{
                   PaneBox[
                    DynamicBox[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Typeset", "Entity"}, 
                    "EntityClass.png"]], ImageSizeCache -> {8., {2., 6.}}], 
                    BaselinePosition -> Bottom], 
                   
                   StyleBox[#, FontWeight -> "Bold", FontFamily -> 
                    "Source Sans Pro", FontColor -> GrayLevel[0]], 
                   StyleBox[
                    RowBox[{"(", #4, ")"}], FontWeight -> "Plain", FontFamily -> 
                    "Source Sans Pro", FontColor -> GrayLevel[0], Selectable -> 
                    False]}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {"Columns" -> {{0.2}}, "Rows" -> {{0}}}, 
                 BaselinePosition -> {1, 2}], False -> GridBox[{{
                   PaneBox[
                    DynamicBox[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Typeset", "Entity"}, 
                    "EntityClass.png"]], ImageSizeCache -> {8., {2., 6.}}], 
                    BaselinePosition -> Bottom], 
                   StyleBox[#, FontColor -> GrayLevel[0]]}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {"Columns" -> {{0.2}}, "Rows" -> {{0}}}, 
                 BaselinePosition -> {1, 2}]}, 
              Dynamic[
               CurrentValue[Evaluatable]], ImageSize -> Automatic, 
              BaselinePosition -> Baseline, 
              BaseStyle -> {
               FontWeight -> "Plain", FontFamily -> "Helvetica", 
                ShowStringCharacters -> False, LineIndent -> 0, 
                PrivateFontOptions -> {"OperatorSubstitution" -> False}}]& ), 
            Editable -> False, InterpretationFunction -> (#2& )}], 
         Cell[
          StyleData["EntityProperty"], ShowStringCharacters -> False, 
          TemplateBoxOptions -> {DisplayFunction -> (TooltipBox[
              FrameBox[
               
               PaneBox[#, 
                BaseStyle -> {
                 FontSlant -> Italic, FontWeight -> Plain, FontFamily -> 
                  "Source Sans Pro", FontColor -> 
                  RGBColor[0.395437, 0.20595, 0.061158]}, BaselinePosition -> 
                Baseline], FrameStyle -> 
               RGBColor[0.94227, 0.703639, 0.033387], Background -> 
               RGBColor[1., 0.980392, 0.921569], 
               FrameMargins -> {{5, 5}, {1.5, 1.5}}, 
               ImageMargins -> {{2, 2}, {2, 2}}, BaselinePosition -> Baseline,
                RoundingRadius -> 4], #3, 
              BaseStyle -> {
               FontWeight -> "Plain", ShowStringCharacters -> False, 
                LineIndent -> 0, 
                PrivateFontOptions -> {"OperatorSubstitution" -> False}}]& ), 
            Editable -> False, InterpretationFunction -> (#2& )}], 
         Cell[
          StyleData["EntityPropertyClass"], ShowStringCharacters -> False, 
          TemplateBoxOptions -> {DisplayFunction -> (TooltipBox[
              FrameBox[
               PaneBox[
                GridBox[{{
                   PaneBox[
                    DynamicBox[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Typeset", "Entity"}, 
                    "EntityClass.png"]], ImageSizeCache -> {8., {2., 6.}}], 
                    BaselinePosition -> Bottom], #}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {"Columns" -> {{0.2}}, "Rows" -> {{0}}}, 
                 BaselinePosition -> {1, 2}], 
                BaseStyle -> {
                 FontSlant -> Italic, FontWeight -> Plain, FontFamily -> 
                  "Source Sans Pro", FontColor -> 
                  RGBColor[0.395437, 0.20595, 0.061158]}, BaselinePosition -> 
                Baseline], FrameStyle -> 
               RGBColor[0.94227, 0.703639, 0.033387], Background -> 
               RGBColor[1., 0.980392, 0.921569], 
               FrameMargins -> {{5, 5}, {1.5, 1.5}}, 
               ImageMargins -> {{2, 2}, {2, 2}}, BaselinePosition -> Baseline,
                RoundingRadius -> 4], #3, 
              BaseStyle -> {
               FontWeight -> "Plain", ShowStringCharacters -> False, 
                LineIndent -> 0, 
                PrivateFontOptions -> {"OperatorSubstitution" -> False}}]& ), 
            Editable -> False, InterpretationFunction -> (#2& )}], 
         Cell[
          StyleData["EntityValue"], ShowStringCharacters -> False, 
          TemplateBoxOptions -> {DisplayFunction -> (FrameBox[
              
              GridBox[{{#, #2}}, GridBoxAlignment -> {"Rows" -> {{Baseline}}},
                GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}}, 
               GridBoxSpacings -> {"Columns" -> {{0}}}, 
               BaselinePosition -> {1, 1}], Background -> 
              RGBColor[{0.9921568627450981, 0.9529411764705882, 
                0.8509803921568627}], BaselinePosition -> Baseline, 
              FrameMargins -> {{1, 1}, {1, 1}}, ImageMargins -> 2, FrameStyle -> 
              RGBColor[{0.9333333333333333, 0.8470588235294118, 
                0.5529411764705883}], RoundingRadius -> 5]& )}]}, Closed]]}, 
     Closed]]}, Visible -> False, FrontEndVersion -> 
  "11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, 2018)", 
  StyleDefinitions -> "StylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "p:249"->{
  Cell[686, 24, 363, 10, 70, "SectionDoubleDigit",ExpressionUUID->"af1f6444-b57b-41fe-9236-9fc1180fc493",
   CounterAssignments->{{"Section", 40}, {"Subsection", 0}, {"Subsubsection", 0}, {"Exercise", 0}},
   CellTags->"p:249"]},
 "i:1"->{
  Cell[1052, 36, 244, 7, 70, "Text",ExpressionUUID->"8270eee5-a94f-46e6-82f8-afa0947cf845",
   CellTags->"i:1"]},
 "i:2"->{
  Cell[4478, 162, 721, 24, 70, "Text",ExpressionUUID->"cd066f74-1202-49d2-a5d4-e7de85f665f5",
   CellTags->"i:2"]},
 "i:3"->{
  Cell[15850, 525, 571, 17, 70, "Text",ExpressionUUID->"7a8da17d-7ed5-4d9b-bfae-7d87e9de3e40",
   CellTags->"i:3"]},
 "LastCellOfAPage"->{
  Cell[16820, 560, 359, 11, 70, "Input",ExpressionUUID->"d0976369-4c5f-4a73-876c-ef06438102ae",
   CellTags->"LastCellOfAPage"],
  Cell[121864, 3557, 223, 7, 70, "Output",ExpressionUUID->"fc3309b3-a23b-43fa-b9c9-6a114350369e",
   Evaluatable->False,
   CellTags->"LastCellOfAPage"],
  Cell[130735, 3850, 10080, 200, 70, "Output",ExpressionUUID->"39cd7747-487f-4c0f-b074-54ca80a651a4",
   Evaluatable->False,
   CellTags->"LastCellOfAPage"],
  Cell[257544, 6928, 1302, 39, 70, "Exercise",ExpressionUUID->"98c41fea-82cc-48f8-92db-3258ab19a1fb",
   CellTags->"LastCellOfAPage"],
  Cell[269184, 7295, 278, 7, 70, "MoreExplore",ExpressionUUID->"248aa239-4d9a-4bf6-91d5-7d74d19cda34",
   CellTags->"LastCellOfAPage"]},
 "p:250"->{
  Cell[17182, 573, 182, 6, 70, "CodeCaption",ExpressionUUID->"aede3e2b-55f5-48bc-bdad-acb14c9cb0cc",
   CellTags->"p:250"]},
 "i:4"->{
  Cell[43296, 1299, 540, 20, 70, "Text",ExpressionUUID->"22dd2754-5540-424c-ad64-7f7888de028a",
   CellTags->"i:4"]},
 "i:5"->{
  Cell[79359, 2315, 585, 22, 70, "Text",ExpressionUUID->"35a56147-95bf-4563-bc5d-1b254b2ade21",
   CellTags->"i:5"]},
 "i:6"->{
  Cell[99318, 2884, 917, 32, 70, "Text",ExpressionUUID->"481a4a97-3aa5-4cb5-9781-da0d399a5a75",
   CellTags->"i:6"]},
 "bubble-sort"->{
  Cell[120750, 3521, 495, 10, 70, "Text",ExpressionUUID->"1e58d303-eccf-45fe-ad95-e1be5c8a2f45",
   CellTags->{"bubble-sort", "i:7"}]},
 "i:7"->{
  Cell[120750, 3521, 495, 10, 70, "Text",ExpressionUUID->"1e58d303-eccf-45fe-ad95-e1be5c8a2f45",
   CellTags->{"bubble-sort", "i:7"}]},
 "p:251"->{
  Cell[122102, 3567, 242, 7, 70, "CodeCaption",ExpressionUUID->"0d4bcc09-dc7f-49b8-b22c-9cfb31e08c36",
   CellTags->{"p:251", "i:8"}]},
 "i:8"->{
  Cell[122102, 3567, 242, 7, 70, "CodeCaption",ExpressionUUID->"0d4bcc09-dc7f-49b8-b22c-9cfb31e08c36",
   CellTags->{"p:251", "i:8"}]},
 "FixedPointList"->{
  Cell[124062, 3630, 602, 18, 70, "Text",ExpressionUUID->"0f45920b-46f2-4f45-a452-f01470becd59",
   CellTags->"FixedPointList"]},
 "i:9"->{
  Cell[124667, 3650, 162, 5, 70, "CodeCaption",ExpressionUUID->"fee6ee32-fd4d-47bf-8469-784676e2e786",
   CellTags->"i:9"]},
 "i:10"->{
  Cell[126364, 3707, 253, 7, 70, "CodeCaption",ExpressionUUID->"82d84b0c-dc0d-4190-89ba-03ddd1c2ad65",
   CellTags->"i:10"]},
 "p:252"->{
  Cell[140864, 4056, 122, 4, 70, "VocabularySection",ExpressionUUID->"1451377f-1e25-4bdb-944d-5c7add7beb7d",
   CellTags->"p:252"]},
 "i:11"->{
  Cell[196057, 5377, 1294, 43, 70, "Exercise",ExpressionUUID->"411fb05b-12cf-4296-85bb-e38d50a9df06",
   CellTags->"i:11"]},
 "i:12"->{
  Cell[198819, 5467, 1228, 40, 70, "Exercise",ExpressionUUID->"f1811c94-82d8-4d4a-9a2a-82767710f723",
   CellTags->"i:12"]},
 "i:13"->{
  Cell[202388, 5579, 2037, 72, 70, "Exercise",ExpressionUUID->"40219f7f-cf1c-40c6-a00f-b95d67f4e4a0",
   CellTags->"i:13"]},
 "i:14"->{
  Cell[249960, 6780, 1188, 37, 70, "Exercise",ExpressionUUID->"6b43e602-4069-4a69-9904-183902911cb5",
   CellTags->"i:14"]},
 "p:253"->{
  Cell[263550, 7079, 125, 4, 70, "QASection",ExpressionUUID->"df56db06-9d4c-43e0-aced-18304458d46a",
   CellTags->"p:253"]},
 "i:15"->{
  Cell[263866, 7093, 1176, 39, 70, "Answer",ExpressionUUID->"cfa70afd-cd07-4e87-b215-f41dc6ee8308",
   CellTags->"i:15"]},
 "i:16"->{
  Cell[265279, 7142, 342, 15, 70, "Answer",ExpressionUUID->"ca445fa8-e933-499c-929a-abb04d49e47e",
   CellTags->"i:16"]},
 "i:17"->{
  Cell[267166, 7217, 1098, 43, 70, "TechNote",ExpressionUUID->"d998d500-ddff-4c18-bf22-0f99a4812259",
   CellTags->"i:17"]},
 "i:18"->{
  Cell[268267, 7262, 760, 23, 70, "TechNote",ExpressionUUID->"8d7a00f0-bf31-44a4-8f81-9ba03b0beb1e",
   CellTags->"i:18"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"p:249", 360835, 9148},
 {"i:1", 361075, 9152},
 {"i:2", 361199, 9155},
 {"i:3", 361325, 9158},
 {"LastCellOfAPage", 361464, 9161},
 {"p:250", 362189, 9174},
 {"i:4", 362324, 9177},
 {"i:5", 362452, 9180},
 {"i:6", 362580, 9183},
 {"bubble-sort", 362716, 9186},
 {"i:7", 362862, 9189},
 {"p:251", 363010, 9192},
 {"i:8", 363156, 9195},
 {"FixedPointList", 363313, 9198},
 {"i:9", 363453, 9201},
 {"i:10", 363589, 9204},
 {"p:252", 363727, 9207},
 {"i:11", 363871, 9210},
 {"i:12", 364007, 9213},
 {"i:13", 364143, 9216},
 {"i:14", 364279, 9219},
 {"p:253", 364416, 9222},
 {"i:15", 364552, 9225},
 {"i:16", 364686, 9228},
 {"i:17", 364819, 9231},
 {"i:18", 364955, 9234}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[686, 24, 363, 10, 70, "SectionDoubleDigit",ExpressionUUID->"af1f6444-b57b-41fe-9236-9fc1180fc493",
 CounterAssignments->{{"Section", 40}, {"Subsection", 0}, {"Subsubsection", 0}, {"Exercise", 0}},
 CellTags->"p:249"],
Cell[1052, 36, 244, 7, 70, "Text",ExpressionUUID->"8270eee5-a94f-46e6-82f8-afa0947cf845",
 CellTags->"i:1"],
Cell[1299, 45, 1370, 48, 70, "Text",ExpressionUUID->"fa3ed95b-c3ac-45aa-a43b-8cbe3bd7db12"],
Cell[2672, 95, 205, 7, 70, "CodeCaption",ExpressionUUID->"1b13fe4a-dac8-4c89-b4b8-0dc3b74f78c2"],
Cell[2880, 104, 246, 7, 70, "Input",ExpressionUUID->"da95d341-5ea9-433a-ab45-4cf27e8a7ebb"],
Cell[3129, 113, 154, 4, 70, "CodeCaption",ExpressionUUID->"8e72bd95-9797-47dc-a406-0f4d07e7c0b2"],
Cell[CellGroupData[{
Cell[3308, 121, 422, 12, 70, "Input",ExpressionUUID->"dea7cf2e-78cb-4869-bc77-7831695e538b"],
Cell[3733, 135, 730, 24, 70, "Output",ExpressionUUID->"f872878e-9a62-4d28-ab96-b4b58c4da015",
 Evaluatable->False]
}, Open  ]],
Cell[4478, 162, 721, 24, 70, "Text",ExpressionUUID->"cd066f74-1202-49d2-a5d4-e7de85f665f5",
 CellTags->"i:2"],
Cell[5202, 188, 217, 8, 70, "CodeCaption",ExpressionUUID->"d2395ea9-bb89-494e-92b6-5f68628f28d6"],
Cell[5422, 198, 297, 9, 70, "Input",ExpressionUUID->"cad09509-4ede-49f8-9e99-aa505c8eea64"],
Cell[5722, 209, 155, 4, 70, "CodeCaption",ExpressionUUID->"6ae96a1e-9431-4ac7-8e9e-a7c190561109"],
Cell[CellGroupData[{
Cell[5902, 217, 338, 10, 70, "Input",ExpressionUUID->"18d85498-8a73-47f7-a6ab-6c8a1c1981cf"],
Cell[6243, 229, 604, 19, 70, "Output",ExpressionUUID->"4382977c-6599-432b-bffa-2e340db382de",
 Evaluatable->False]
}, Open  ]],
Cell[6862, 251, 279, 10, 70, "Text",ExpressionUUID->"b135c557-9dcf-46b1-b382-5415f343ab00"],
Cell[7144, 263, 139, 3, 70, "CodeCaption",ExpressionUUID->"48b614eb-3e78-4558-85d1-caf7463eab01"],
Cell[7286, 268, 200, 7, 70, "Input",ExpressionUUID->"0e899d0c-91d8-4c0c-967a-55249fa80b5e"],
Cell[7489, 277, 213, 7, 70, "Input",ExpressionUUID->"4b2c144c-b2e9-4181-af82-a7bbea77166d"],
Cell[7705, 286, 148, 4, 70, "CodeCaption",ExpressionUUID->"296f9042-debb-42d0-b200-9586a91c4ac4"],
Cell[CellGroupData[{
Cell[7878, 294, 438, 14, 70, "Input",ExpressionUUID->"f97ae291-e24c-4c6d-bf36-620030d22705"],
Cell[8319, 310, 7516, 212, 70, "Output",ExpressionUUID->"9110a123-ef16-4ec2-84b8-00e93ad13b11",
 Evaluatable->False]
}, Open  ]],
Cell[15850, 525, 571, 17, 70, "Text",ExpressionUUID->"7a8da17d-7ed5-4d9b-bfae-7d87e9de3e40",
 CellTags->"i:3"],
Cell[16424, 544, 169, 6, 70, "Text",ExpressionUUID->"fa220713-1f97-406d-8c8e-2b32a0604792"],
Cell[16596, 552, 221, 6, 70, "CodeCaption",ExpressionUUID->"5a6fb1e7-99d5-442b-8f4d-2f3466fbf59d"],
Cell[16820, 560, 359, 11, 70, "Input",ExpressionUUID->"d0976369-4c5f-4a73-876c-ef06438102ae",
 CellTags->"LastCellOfAPage"],
Cell[17182, 573, 182, 6, 70, "CodeCaption",ExpressionUUID->"aede3e2b-55f5-48bc-bdad-acb14c9cb0cc",
 CellTags->"p:250"],
Cell[CellGroupData[{
Cell[17389, 583, 12303, 335, 70, "Input",ExpressionUUID->"e57ca716-45b3-4fb7-bd69-d9cffced3aa8"],
Cell[29695, 920, 13586, 376, 70, "Output",ExpressionUUID->"ec0a690c-c213-4c4a-b892-7b3d0817aee2",
 Evaluatable->False]
}, Open  ]],
Cell[43296, 1299, 540, 20, 70, "Text",ExpressionUUID->"22dd2754-5540-424c-ad64-7f7888de028a",
 CellTags->"i:4"],
Cell[43839, 1321, 178, 6, 70, "CodeCaption",ExpressionUUID->"830a10ae-95c7-4f24-8220-15cdf15138dc"],
Cell[44020, 1329, 367, 11, 70, "Input",ExpressionUUID->"04b4ae57-ebfb-4371-ac7b-9eabdec910c3"],
Cell[44390, 1342, 205, 7, 70, "CodeCaption",ExpressionUUID->"dac323a6-8101-4579-91a8-94fb76d67da6"],
Cell[CellGroupData[{
Cell[44620, 1353, 12305, 335, 70, "Input",ExpressionUUID->"11a8afb1-e702-4123-8167-5ffd63152954"],
Cell[56928, 1690, 22416, 622, 70, "Output",ExpressionUUID->"512fe5a8-269f-4066-86f3-29d593a54587",
 Evaluatable->False]
}, Open  ]],
Cell[79359, 2315, 585, 22, 70, "Text",ExpressionUUID->"35a56147-95bf-4563-bc5d-1b254b2ade21",
 CellTags->"i:5"],
Cell[79947, 2339, 224, 7, 70, "CodeCaption",ExpressionUUID->"9ce88994-361c-4d79-acba-edfc94774fc1"],
Cell[80174, 2348, 429, 15, 70, "Input",ExpressionUUID->"f81a7b31-7c1b-4587-bcf4-b8363c26b32d"],
Cell[CellGroupData[{
Cell[80628, 2367, 12209, 336, 70, "Input",ExpressionUUID->"bb51ce6e-0972-437d-98bb-b91dfe9bad8f"],
Cell[92840, 2705, 6463, 176, 70, "Output",ExpressionUUID->"540e9d4f-b628-4c31-a844-b66e808e1546",
 Evaluatable->False]
}, Open  ]],
Cell[99318, 2884, 917, 32, 70, "Text",ExpressionUUID->"481a4a97-3aa5-4cb5-9781-da0d399a5a75",
 CellTags->"i:6"],
Cell[100238, 2918, 219, 7, 70, "CodeCaption",ExpressionUUID->"7cfa93b4-5dca-46ea-a167-936a76e28c12"],
Cell[100460, 2927, 403, 14, 70, "Input",ExpressionUUID->"c6165c72-c1cf-4680-a4cf-0d3d83b60581"],
Cell[CellGroupData[{
Cell[100888, 2945, 836, 29, 70, "Input",ExpressionUUID->"bedc38ab-67cf-4a34-bebe-fd54139117f6"],
Cell[101727, 2976, 970, 33, 70, "Output",ExpressionUUID->"aeeb065d-4bb1-4bb9-abe2-5da4e13bdceb",
 Evaluatable->False]
}, Open  ]],
Cell[102712, 3012, 179, 6, 70, "CodeCaption",ExpressionUUID->"51b90fc4-7c24-4517-8553-99263101f6dd"],
Cell[102894, 3020, 556, 19, 70, "Input",ExpressionUUID->"45a33253-3370-4ff9-afb0-1c90de933a5a"],
Cell[CellGroupData[{
Cell[103475, 3043, 12209, 336, 70, "Input",ExpressionUUID->"b92b80dd-9557-4c50-b2fc-c71a9244e70f"],
Cell[115687, 3381, 5048, 137, 70, "Output",ExpressionUUID->"5640e753-f8c8-497e-a2db-e8936f97c875",
 Evaluatable->False]
}, Open  ]],
Cell[120750, 3521, 495, 10, 70, "Text",ExpressionUUID->"1e58d303-eccf-45fe-ad95-e1be5c8a2f45",
 CellTags->{"bubble-sort", "i:7"}],
Cell[121248, 3533, 191, 6, 70, "CodeCaption",ExpressionUUID->"5d13821b-06eb-4d2b-81bb-31fd455bbd61"],
Cell[CellGroupData[{
Cell[121464, 3543, 397, 12, 70, "Input",ExpressionUUID->"f8fdc410-6507-4644-a14e-86c8ca716cec"],
Cell[121864, 3557, 223, 7, 70, "Output",ExpressionUUID->"fc3309b3-a23b-43fa-b9c9-6a114350369e",
 Evaluatable->False,
 CellTags->"LastCellOfAPage"]
}, Open  ]],
Cell[122102, 3567, 242, 7, 70, "CodeCaption",ExpressionUUID->"0d4bcc09-dc7f-49b8-b22c-9cfb31e08c36",
 CellTags->{"p:251", "i:8"}],
Cell[CellGroupData[{
Cell[122369, 3578, 550, 18, 70, "Input",ExpressionUUID->"558f8f89-36c0-4528-a19e-c81ebac2e48a"],
Cell[122922, 3598, 1125, 29, 70, "Output",ExpressionUUID->"27d56f78-629b-479c-a35b-7d753d8c3263",
 Evaluatable->False]
}, Open  ]],
Cell[124062, 3630, 602, 18, 70, "Text",ExpressionUUID->"0f45920b-46f2-4f45-a452-f01470becd59",
 CellTags->"FixedPointList"],
Cell[124667, 3650, 162, 5, 70, "CodeCaption",ExpressionUUID->"fee6ee32-fd4d-47bf-8469-784676e2e786",
 CellTags->"i:9"],
Cell[CellGroupData[{
Cell[124854, 3659, 545, 18, 70, "Input",ExpressionUUID->"4bb82ba7-a698-42f5-94fc-7ac5a87ce2f7"],
Cell[125402, 3679, 947, 25, 70, "Output",ExpressionUUID->"752cb7d4-b862-499c-8a88-a3b3338a5106",
 Evaluatable->False]
}, Open  ]],
Cell[126364, 3707, 253, 7, 70, "CodeCaption",ExpressionUUID->"82d84b0c-dc0d-4190-89ba-03ddd1c2ad65",
 CellTags->"i:10"],
Cell[CellGroupData[{
Cell[126642, 3718, 105, 3, 70, "Input",ExpressionUUID->"118d4e0a-7fb7-4e20-a76e-cee126fd96c9"],
Cell[126750, 3723, 843, 26, 70, "Output",ExpressionUUID->"1c8ea9ea-01c4-4ad3-bdfd-c62a252b7395",
 Evaluatable->False]
}, Open  ]],
Cell[127608, 3752, 231, 8, 70, "CodeCaption",ExpressionUUID->"65da1193-b3ae-4958-8471-d805ba4de1f2"],
Cell[CellGroupData[{
Cell[127864, 3764, 108, 3, 70, "Input",ExpressionUUID->"4176a45f-e12f-4cc2-a62f-f8c4e9753ae5"],
Cell[127975, 3769, 1899, 46, 70, "Output",ExpressionUUID->"4980e38c-98b3-44f7-88a3-77fba621fd33",
 Evaluatable->False]
}, Open  ]],
Cell[129889, 3818, 172, 6, 70, "CodeCaption",ExpressionUUID->"559277ff-5bc2-4eb0-86a6-bcce74bfcff0"],
Cell[CellGroupData[{
Cell[130086, 3828, 646, 20, 70, "Input",ExpressionUUID->"ce112e9d-40d8-4a07-b4cb-57495d63476b"],
Cell[130735, 3850, 10080, 200, 70, "Output",ExpressionUUID->"39cd7747-487f-4c0f-b074-54ca80a651a4",
 Evaluatable->False,
 CellTags->"LastCellOfAPage"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[140864, 4056, 122, 4, 70, "VocabularySection",ExpressionUUID->"1451377f-1e25-4bdb-944d-5c7add7beb7d",
 CellTags->"p:252"],
Cell[140989, 4062, 1702, 50, 70, "VocabularyTable",ExpressionUUID->"69de7dfc-09e3-4615-98eb-51a154c5a097"]
}, Open  ]],
Cell[CellGroupData[{
Cell[142728, 4117, 1722, 45, 70, "ExerciseSection",ExpressionUUID->"0db698d5-f702-4988-a252-364989044b33"],
Cell[CellGroupData[{
Cell[144475, 4166, 1216, 39, 70, "ExerciseSummaryCell",ExpressionUUID->"8b821788-cbd3-442a-a180-2720442cda96"],
Cell[CellGroupData[{
Cell[145716, 4209, 756, 20, 70, "Exercise",ExpressionUUID->"32c65170-d3d3-498e-b970-2b09437f6085"],
Cell[146475, 4231, 6094, 142, 70, "ExerciseOutput",ExpressionUUID->"6401b763-9bc0-4f28-bba9-7f93e7fd5bd8"]
}, Closed]],
Cell[CellGroupData[{
Cell[152606, 4378, 705, 20, 70, "Exercise",ExpressionUUID->"dcf9b8e0-4f3d-4b8d-817f-10562adda47c"],
Cell[153314, 4400, 1263, 37, 70, "ExerciseOutput",ExpressionUUID->"76e7c2eb-5a13-4ebb-b926-f7dc21a41b8b"]
}, Closed]],
Cell[154592, 4440, 714, 20, 70, "Exercise",ExpressionUUID->"0dc36530-039d-4dab-b43e-46ff1d40f419"],
Cell[CellGroupData[{
Cell[155331, 4464, 818, 22, 70, "Exercise",ExpressionUUID->"649c20eb-c63e-4107-b900-41701e14a339"],
Cell[156152, 4488, 28153, 615, 70, "ExerciseOutput",ExpressionUUID->"b7fdba1e-ba51-4910-a6b5-62fbf3e8fc42"]
}, Closed]],
Cell[CellGroupData[{
Cell[184342, 5108, 911, 27, 70, "Exercise",ExpressionUUID->"830631ea-97f1-46f7-8b79-dc541cc62169"],
Cell[185256, 5137, 1917, 53, 70, "ExerciseOutput",ExpressionUUID->"773c9f87-3629-42ef-b6ec-fd4befaccb2d"]
}, Closed]],
Cell[CellGroupData[{
Cell[187210, 5195, 824, 24, 70, "Exercise",ExpressionUUID->"ede0eade-0ad2-48a7-af9d-1c5244ed42c0"],
Cell[188037, 5221, 7983, 151, 70, "ExerciseOutput",ExpressionUUID->"52eb3f4e-b2ce-4155-89ca-a74c8d4e10e9"]
}, Closed]],
Cell[CellGroupData[{
Cell[196057, 5377, 1294, 43, 70, "Exercise",ExpressionUUID->"411fb05b-12cf-4296-85bb-e38d50a9df06",
 CellTags->"i:11"],
Cell[197354, 5422, 1428, 40, 70, "ExerciseOutput",ExpressionUUID->"e1428f02-3899-4356-ad1e-efc8652fb12e"]
}, Closed]],
Cell[CellGroupData[{
Cell[198819, 5467, 1228, 40, 70, "Exercise",ExpressionUUID->"f1811c94-82d8-4d4a-9a2a-82767710f723",
 CellTags->"i:12"],
Cell[200050, 5509, 2301, 65, 70, "ExerciseOutput",ExpressionUUID->"417650e4-db17-450e-b0bf-6a0dd7db1c6c"]
}, Closed]],
Cell[CellGroupData[{
Cell[202388, 5579, 2037, 72, 70, "Exercise",ExpressionUUID->"40219f7f-cf1c-40c6-a00f-b95d67f4e4a0",
 CellTags->"i:13"],
Cell[204428, 5653, 40448, 1015, 70, "ExerciseOutput",ExpressionUUID->"69430c5f-fd1b-4919-aa45-74fbbd71eb75"]
}, Closed]],
Cell[CellGroupData[{
Cell[244913, 6673, 803, 25, 70, "Exercise",ExpressionUUID->"04661240-f238-457f-84eb-cf4cfcd2bf0c"],
Cell[245719, 6700, 4204, 75, 70, "ExerciseOutput",ExpressionUUID->"eb850daa-06be-4304-8d23-bb3da6bb7594"]
}, Closed]],
Cell[CellGroupData[{
Cell[249960, 6780, 1188, 37, 70, "Exercise",ExpressionUUID->"6b43e602-4069-4a69-9904-183902911cb5",
 CellTags->"i:14"],
Cell[251151, 6819, 6356, 104, 70, "ExerciseOutput",ExpressionUUID->"621bb3fc-b022-482a-ac0d-bd4005a19e29"]
}, Closed]],
Cell[CellGroupData[{
Cell[257544, 6928, 1302, 39, 70, "Exercise",ExpressionUUID->"98c41fea-82cc-48f8-92db-3258ab19a1fb",
 CellTags->"LastCellOfAPage"],
Cell[258849, 6969, 4640, 103, 70, "ExerciseOutput",ExpressionUUID->"bd8f5c1a-4efc-4e3e-af6b-74c3a0446ea5"]
}, Closed]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[263550, 7079, 125, 4, 70, "QASection",ExpressionUUID->"df56db06-9d4c-43e0-aced-18304458d46a",
 CellTags->"p:253"],
Cell[263678, 7085, 185, 6, 70, "Question",ExpressionUUID->"b3a1be6c-b291-49dd-badb-6625aa296e5c"],
Cell[263866, 7093, 1176, 39, 70, "Answer",ExpressionUUID->"cfa70afd-cd07-4e87-b215-f41dc6ee8308",
 CellTags->"i:15"],
Cell[265045, 7134, 231, 6, 70, "Question",ExpressionUUID->"46230571-f9c9-4116-beb3-bc19ca122d3a"],
Cell[265279, 7142, 342, 15, 70, "Answer",ExpressionUUID->"ca445fa8-e933-499c-929a-abb04d49e47e",
 CellTags->"i:16"],
Cell[265624, 7159, 214, 8, 70, "Question",ExpressionUUID->"3d74b691-54b1-41d2-8cb1-7646a82482e3"],
Cell[265841, 7169, 610, 18, 70, "Answer",ExpressionUUID->"d8f9c462-50f2-44a1-bcba-73742c221df7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[266488, 7192, 111, 3, 70, "TechNoteSection",ExpressionUUID->"7b46b537-c059-4c40-9fa4-69a72969ae42"],
Cell[266602, 7197, 561, 18, 70, "TechNote",ExpressionUUID->"d64ccf54-cd05-4304-b168-8568a6c44c40"],
Cell[267166, 7217, 1098, 43, 70, "TechNote",ExpressionUUID->"d998d500-ddff-4c18-bf22-0f99a4812259",
 CellTags->"i:17"],
Cell[268267, 7262, 760, 23, 70, "TechNote",ExpressionUUID->"8d7a00f0-bf31-44a4-8f81-9ba03b0beb1e",
 CellTags->"i:18"]
}, Open  ]],
Cell[CellGroupData[{
Cell[269064, 7290, 117, 3, 70, "MoreExploreSection",ExpressionUUID->"dbac3a82-17e9-4410-9867-092c515aca8c"],
Cell[269184, 7295, 278, 7, 70, "MoreExplore",ExpressionUUID->"248aa239-4d9a-4bf6-91d5-7d74d19cda34",
 CellTags->"LastCellOfAPage"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
(* NotebookSignature lQW6FyeqhoShgleaQxU8zxvw *)
